/*
 * config-home.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */

ext.installGradleWrapper = false
ext.initScmForNewProjects = false
if (!project.hasProperty('commonGradleBuildUrl')) {
    ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}


apply from: "${commonGradleBuildElementPath}/base.gradle"
apply from: "${commonGradleBuildElementPath}/base/gradle.gradle"


/***************************************************************************************
 * default tasks
 ***************************************************************************************/
defaultTasks 'projectValidation'


/***************************************************************************************
 * project config validation
 ***************************************************************************************/
projectValidation {
	doLast {
		def gradlePath = "$rootDirectory/gradle"
		if (project.getProperty('IS_NEW') || !new File(gradlePath).exists() || !new File("$gradlePath/defaults.gradle").exists()) {			
			printInfo("> Copy templates from " + colorize(HIGHLITE_LEVEL, commonGradleTemplatePath) + ".") 

			new File(gradlePath).mkdirs()
			copyFile("${commonGradleTemplateBasePath}/defaults.gradle.template", "${gradlePath}/defaults.gradle")
			copyFile("${commonGradleTemplateBasePath}/custom.gradle.template", "${gradlePath}/custom.gradle")

			def confPath = "$rootDirectory/conf"
			new File(confPath).mkdirs()
			copy { from "${commonGradleConfigPath}" include "*" exclude "jptools" into "${confPath}" }
			
			def binPath = "$rootDirectory/bin"
			new File(binPath).mkdirs()
			def commonBuildHome=System.getenv('CB_HOME') 
			if (commonBuildHome!=null) {
				copyFile("${commonBuildHome}/bin/sample/cb-custom-sample.bat", "${binPath}/cb-custom.bat")
				copyFile("${commonBuildHome}/bin/sample/cb-custom-sample.sh", "${binPath}/cb-custom.sh")
				//copyFile("${commonBuildHome}/conf/dockterm-types.properties", "${confPath}/dockterm-types.properties")
				//copyFile("${commonBuildHome}/conf/dockterm-types.properties", "${confPath}/dockterm-types.properties")
			}
			
			def gradleTemplatePath = "${gradlePath}/${commonGradleTemplatePathName}"
			new File(gradleTemplatePath).mkdirs()
			def gradleBaseTemplatePath = "${gradleTemplatePath}/base"
			new File(gradleBaseTemplatePath).mkdirs()
			copy { from "${commonGradleTemplateBasePath}" include "*.template" exclude "defaults.gradle.template" into "${gradleBaseTemplatePath}" }

			def gradleConfigTemplatePath = "${gradleTemplatePath}/config"
			new File(gradleConfigTemplatePath).mkdirs()
			copy { from "${commonGradleTemplateConfigPath}" include "*.template" into "${gradleConfigTemplatePath}" }
			
			def gradleJavaTemplatePath = "${gradleTemplatePath}/java"
			new File(gradleJavaTemplatePath).mkdirs()
			copy { from "${commonGradleTemplateJavaPath}" include "*.template" into "${gradleJavaTemplatePath}" }
			
			def gradleNodeJsTemplatePath = "${gradleTemplatePath}/nodejs"
			new File(gradleNodeJsTemplatePath).mkdirs()
			copy { from "${commonGradleTemplateNodeJsPath}" include "*.template" into "${gradleNodeJsTemplatePath}" }

			def gradleQuarkusTemplatePath = "${gradleTemplatePath}/quarkus"
			new File(gradleQuarkusTemplatePath).mkdirs()
			copy { from "${commonGradleTemplateQuarkusPath}" include "*.template" into "${gradleQuarkusTemplatePath}" }
			
			def gradleScmTemplatePath = "${gradleTemplatePath}/scm"
			new File(gradleScmTemplatePath).mkdirs()
			copy { from "${commonGradleTemplateScmPath}" include "*.template" into "${gradleScmTemplatePath}" }

			def gradleCheckstyleTemplatePath = "${confPath}/checkstyle"
			new File(gradleCheckstyleTemplatePath).mkdirs()
			//copyFile( "${commonGradleTemplateCheckstylePath}/checkstyle-file-header.txt.template", "${gradleCheckstyleTemplatePath}/checkstyle-file-header.txt")
			//copyFile( "${commonGradleTemplateCheckstylePath}/checkstyle-suppressions.xml.template", "${gradleCheckstyleTemplatePath}/checkstyle-suppressions.xml")
			//copyFile( "${commonGradleTemplateCheckstylePath}/checkstyle.xml.template", "${gradleCheckstyleTemplatePath}/checkstyle.xml")

			//delete "$gradleDirectory"
			delete "$editorConfigFile"
			delete "$settingsGradleFile"			
			delete "$rootDirectory/README.md"
			delete "$gradlePropertiesFile"
			delete "$buildGradleFile"
			
			registerEndMessage("" << NELINE \
								<< "  To get started, got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable") + "" << NELINE )
		} 
	}
}
