/*
 * common.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */

 
// bootsrap logger
ext.BOOTSTRAPSTYLER = 'black red green yellow blue magenta cyan white' .split().toList().withIndex(30).collectEntries { key, val -> [(key) : { "\033[${val}m${it}\033[0m" }] }
ext.isRunningInEclipse = (System.getProperty("eclipse.vmargs")!=null && !System.getProperty("eclipse.vmargs").isEmpty()) || (System.getProperty("eclipse.commands")!=null && !System.getProperty("eclipse.commands").isEmpty()) || (System.getProperty("eclipse.buildId")!=null && !System.getProperty("eclipse.buildId").isEmpty())
ext.bootstrapColorize = { color, message ->
    if ((ext.has("org.gradle.console") && "plain".equalsIgnoreCase(ext.get("org.gradle.console").toString().trim())) || (project.hasProperty("org.gradle.console") && "plain".equalsIgnoreCase(project.getProperty("org.gradle.console").toString().trim()))
	    || isRunningInEclipse  || (project.ext.has("termColors") && "NONE".equals(project.ext.get("termColors"))) ) {
        return message
	}
	return "${BOOTSTRAPSTYLER[color](message)}"
}
ext.bootStraplogLifecycle = { message -> logger.lifecycle bootstrapColorize('cyan', message) }
ext.bootStraplogInfo = { message -> logger.info bootstrapColorize('cyan', message) }
ext.bootStraplogWarn = { message -> logger.warn bootstrapColorize('yellow', message) }

/***************************************************************************************
 * Read the git project url
 ***************************************************************************************/
ext.readGitProjectUrl = { ->
	def currentRootDir = "${project.rootDir}".replace('\\', '/')
	if (currentRootDir.endsWith('/')) {
		currentRootDir = currentRootDir.substring(0, currentRootDir.length() -1)
	}

	def result = "";
	File gitConfig = new File("$currentRootDir/.git/config")
	if (gitConfig.exists()) {
		gitConfig.withReader('UTF-8') { reader ->
			def line
			while ((line = reader.readLine()) != null) {
				def currentLine = line.toString().trim() 
				if (!currentLine.isEmpty() && !currentLine.startsWith("#") && currentLine.startsWith("url") && currentLine.indexOf('=') > 0) {
					result = (currentLine.split('=')[1]).toString().trim()
				}
			}
		}

		if (result!=null && result.isEmpty()) {
			bootStraplogInfo("> No git remote url found")
		} else {
			bootStraplogInfo("> Git remote url found: $result")
		}
	} else {
		bootStraplogInfo("> No git installation found.")
	}
						 
	return result
}

/***************************************************************************************
 * Read the common project config home base
 ***************************************************************************************/
ext.readCommonGradleBuildHomeBase = { ->
	def result = ""
	def userHomeDirectory = System.properties['user.home'].replace('\\', '/')
	def homeDirectoryPath="$userHomeDirectory/.common-build/conf"

	String gitProjectUrl=readGitProjectUrl()
	File customConfigFile = new File("$homeDirectoryPath/.cb-custom-config")
	if (customConfigFile.exists()) {
		String fileContent = ""
		customConfigFile.withReader('UTF-8') { reader ->
			def line, valueLength = 0
			while ((line = reader.readLine()) != null) {
				def currentLine = line.toString().trim() 
				if (!currentLine.isBlank() && !currentLine.startsWith("#") && !currentLine.startsWith("=")) {
					String[] lineSplit = currentLine.split('=')
					String value = ""
					String key = lineSplit[0].trim()
				
					if (!key.isBlank()) {
						if (lineSplit.length>1 && !lineSplit[1].isBlank()) {
							value = lineSplit[1].trim()
							bootStraplogInfo("> Found custom config entry [$key] with pattern [$value] by remote url ($gitProjectUrl).")
							
							if (gitProjectUrl!=null && !gitProjectUrl.isBlank() && gitProjectUrl.startsWith(value) ) {
								if (value.length() > valueLength) {
									bootStraplogInfo("> Choose custom config entry [$key] with pattern [$value], length $valueLength")
									fileContent=key
									valueLength=value.length()
								}
							}
						} else {
							bootStraplogInfo("> Found custom config entry [$key] with no pattern.")
							if (valueLength <= 0) {
								fileContent=key
								bootStraplogInfo("> Choose custom config entry [$key] with no pattern.")
							}
						}
					}
				}
			}
		}

		if (fileContent!=null && !fileContent.isEmpty()) {
			def homeSubPath=""
			try {
				URL homeURL = new URL("$fileContent".toString().trim())
				if (homeURL!=null) {					
					homeSubPath = homeURL.getHost()
					def urlPath = homeURL.getPath().replace('/', '_')
					int idx = urlPath.indexOf('.')
					if (idx>=0) {
					    urlPath = urlPath.substring(0, idx)
					}
					def port = "80";
					if (homeURL.getPort()!=null && homeURL.getPort()>0) {
						port = "" + homeURL.getPort();
					} else if ("http".equals(homeURL.getProtocol())) {
						port = "80";
					} else if ("https".equals(homeURL.getProtocol())) {
						port = "443";
					} 						
					
					homeSubPath="$homeSubPath@" + port;
printInfo("4=>[$homeDirectoryPath/$homeSubPath][$urlPath]"+new File("$homeDirectoryPath/$homeSubPath" + urlPath).exists())					
					if (new File("$homeDirectoryPath/${homeSubPath}${urlPath}").exists()) {
						homeSubPath="$homeSubPath" + urlPath;
					}
				}
			} catch(Exception e) {
			}
			
			if (homeSubPath!=null && !homeSubPath.isEmpty()) {
				result = "$homeDirectoryPath/$homeSubPath"
			}			
		}
	}

	if (result == null || result.isEmpty()) {
		result = userHomeDirectory + "/.gradle/common-gradle-build-home"
	}
	
	 return result
}

/***************************************************************************************
 * Read last version
 ***************************************************************************************/
ext.readLastCheckVersion = { filename ->
	def lastVersion = null		
	if (new File(filename).exists()) {
		InputStream stream = null
	
		try {
			stream = new FileInputStream(new File(filename))
			Properties prop = new Properties()
			prop.load(stream)
			if (prop.getProperty("version")!=null && !prop.getProperty("version").toString().trim().isEmpty()) {
				lastVersion = prop.getProperty("version")
			}
		} catch (Exception ex) {
			bootStraplogWarn("> Could not read [" + colorize(HIGHLITE_LEVEL, filename) + colorize(WARN_LEVEL, "]: " + ex.getMessage())) 
		} finally {
			if (stream!=null) {
				try {
				 stream.close()
				} catch (Exception cex) {
				}
			}
		}
	}
	
	return lastVersion
}


/***************************************************************************************
 * define proper cache and home environment:
 * - cache path: 	contains the versions cached on local machine
 * - home path: 	contains an optional template directory and defaults.gradle file to 
 *					overwrite default values
 ***************************************************************************************/
def userHomeDirectory = System.properties['user.home'].replace('\\', '/')
def commonGradleHomeDirectory = userHomeDirectory + "/.gradle"
def commonGradleBuildCache = System.getenv('COMMON_GRADLE_BUILD_CACHE') 
if (commonGradleBuildCache == null || commonGradleBuildCache.isEmpty()) {
	commonGradleBuildCache = System.getProperty('COMMON_GRADLE_BUILD_CACHE') 
	if (commonGradleBuildCache == null || commonGradleBuildCache.isEmpty()) {
		commonGradleBuildCache = commonGradleHomeDirectory + "/common-gradle-build"
	}
}
project.ext.set('commonGradleBuildCache', commonGradleBuildCache)
bootStraplogInfo("> Found common-gradle-build cache path: ${commonGradleBuildCache}")

def commonGradleBuildHomeBase = System.getenv('COMMON_GRADLE_BUILD_HOME') 
printInfo("[5/1]"+commonGradleBuildHomeBase)
if (commonGradleBuildHomeBase == null || commonGradleBuildHomeBase.trim().isEmpty()) {
	commonGradleBuildHomeBase = readCommonGradleBuildHomeBase()
printInfo("[5/2]"+commonGradleBuildHomeBase)
} else {
printInfo("[5/3]"+commonGradleBuildHomeBase)
	commonGradleBuildHomeBase = commonGradleBuildHomeBase.replace('\\', '/')
}

ext.cbCustomConfigVersion = ""
def commonGradleBuildHome=commonGradleBuildHomeBase
def commonCustomConfigVersion = System.getenv('CB_CUSTOM_CONFIG_VERSION')
if (commonCustomConfigVersion!=null && !commonCustomConfigVersion.isEmpty()) {
	bootStraplogInfo("> Take common-gradle-build home version from environment variable CB_CUSTOM_CONFIG_VERSION: ${commonCustomConfigVersion}")
	commonGradleBuildHome=commonGradleBuildHomeBase + "/" + commonCustomConfigVersion
} else if (commonGradleBuildHomeBase!=null && !commonGradleBuildHomeBase.isEmpty()) {
	try {
		if (new File(commonGradleBuildHomeBase).exists()) {
			def lastCheckVersion = readLastCheckVersion("${commonGradleBuildHomeBase}/lastCheck.properties")
			if (lastCheckVersion==null) {
				def result = null
				File[] files = new File(commonGradleBuildHomeBase).listFiles(); // select newest directory
				if (files != null && files.length > 0) {
					for (File file : files) {
						if (file.isDirectory()) {
							if (result == null || (result.lastModified() < file.lastModified())) {
								result = file
							}
						}
					}
				}

				if (result!=null) {
					// in case we found, use this
					bootStraplogInfo("> Take common-gradle-build home version from newest directory: " + result.getName())
					commonGradleBuildHome=commonGradleBuildHomeBase + "/" + result.getName()
				}
			} else {
				ext.cbCustomConfigVersion = lastCheckVersion
				bootStraplogInfo("> Take common-gradle-build home version from ${commonGradleBuildHomeBase}/lastCheck.properties: ${lastCheckVersion}")
				commonGradleBuildHome=commonGradleBuildHomeBase + "/" + lastCheckVersion
			}
		}
	} catch (Exception e) {
		bootStraplogWarn("Could not select cached version of the common-gradle-build: " + e.getMessage())
	}

	bootStraplogLifecycle("> Use common-gradle-build-home from " + commonGradleBuildHome)
}
project.ext.set('commonGradleBuildHome', commonGradleBuildHome)
project.ext.set('commonGradleBuildHomeBase', commonGradleBuildHomeBase)
bootStraplogInfo("> Found common-gradle-build home path: ${commonGradleBuildHome}")


/***************************************************************************************
 * development testing: local testing can be done by defining the commonGradleBuildUrl.
 *   e.g., cache path: 
 *     ext.commonGradleBuildUrl='file://' + System.properties['user.home'].replace('\\', '/') + "/.gradle/common-gradle-build/0.7.7/gradle"
 *     apply from: "${commonGradleBuildUrl}/common.gradle"
 *   e.g., project path: 
 *     ext.commonGradleBuildUrl='file:/C:/projects/toolarium/common-gradle-build/gradle' 
 *     apply from: "${commonGradleBuildUrl}/common.gradle"
 ***************************************************************************************/
def localCommonGradleBuildUrl = System.getenv('COMMON_GRADLE_BUILD_URL') 
if (localCommonGradleBuildUrl != null && !localCommonGradleBuildUrl.isEmpty()) {
	project.ext.set('commonGradleBuildUrl', localCommonGradleBuildUrl)
	bootStraplogInfo("> Found common-gradle-build url: ${commonGradleBuildUrl}")
} else {
	localCommonGradleBuildUrl = System.getProperty('COMMON_GRADLE_BUILD_URL') 
	if (localCommonGradleBuildUrl != null && !localCommonGradleBuildUrl.isEmpty()) {
		project.ext.set('commonGradleBuildUrl', localCommonGradleBuildUrl)
		bootStraplogInfo("> Found common-gradle-build url: ${commonGradleBuildUrl}")
	}
}

if (!project.hasProperty('commonGradleBuildUrl')) {
	try {
		if (new File(commonGradleBuildCache).exists()) {
			def lastCheckVersion = readLastCheckVersion("${commonGradleBuildCache}/lastCheck.properties")
			if (lastCheckVersion==null) {			
				def result = null
				File[] files = new File(commonGradleBuildCache).listFiles(); // select newest directory
				if (files != null && files.length > 0) {
					for (File file : files) {
						if (file.isDirectory()) {
							if (result == null || (result.lastModified() < file.lastModified())) {
								result = file
							}
						}
					}
				}

				if (result!=null) {
					// in case we found, use this
					bootStraplogInfo("> Take common-gradle-build version from newest directory: " + result.getName())
					ext.commonGradleBuildUrl=commonGradleBuildCache + "/" + result.getName() + "/gradle"
				}
			} else {
				bootStraplogInfo("> Take common-gradle-build version from ${commonGradleBuildCache}/lastCheck.properties: ${lastCheckVersion}")
				ext.commonGradleBuildUrl=commonGradleBuildCache + "/" + lastCheckVersion + "/gradle"
			}
		}
	} catch (Exception e) {
		bootStraplogWarn("Could not select cached version of the common-gradle-build: " + e.getMessage())
	}

	if (!project.hasProperty('commonGradleBuildUrl')) {
		ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
	}
	
	bootStraplogLifecycle("> Use common-gradle-build from " + ext.commonGradleBuildUrl)
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}


/***************************************************************************************
 * choose proper project type include
 ***************************************************************************************/
def includeFile = "${commonGradleBuildUrl}/"

if (project.hasProperty('projectType')) {
	def t = project.getProperty('projectType')
	includeFile += t
	if (!t.endsWith('.gradle')) {
		includeFile += '.gradle'
	}
	bootStraplogInfo("> Use projectType ${t}: ${includeFile}")
} else {
	// check project type
	def hasSrc = new File('src').exists()
	def hasConfig = new File('conf').exists()
	def hasFiles = new File('.').listFiles().count { true }

	def hasSrcMain = hasSrc && new File('src/main').exists()
	def hasJavaSrc = hasSrcMain && new File('src/main/java').exists()
	def hasJavaSourceFiles = false

	if (hasJavaSrc) {
		List filesPath = new ArrayList()
		new File("src/main/java/").eachDirRecurse() { dir ->  
			dir.eachFileMatch(~/.*.java/) { file -> filesPath.add( file.path ) }  
		}  
		
		hasJavaSourceFiles = !filesPath.isEmpty()
	}

	//def isWebProject
	if (!hasSrc && hasConfig) {
		includeFile += 'config.gradle'	
	} else if (!hasSrc || hasJavaSourceFiles) {
		includeFile += 'java-library.gradle'
	} else {
		includeFile += 'java-library.gradle'
	}
	
	bootStraplogLifecycle(" > Guessed projectType: ${includeFile}")
}


/***************************************************************************************
 * apply / include project type
 ***************************************************************************************/
if (includeFile!=null && !includeFile.isEmpty()) {
	apply from: "$includeFile"
}


/***************************************************************************************
 * In case there is a custom.gradle in the common gradle build home 
 ***************************************************************************************/
if (project.hasProperty('commonGradleBuildHome')) {
	if (commonGradleBuildHome!=null && !"${commonGradleBuildHome}".isEmpty()) {
		def commonGradleBuildHomeCustomFile = "${commonGradleBuildHome}/gradle/custom.gradle"

		// apply from home
		if (new File(commonGradleBuildHomeCustomFile).exists()) {
			bootStraplogLifecycle(" > Found custom in common-gradle-build home path, apply.")
			def userDefined = "[${commonGradleBuildHomeCustomFile}]"
			
			if (LINE.length()>userDefined.length()) {
				userDefined += LINE.substring(userDefined.length())
			}
			logInfo(userDefined)
			apply from: "${commonGradleBuildHomeCustomFile}"
			logInfo(userDefined)
		}
	}
}
