/*
 * common.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */

 
// bootsrap logger
ext.BOOTSTRAPSTYLER = 'black red green yellow blue magenta cyan white' .split().toList().withIndex(30).collectEntries { key, val -> [(key) : { "\033[${val}m${it}\033[0m" }] }
ext.bootStraplogLifecycle = { message -> logger.lifecycle "${BOOTSTRAPSTYLER['cyan'](message)}" }
ext.bootStraplogInfo = { message -> logger.info "${BOOTSTRAPSTYLER['cyan'](message)}" }
ext.bootStraplogWarn = { message -> logger.warn "${BOOTSTRAPSTYLER['yellow'](message)}" }


/***************************************************************************************
 * Read last version
 ***************************************************************************************/
ext.readLastCheckVersion = { filename ->
	def lastVersion = null		
	if (new File(filename).exists()) {
		InputStream stream = null
	
		try {
			stream = new FileInputStream(new File(filename))
			Properties prop = new Properties()
			prop.load(stream)
			if (prop.getProperty("version")!=null && !prop.getProperty("version").toString().trim().isEmpty()) {
				lastVersion = prop.getProperty("version")
			}
		} catch (Exception ex) {
			bootStraplogWarn("> Could not read [" + colorize(HIGHLITE_LEVEL, filename) + colorize(WARN_LEVEL, "]: " + ex.getMessage())) 
		} finally {
			if (stream!=null) {
				try {
				 stream.close()
				} catch (Exception cex) {
				}
			}
		}
	}
	
	return lastVersion
}


/***************************************************************************************
 * define proper cache and home environment:
 * - cache path: 	contains the versions cached on local machine
 * - home path: 	contains an optional template directory and defaults.gradle file to 
 *					overwrite default values
 ***************************************************************************************/
def userHomeDirectory = System.properties['user.home'].replace('\\', '/')
def commonGradleHomeDirectory = userHomeDirectory + "/.gradle"
def commonGradleBuildCache = System.getenv('COMMON_GRADLE_BUILD_CACHE') 
if (commonGradleBuildCache == null || commonGradleBuildCache.isEmpty()) {
	commonGradleBuildCache = System.getProperty('COMMON_GRADLE_BUILD_CACHE') 
	if (commonGradleBuildCache == null || commonGradleBuildCache.isEmpty()) {
		commonGradleBuildCache = commonGradleHomeDirectory + "/common-gradle-build"
	}
}
project.ext.set('commonGradleBuildCache', commonGradleBuildCache)
bootStraplogInfo("> Found common-gradle-build cache path: ${commonGradleBuildCache}")

def commonGradleBuildHomeBase = System.getenv('COMMON_GRADLE_BUILD_HOME') 
if (commonGradleBuildHomeBase == null || commonGradleBuildHomeBase.isEmpty()) {
	def homeDirectoryPath="$userHomeDirectory/.common-build/conf"
	if (new File("$homeDirectoryPath/.cb-custom-config").exists()) {
		String fileContent = new File("$homeDirectoryPath/.cb-custom-config").getText('UTF-8')
		if (fileContent!=null && !fileContent.isEmpty()) {			
			def homeSubPath=""
			try {
				URL homeURL = new URL("$fileContent".toString().trim())
				if (homeURL!=null) {					
					homeSubPath = homeURL.getHost()
					def port = "80";
					if (homeURL.getPort()!=null) {
						port = "" + homeURL.getPort();
					} else if ("http".equals(homeURL.getProtocol())) {
						port = "80";
					} else if ("https".equals(homeURL.getProtocol())) {
						port = "443";
					} 						
					homeSubPath="$homeSubPath@" + port;
				}
				else {
			} catch(Exception e) {
			}
			
			if (homeSubPath!=null && !homeSubPath.isEmpty()) {
				commonGradleBuildHomeBase = "$homeDirectoryPath/$homeSubPath"
println("3===>"+commonGradleBuildHomeBase)		
			}			
		}
	}

	if (commonGradleBuildHomeBase == null || commonGradleBuildHomeBase.isEmpty()) {
		commonGradleBuildHomeBase = commonGradleHomeDirectory + "/common-gradle-build-home"
	}
} else {
	commonGradleBuildHomeBase = commonGradleBuildHomeBase.replace('\\', '/')
}

def commonGradleBuildHome=commonGradleBuildHomeBase
def commonCustomConfigVersion = System.getenv('CB_CUSTOM_CONFIG_VERSION')
if (commonCustomConfigVersion!=null && !commonCustomConfigVersion.isEmpty()) {
	bootStraplogInfo("> Take common-gradle-build home version from environment variable CB_CUSTOM_CONFIG_VERSION: ${commonCustomConfigVersion}")
	commonGradleBuildHome=commonGradleBuildHomeBase + "/" + commonCustomConfigVersion
} else if (commonGradleBuildHomeBase!=null && !commonGradleBuildHomeBase.isEmpty()) {
	try {
		if (new File(commonGradleBuildHomeBase).exists()) {
			def lastCheckVersion = readLastCheckVersion("${commonGradleBuildHomeBase}/lastCheck.properties")
			if (lastCheckVersion==null) {			
				def result = null
				File[] files = new File(commonGradleBuildHomeBase).listFiles(); // select newest directory
				if (files != null && files.length > 0) {
					for (File file : files) {
						if (file.isDirectory()) {
							if (result == null || (result.lastModified() < file.lastModified())) {
								result = file
							}
						}
					}
				}

				if (result!=null) {
					// in case we found, use this
					bootStraplogInfo("> Take common-gradle-build home version from newest directory: " + result.getName())
					commonGradleBuildHome=commonGradleBuildHomeBase + "/" + result.getName()
				}
			} else {
				project.ext.set('cbCustomConfigVersion', lastCheckVersion)				
				bootStraplogInfo("> Take common-gradle-build home version from ${commonGradleBuildHomeBase}/lastCheck.properties: ${lastCheckVersion}")
				commonGradleBuildHome=commonGradleBuildHomeBase + "/" + lastCheckVersion
			}
		}
	} catch (Exception e) {
		bootStraplogWarn("Could not select cached version of the common-gradle-build: " + e.getMessage())
	}

	bootStraplogLifecycle("> Use common-gradle-build-home from " + commonGradleBuildHome)
}
project.ext.set('commonGradleBuildHome', commonGradleBuildHome)
project.ext.set('commonGradleBuildHomeBase', commonGradleBuildHomeBase)
bootStraplogInfo("> Found common-gradle-build home path: ${commonGradleBuildHome}")


/***************************************************************************************
 * development testing: local testing can be done by defining the commonGradleBuildUrl.
 *   e.g., cache path: 
 *     ext.commonGradleBuildUrl='file://' + System.properties['user.home'].replace('\\', '/') + "/.gradle/common-gradle-build/0.7.7/gradle"
 *     apply from: "${commonGradleBuildUrl}/common.gradle"
 *   e.g., project path: 
 *     ext.commonGradleBuildUrl='file:/C:/projects/toolarium/common-gradle-build/gradle' 
 *     apply from: "${commonGradleBuildUrl}/common.gradle"
 ***************************************************************************************/
def localCommonGradleBuildUrl = System.getenv('COMMON_GRADLE_BUILD_URL') 
if (localCommonGradleBuildUrl != null && !localCommonGradleBuildUrl.isEmpty()) {
	project.ext.set('commonGradleBuildUrl', localCommonGradleBuildUrl)
	bootStraplogInfo("> Found common-gradle-build url: ${commonGradleBuildUrl}")
} else {
	localCommonGradleBuildUrl = System.getProperty('COMMON_GRADLE_BUILD_URL') 
	if (localCommonGradleBuildUrl != null && !localCommonGradleBuildUrl.isEmpty()) {
		project.ext.set('commonGradleBuildUrl', localCommonGradleBuildUrl)
		bootStraplogInfo("> Found common-gradle-build url: ${commonGradleBuildUrl}")
	}
}

if (!project.hasProperty('commonGradleBuildUrl')) {
	try {
		if (new File(commonGradleBuildCache).exists()) {
			def lastCheckVersion = readLastCheckVersion("${commonGradleBuildCache}/lastCheck.properties")
			if (lastCheckVersion==null) {			
				def result = null
				File[] files = new File(commonGradleBuildCache).listFiles(); // select newest directory
				if (files != null && files.length > 0) {
					for (File file : files) {
						if (file.isDirectory()) {
							if (result == null || (result.lastModified() < file.lastModified())) {
								result = file
							}
						}
					}
				}

				if (result!=null) {
					// in case we found, use this
					bootStraplogInfo("> Take common-gradle-build version from newest directory: " + result.getName())
					ext.commonGradleBuildUrl=commonGradleBuildCache + "/" + result.getName() + "/gradle"
				}
			} else {
				bootStraplogInfo("> Take common-gradle-build version from ${commonGradleBuildCache}/lastCheck.properties: ${lastCheckVersion}")
				ext.commonGradleBuildUrl=commonGradleBuildCache + "/" + lastCheckVersion + "/gradle"
			}
		}
	} catch (Exception e) {
		bootStraplogWarn("Could not select cached version of the common-gradle-build: " + e.getMessage())
	}

	if (!project.hasProperty('commonGradleBuildUrl')) {
		ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
	}
	
	bootStraplogLifecycle("> Use common-gradle-build from " + ext.commonGradleBuildUrl)
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}


/***************************************************************************************
 * choose proper project type include
 ***************************************************************************************/
def includeFile = "${commonGradleBuildUrl}/"

if (project.hasProperty('projectType')) {
	def t = project.getProperty('projectType')
	includeFile += t
	if (!t.endsWith('.gradle')) {
		includeFile += '.gradle'
	}
	bootStraplogInfo("> Use projectType ${t}: ${includeFile}")
} else {
	// check project type
	def hasSrc = new File('src').exists()
	def hasConfig = new File('conf').exists()
	def hasFiles = new File('.').listFiles().count { true }

	def hasSrcMain = hasSrc && new File('src/main').exists()
	def hasJavaSrc = hasSrcMain && new File('src/main/java').exists()
	def hasJavaSourceFiles = false

	if (hasJavaSrc) {
		List filesPath = new ArrayList()
		new File("src/main/java/").eachDirRecurse() { dir ->  
			dir.eachFileMatch(~/.*.java/) { file -> filesPath.add( file.path ) }  
		}  
		
		hasJavaSourceFiles = !filesPath.isEmpty()
	}

	//def isWebProject
	if (!hasSrc && hasConfig) {
		includeFile += 'config.gradle'	
	} else if (!hasSrc || hasJavaSourceFiles) {
		includeFile += 'java-library.gradle'
	} else {
		includeFile += 'java-library.gradle'
	}
	
	bootStraplogLifecycle("> Guessed projectType: ${includeFile}")
}


/***************************************************************************************
 * apply / include project type
 ***************************************************************************************/
if (includeFile!=null && !includeFile.isEmpty()) {
	apply from: "$includeFile"
}
