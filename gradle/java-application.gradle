/*
 * java-application.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */


/***************************************************************************************
 * Set additional template path
 ***************************************************************************************/
ext.projectTypeTemplatePath='java-application'
ext.className='MyApplication'
ext.commonGradleResourcebundleOutputPath='build/resources/main'


if (!project.hasProperty('commonGradleBuildUrl')) {
    ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}

// default classifier name
if (!project.hasProperty("shadowClassifier")) {
	project.ext.set("shadowClassifier", "runner")
}

// set docker image standards
if (!project.hasProperty("dockerImage")) {
	project.ext.set("dockerImage", "adoptopenjdk/openjdk11:alpine-jre")
}
if (!project.hasProperty("dockerDefaultJavaOptions")) {
	project.ext.set("dockerDefaultJavaOptions", "-Djava.security.egd=file:/dev/./urandom")
}


apply from: "${commonGradleBuildUrl}/java-library.gradle"
apply plugin: 'application'

if (!project.hasProperty("dockerDeploymentSourcePath")) {
	//project.ext.set("dockerDeploymentSourcePath", 'build/libs/${project.name}-*-${shadowClassifier}.jar')
	project.ext.set("dockerDeploymentSourcePath", "build/libs/*-runner.jar")
}

apply from: "${commonGradleBuildElementPath}/base/docker.gradle"


/***************************************************************************************
 * excludes
 ***************************************************************************************/
if (project.tasks.findByName('shadowJar')) {
	// exclude a file from Shadow Jar
	shadowJar {
		// allo service files
		mergeServiceFiles()
		
		// in case we have spring
		append("META-INF/spring.handlers")
		append("META-INF/spring.schemas")
		append("META-INF/spring.tooling")
		/*
		transform(PropertiesFileTransformer().apply {
			paths = listOf("META-INF/spring.factories")
			mergeStrategy = "append"
		})
		*/
		
		// excluse
		exclude "META-INF/*.SF"
		exclude "META-INF/*.DSA"
		exclude "META-INF/*.RSA"
		exclude "META-INF/LICENSE"
		exclude "META-INF/VERSION"
		
		if( project.hasProperty('shadowClassifier') ) {
			classifier = project.getProperty('shadowClassifier')
		} else {
			classifier = 'runner'
		}
		
		doLast {
			def filename = prepareFilename(shadowJar.archivePath.getPath())
			printInfo("> Created package " + colorize(HIGHLITE_LEVEL, filename) + ".")
		}
	}
}


/***************************************************************************************
 * parameters can be passed e.g.: "-Dexec.args="--iterations 10 --runs 10 jptools file --sync""
 ***************************************************************************************/
run {
    if (System.getProperty("exec.args") != null) {
        args System.getProperty("exec.args").split()
    }
}


/***************************************************************************************
 * define the main class name (will be done in build.gradle))
 ***************************************************************************************/
//mainClassName = "my.packname.classname"
