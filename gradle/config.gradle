/*
 * config.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */


if (!project.hasProperty('commonGradleBuildUrl')) {
    ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}


/***************************************************************************************
 * Set additional template path
 ***************************************************************************************/
ext.projectTypeTemplatePath='config'

if (!project.hasProperty('configPackageArchiveClassifier')) {
	ext.configPackageArchiveClassifier = ''
}


/***************************************************************************************
 * Dependencies
 ***************************************************************************************/
apply from: "${commonGradleBuildElementPath}/base.gradle"
apply from: "${commonGradleBuildElementPath}/base/gradle.gradle"
apply from: "${commonGradleBuildElementPath}/config/publication.gradle"
apply from: "${commonGradleBuildElementPath}/java/signing.gradle"
apply plugin: 'distribution'


/***************************************************************************************
 * default tasks
 ***************************************************************************************/
defaultTasks 'clean', 'configJar'


/***************************************************************************************
 * Avoid code compile and generation
 ***************************************************************************************/
ext.compileTimestamp = BUILD_TIMESTAMP


/***************************************************************************************
 * project config validation
 ***************************************************************************************/
projectValidation {
	doLast {
		if (project.getProperty('IS_NEW')) {
			def configDirectory = project.getProperty('configDirectory')
			if (!new File(configDirectory).exists()) {
				new File(configDirectory).mkdirs()
				printInfo("> Create directory " + colorize(HIGHLITE_LEVEL, configDirectory) + ".")
			}
			
			registerEndMessage("" << NELINE \
								<< "  Define in the " + colorize(HIGHLITE_LEVEL, "$rootDirectory/gradle.properties") + " the sub configuration packages:" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "configPackages = sample1, sample2") + "" << NELINE \
								<< "" << NELINE \
								<< "  To get started, got to " + project.projectDir.toString() + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, startExecutable) + "" << NELINE)
		}
	}
}


/***************************************************************************************
 * configuration distribution
 ***************************************************************************************/
distributions {
    configJar {
        distributionBaseName = 'someName'
        contents {
            from 'config'
        }
    }
}

