/*
 * java-library.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */


if (!project.hasProperty('commonGradleBuildUrl')) {
    ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}
apply from: "${commonGradleBuildElementPath}/java-base.gradle"


/***************************************************************************************
 * define default java directories
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("className", "MyLibrary")
setCommonGradleDefaultPropertyIfNull("testClassName", "${className}Test")


/***************************************************************************************
 * define default java directories
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("srcMainJavaDirectory", "${srcMainDirectory}/java")
setCommonGradleDefaultPropertyIfNull("srcTestJavaDirectory", "${srcTestDirectory}/java")


/***************************************************************************************
 * project java validation
 ***************************************************************************************/
projectValidation {
	if (project.getProperty('IS_NEW')) {
		bootStraplogLifecycle("  > Just create project structure, skip build.")
		gradle.startParameter.excludedTaskNames += "build"
	}

	doFirst {
		createJavaSourcePath()

		if (project.hasProperty('IS_NEW_SRC_FOLDER') && project.getProperty('IS_NEW_SRC_FOLDER')) {
            logInfo("Create at least one java file...")
			def javaLibraryTemplate = 'javaLibrary.template'
			def slashedRootPackageName = projectRootPackageName.replace('.', '/')
			def commonGradleTemplateJavaPath = project.getProperty('commonGradleTemplateJavaPath')

			def mainJavaSourcPath = createPackagePath(srcMainJavaDirectory, projectRootPackageName)
			
			//setCommonGradleProperty("className", "${className}".toString())
			setCommonGradleProperty("fileName", "${className}.java".toString())
			setCommonGradleProperty("packageName", "${projectRootPackageName}".toString())
			if (!createFileFromTemplate("${mainJavaSourcPath}/${fileName}", getTemplateFile(javaLibraryTemplate, 'java'))) {
				printInfo("> Create file " + colorize(HIGHLITE_LEVEL, "${mainJavaSourcPath}/${fileName}") + " with default values.")
				new File(mainJavaSourcPath, "${fileName}").withWriter { w ->
					w << "/*" << NELINE \
						<< " * ${fileName}" << NELINE \
						<< " *" << NELINE \
						<< " * Copyright by ${licenseOrganisation}, all rights reserved." << NELINE \
						<< " * ${licenseText}" << NELINE \
						<< "*/" << NELINE \
						<< "" << NELINE \
						<< "package ${projectRootPackageName};" << NELINE \
						<< "" << NELINE \
						<< "" << NELINE \
						<< "/**" << NELINE \
						<< " * ${className}." << NELINE \
						<< " */" << NELINE \
						<< "public class ${className} {" << NELINE \
						<< "" << NELINE \
						<< "    /**" << NELINE \
						<< "     * Library method." << NELINE \
						<< "     *" << NELINE \
						<< "     * @return returns the result" << NELINE \
						<< "     */" << NELINE \
						<< "    public boolean someLibraryMethod() {" << NELINE \
						<< "        return true;" << NELINE \
						<< "    }" << NELINE \
						<< "}" << NELINE \
						<< "" << NELINE
				}
			}

			def testJavaSourcPath = createPackagePath(srcTestJavaDirectory, projectRootPackageName)
			def javaLibraryTestTemplate = 'javaLibraryTest.template'
			setCommonGradleProperty("classNameUnderTest", "${className}".toString())
			setCommonGradleProperty("className", "${testClassName}".toString())
			setCommonGradleProperty("fileName", "${testClassName}.java".toString())
			setCommonGradleProperty("packageName", "${projectRootPackageName}".toString())
			if (!createFileFromTemplate("${testJavaSourcPath}/${fileName}", getTemplateFile(javaLibraryTestTemplate, 'java'))) {
				printInfo("> Create file " + colorize(HIGHLITE_LEVEL, "${testJavaSourcPath}/${testClassName}") + " with default values.")
				new File(testJavaSourcPath, "${fileName}").withWriter { w ->
					w << "/*" << NELINE \
						<< " * ${fileName}" << NELINE \
						<< " *" << NELINE \
						<< " * Copyright by ${licenseOrganisation}, all rights reserved." << NELINE \
						<< " * ${licenseText}" << NELINE \
						<< "*/" << NELINE \
						<< "" << NELINE \
						<< "package ${projectRootPackageName};" << NELINE \
						<< "" << NELINE \
						<< "import static org.junit.jupiter.api.Assertions.assertTrue;" << NELINE \
						<< "" << NELINE \
						<< "import org.junit.jupiter.api.Test;" << NELINE \
						<< "" << NELINE \
						<< "" << NELINE \
						<< "/**" << NELINE \
						<< " * ${testClassName}." << NELINE \
						<< " */" << NELINE \
						<< "public class ${testClassName} {" << NELINE \
						<< "" << NELINE \
						<< "    /**" << NELINE \
						<< "     * Test ${classNameUnderTest} method." << NELINE \
						<< "     */" << NELINE \
						<< "    @Test void testSomeLibraryMethod() {" << NELINE \
						<< "        ${classNameUnderTest} classUnderTest = new ${classNameUnderTest}();" << NELINE \
						<< "        assertTrue(classUnderTest.someLibraryMethod(), \"someLibraryMethod should return 'true'\");" << NELINE \
						<< "    }" << NELINE \
						<< "}" << NELINE \
						<< "" << NELINE
				}
			}

			if (project.hasProperty('createLogbackConfig') && project.getProperty('createLogbackConfig')) {
				setCommonGradleProperty("fileName", "logback.xml")
				createFileFromTemplate("${logbackConfigPath}/${fileName}", getTemplateFile('logback.template', 'java'))
			}
			
			registerEndMessage("" << NELINE \
								<< "  To get started (build & package jars, run tests), got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, startExecutable) + "" << NELINE \
								<< "" << NELINE \
								<< "  To test, got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable test") + "" << NELINE)
		}
	}
}
