/*
 * java-library.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */


if (!project.hasProperty('commonGradleBuildUrl')) {
    ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}
apply from: "${commonGradleBuildElementPath}/java-base.gradle"


/***************************************************************************************
 * define default java directories
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("srcMainJavaDirectory", "${srcMainDirectory}/java")
setCommonGradleDefaultPropertyIfNull("srcMainResourcesDirectory", "${srcMainDirectory}/resources")
setCommonGradleDefaultPropertyIfNull("srcTestJavaDirectory", "${srcTestDirectory}/java")
setCommonGradleDefaultPropertyIfNull("srcTestResourcesDirectory", "${srcTestDirectory}/resources")


/***************************************************************************************
 * project java validation
 ***************************************************************************************/
projectValidation {
	doFirst {
		createJavaSourcePath()

		if (project.hasProperty('IS_NEW_SRC_FOLDER') && project.getProperty('IS_NEW_SRC_FOLDER')) {
            logInfo("Create at least one java file...")
			def javaLibraryTemplate = 'javaLibrary.template'
			def slashedRootPackageName = projectRootPackageName.replace('.', '/')
			def className = 'MyLibrary'
			def commonGradleTemplateJavaPath = project.getProperty('commonGradleTemplateJavaPath')

			def mainJavaSourcPath = createPackagePath(srcMainJavaDirectory, projectRootPackageName)
			if (new File("${commonGradleTemplateJavaPath}", "${javaLibraryTemplate}").exists()) {
				printInfo("> Create file " + colorize(HIGHLITE_LEVEL, "${mainJavaSourcPath}/${className}.java") + " from template ${javaLibraryTemplate}.")
				copy {
					from "${commonGradleTemplateJavaPath}"
					include "${javaLibraryTemplate}"
					into "${mainJavaSourcPath}"
					rename { String fileName -> fileName.replace("${javaLibraryTemplate}", "${className}.java".toString() ) }
					filter { line -> line.replaceAll('@@PROJECT_NAME@@', "${rootProject.name}".toString()) }
					filter { line -> line.replaceAll('@@className@@', "${className}".toString()) }
					filter { line -> line.replaceAll('@@fileName@@', "${className}.java".toString()) }
					filter { line -> line.replaceAll('@@packageName@@', "${projectRootPackageName}".toString()) }
					filter { line -> line.replaceAll('@@LICENSE@@', "${licenseText}".toString()) }
					filter { line -> line.replaceAll('@@LICENSE_ORGANISATION@@', "${licenseOrganisation}".toString()) }
				}
			} else {
				printInfo("> Create file " + colorize(HIGHLITE_LEVEL, "${mainJavaSourcPath}/${className}.java") + " with default values.")
				new File(mainJavaSourcPath, "${className}.java").withWriter { w ->
					w << "/*" << NELINE \
						<< " * ${className}.java" << NELINE \
						<< " *" << NELINE \
						<< " * Copyright by ${licenseOrganisation}, all rights reserved." << NELINE \
						<< " * ${licenseText}" << NELINE \
						<< "*/" << NELINE \
						<< "package ${projectRootPackageName};" << NELINE \
						<< "" << NELINE \
						<< "" << NELINE \
						<< "/**" << NELINE \
						<< " * ${className}" << NELINE \
						<< " */" << NELINE \
						<< "public class ${className} {" << NELINE \
						<< "" << NELINE \
						<< "    /**" << NELINE \
						<< "     * Library method" << NELINE \
						<< "     */" << NELINE \
						<< "    public boolean someLibraryMethod() {" << NELINE \
						<< "        return true;" << NELINE \
						<< "    }" << NELINE \
						<< "}" << NELINE \
						<< "" << NELINE
				}
			}

			def testJavaSourcPath = createPackagePath(srcTestJavaDirectory, projectRootPackageName)
			def javaLibraryTestTemplate = 'javaLibraryTest.template'
			def testClassName = "${className}Test"
			if (new File("${commonGradleTemplateJavaPath}", "${javaLibraryTestTemplate}").exists()) {
				printInfo("> Create file " + colorize(HIGHLITE_LEVEL, "${testJavaSourcPath}/${testClassName}.java") + " from template ${javaLibraryTestTemplate}.")
				copy {
					from "${commonGradleTemplateJavaPath}"
					include "${javaLibraryTestTemplate}"
					into "${testJavaSourcPath}"
					rename { String fileName -> fileName.replace("${javaLibraryTestTemplate}", "${testClassName}.java".toString() ) }
					filter { line -> line.replaceAll('@@PROJECT_NAME@@', "${rootProject.name}".toString()) }
					filter { line -> line.replaceAll('@@className@@', "${testClassName}".toString()) }
					filter { line -> line.replaceAll('@@classNameUnderTest@@', "${className}".toString()) }
					filter { line -> line.replaceAll('@@fileName@@', "${testClassName}.java".toString()) }
					filter { line -> line.replaceAll('@@packageName@@', "${projectRootPackageName}".toString()) }
					filter { line -> line.replaceAll('@@LICENSE@@', "${licenseText}".toString()) }
					filter { line -> line.replaceAll('@@LICENSE_ORGANISATION@@', "${licenseOrganisation}".toString()) }
				}
			} else {
				printInfo("> Create file " + colorize(HIGHLITE_LEVEL, "${testJavaSourcPath}/${testClassName}.java") + " with default values.")
				new File(testJavaSourcPath, "${testClassName}.java").withWriter { w ->
					w << "/*" << NELINE \
						<< " * ${testClassName}.java" << NELINE \
						<< " *" << NELINE \
						<< " * Copyright by ${licenseOrganisation}, all rights reserved." << NELINE \
						<< " * ${licenseText}" << NELINE \
						<< "*/" << NELINE \
						<< "package ${projectRootPackageName};" << NELINE \
						<< "" << NELINE \
						<< "import static org.junit.jupiter.api.Assertions.assertTrue;" << NELINE \
						<< "" << NELINE \
						<< "import org.junit.jupiter.api.Test;" << NELINE \
						<< "" << NELINE \
						<< "" << NELINE \
						<< "/**" << NELINE \
						<< " * ${testClassName}" << NELINE \
						<< " */" << NELINE \
						<< "public class ${testClassName} {" << NELINE \
						<< "" << NELINE \
						<< "    /**" << NELINE \
						<< "     * Test ${className} method" << NELINE \
						<< "     */" << NELINE \
						<< "    @Test void testSomeLibraryMethod() {" << NELINE \
						<< "        ${className} classUnderTest = new ${className}();" << NELINE \
						<< "        assertTrue(classUnderTest.someLibraryMethod(), \"someLibraryMethod should return 'true'\");" << NELINE \
						<< "    }" << NELINE \
						<< "}" << NELINE \
						<< "" << NELINE
				}
			}
			
			registerEndMessage("" << NELINE \
								<< "  To get started (build & package jars, run tests), got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, startExecutable) + "" << NELINE \
								<< "" << NELINE \
								<< "  To test, got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable test") + "" << NELINE)
		}
	}
}
