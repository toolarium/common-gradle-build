/*
 * java-rest-api.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */
def openapiPluginVersion="5.1.1"
if (project.hasProperty('openapiPluginVersion')) {
	openapiPluginVersion = project.getProperty('openapiPluginVersion')
}
 
buildscript {
	repositories {
		maven { url "https://repo1.maven.org/maven2" }
	}
	dependencies {
		def openapiPluginVersion="5.1.1"
		if (project.hasProperty('openapiPluginVersion')) {
			openapiPluginVersion = project.getProperty('openapiPluginVersion')
		}

 	    //logInfo("openapi plugin version: ${openapiPluginVersion}")	
		classpath "org.openapitools:openapi-generator-gradle-plugin:" + openapiPluginVersion
	}
}

// check plugin
if (project.plugins.findPlugin('org.openapi.generator')==null) {
	ext.validBuild=false
	ext.errorMessagePrefix=""
	ext.validBuildMessage = "Missing the openapi gradle plugin!\n-> Please add the following lines at the beginning of you build.gradle:\n\n" \
		+ "plugins {\n" \
		+ "    id \"org.openapi.generator\" version \"" + openapiPluginVersion + "\"\n" \
		+ "}\n";
} else {
	apply plugin: 'org.openapi.generator'
}


/***************************************************************************************
 * Set additional template path
 ***************************************************************************************/
ext.projectTypeTemplatePath='openapi'
ext.initCheckstyle=false
ext.projectNameTypeRegularExpressionPattern='^.*-api-spec$'
ext.allowMultipleSourceFiles=false
ext.inputSourceFilePattern='^' + "${rootProject.name}".replace("-api-spec", "-api") + '.yaml$'
ext.sampleInputSourceFileName="${rootProject.name}".replace("-api-spec", "-api")


if (!project.hasProperty('commonGradleBuildUrl')) {
	ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}
apply from: "${commonGradleBuildElementPath}/java-base.gradle"


/***************************************************************************************
 * define default directories
 ***************************************************************************************/
setCommonGradleProperty('createSrcMainJavaDirectory', false)
setCommonGradleProperty('createSrcTestJavaDirectory', false)
setCommonGradleProperty('createSrcMainResourcesDirectory', false)
setCommonGradleProperty('createSrcTestResourcesDirectory', false)

/*
task parseAll {
	def parsedfile = (new XmlParser()).parse("d:/myfile.xml")
	parsedfile.list.each { file ->
		def jwsTask = task "parseJws${file.name.capitalize()}" { 
			doLast {
				// parse logic
			}
		}

		parseAll.dependsOn jwsTask
	}

	def jprTask = task parseJpr {
		doLast {
			// parse logic
		}
	}
}

parseAll.dependsOn jprTask
*/


/* sample
task generatePetStore3(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    String basePackage = "com.example.petstore"
    verbose = false
    library = "resttemplate"
    generatorName = "java"
    inputSpec = "${project.rootDir}/src/main/api-spec/openapi-sample.yaml".toString()
    outputDir = "${project.buildDir}/generated/api/petstore"
    invokerPackage = basePackage
    apiPackage = basePackage + ".controller"
    modelPackage = basePackage + ".model"
    configOptions = [
            dateLibrary: "java8-localdatetime"
    ]
}
*/


/***************************************************************************************
 * define the openapi generator settings
 ***************************************************************************************/
task openApiProcess {
	if (validBuild) {
		// create common gradle build java source path
		createCommonGradleBuildSourcesPath()
		createGenerateCommonGradleBuildJavaSourcePath()

		if (new File(srcMainApiSpecDirectory).exists()) {
			def result = null		
			def versionNumberPackageAddon="v" + majorVersionNumber
			File[] files = new File(srcMainApiSpecDirectory).listFiles({File file -> file.name.toLowerCase().endsWith(".yaml") || 
																					 file.name.toLowerCase().endsWith(".json")} as FileFilter)
			if (files != null && files.length > 0) {
				if (files.length > 1 && !allowMultipleSourceFiles) {
					addError("Multiple input source files found which is not allowed!")
				}

				if (project.hasProperty('inputSourceFilePattern') && !project.getProperty('inputSourceFilePattern').toString().trim().isEmpty()) {
					for (File file : files) {
						if (!(file.getName() ==~ inputSourceFilePattern)) {
							addError("Input source file " + file.getName() + " don't follow rule ($inputSourceFilePattern)!")
						}
					}
				}
			
				def yamlPath = srcMainApiSpecDirectory;
				if (yamlPath.startsWith("./")) {
					yamlPath = "${project.rootDir}" + yamlPath.substring(1)
				}
				def srcPath = project.getProperty('generatedCommonGradleBuildSources');
				if (srcPath.startsWith("./")) {
					srcPath = "${project.rootDir}" + srcPath.substring(1)
				}

				logInfo(" > Settings: "				
							+ "generatorName: " + colorize(HIGHLITE_LEVEL, "${openapiGeneratorName}".toString()) + ", "
							+ "library: " + colorize(HIGHLITE_LEVEL, "${openapiLibrary}".toString()) + "\n"
							+ "               apiDocs: " + colorize(HIGHLITE_LEVEL, "${openapiDocs}".toString()) + ", "
							+ "apiTests: " + colorize(HIGHLITE_LEVEL, "${openapiTests}".toString()) + ", "
							+ "modelDocs: " + colorize(HIGHLITE_LEVEL, "${openapiModelDocs}".toString()) + ", "
							+ "modelTests: " + colorize(HIGHLITE_LEVEL, "${openapiModelTests}".toString()) + "\n"
							+ "               dateLibrary: " + colorize(HIGHLITE_LEVEL, "${openapiDateLibrary}".toString()) + ", "
							+ "interfaceOnly: " + colorize(HIGHLITE_LEVEL, "${openapiInterfaceOnly}".toString()) + ", "
							+ "returnResponse: " + colorize(HIGHLITE_LEVEL, "${openapiReturnResponse}".toString()) + ", "							
							+ "serializableModel: " + colorize(HIGHLITE_LEVEL, "${openapiSerializableModel}".toString()) + ", "							
							+ "java8: " + colorize(HIGHLITE_LEVEL, "${openapiUseJava8Features}".toString()) + "\n"
							+ "               useBeanValidation: " + colorize(HIGHLITE_LEVEL, "${openapiUseBeanValidation}".toString()) + ", "	
							+ "asyncNative: " + colorize(HIGHLITE_LEVEL, "${openapiAsyncNative}".toString()) + "\n"
							+ "               bigDecimalAsString: " + colorize(HIGHLITE_LEVEL, "${openapiBigDecimalAsString}".toString()) + ", "
							+ "booleanGetterPrefix: " + colorize(HIGHLITE_LEVEL, "${openapiBooleanGetterPrefix}".toString()) + "\n"
							+ "               hideGenerationTimestamp: " + colorize(HIGHLITE_LEVEL, "${openapiHideGenerationTimestamp}".toString()) + ", "
							+ "useGzipFeature: " + colorize(HIGHLITE_LEVEL, "${openapiUseGzipFeature}".toString()))
			
				for (File file : files) {
					if (!file.isDirectory()) {
						def fileName = file.getName()
						def apiName = file.getName().replace(".yaml", "");

						// check version number
						def expectedVersionNumber = "${project.ext.majorVersionNumber}.${project.ext.minorVersionNumber}.${project.ext.revisionVersionNumber}".toString()
						def versionRegex = /^.+version\s?:.+$/
						for (String line : file.readLines().findAll({ x -> x ==~ versionRegex })) {
							def trimmedLine = line.toString().trim().replace("version", "").trim();
							if (trimmedLine.startsWith(':')) {
								trimmedLine = trimmedLine.substring(1).trim();
								if (!expectedVersionNumber.equals(trimmedLine)) {
									def openAPIWarningMessage = "Version number [$trimmedLine] in file [$fileName] don't match with project verion number [$expectedVersionNumber]!"
									printInfo("> " + openAPIWarningMessage)
									addError(openAPIWarningMessage)
								}
							}
						}
						
						def outPath = generatedCommonGradleBaseBuildSources;
						if (outPath.startsWith("./")) {
							outPath = "${project.rootDir}" + outPath.substring(1)
						}
						outPath = "${outPath}" + "/" + apiName + "/"
						
						//def createOpenApi = tasks.create(name: "openApiGenerate${apiName}", dependsOn: openApiProcess, type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
						def openApiTaskName="openApiGenerate${apiName}"
						def createOpenApi = tasks.create(name: "${openApiTaskName}", type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
							logInfo("Create the open api task " + colorize(HIGHLITE_LEVEL, "[$openApiTaskName]") + " for [" + colorize(HIGHLITE_LEVEL, srcMainApiSpecDirectory + "/" + fileName) + colorize(INFO_LEVEL, "]."))						
							printInfo("> Generate source from openapi " + colorize(HIGHLITE_LEVEL, fileName) + ".")

							verbose = false
							inputSpec = "${yamlPath}/${fileName}".toString()
							outputDir = "${outPath}".toString()
							generatorName = "${openapiGeneratorName}".toString()
							id = "${rootProject.name}".toString()
							groupId = "${project.ext.projectGroupId}".toString()					
							apiPackage = "${project.ext.projectRootPackageName}.${versionNumberPackageAddon}.api".toString()
							invokerPackage = "${project.ext.projectRootPackageName}.${versionNumberPackageAddon}.client".toString()
							modelPackage = "${project.ext.projectRootPackageName}.${versionNumberPackageAddon}.dto".toString()
							//templateDir = "$rootDir/src/main/resources/api/templates".toString()
							version = "${project.version}".toString()

								
							// modelFilesConstrainedTo = [
							//	"Error"
							//] 
							
							configOptions = [
								//sourceFolder : "${srcPath}".toString(),						
								apiDocs : "${openapiDocs}".toString(),
								apiTests : "${openapiTests}".toString(),
								modelDocs : "${openapiModelDocs}".toString(),
								modelTests : "${openapiModelTests}".toString(),
								library : "${openapiLibrary}".toString(),

								artifactVersion : "${project.version}".toString(),
								artifactDescription : "${project.ext.projectDescription}".toString(),
								//artifactUrl = "${}"
								developerOrganization : "${project.ext.licenseOrganisation}".toString(),
								developerOrganizationUrl : "${project.ext.projectUrl}".toString(),
								licenseName : "${project.ext.licenseText}".toString(),
								licenseUrl : "${project.ext.licenseUrl}".toString(),

								dateLibrary : "${openapiDateLibrary}".toString(),
								interfaceOnly : "${openapiInterfaceOnly}".toString(),
								returnResponse : "${openapiReturnResponse}".toString(),
								serializableModel : "${openapiSerializableModel}".toString(),
								java8 : "${openapiUseJava8Features}".toString(),
								useBeanValidation : "${openapiUseJava8Features}".toString(),
								//useOptional: "true",
								//useLombok: "true",
								fullJavaUtil : 'true',
								useSwaggerAnnotations : 'false',
								disallowAdditionalPropertiesIfNotPresent : 'false',
								openApiNullable : "${openapiNullable}".toString(),
								asyncNative : "${openapiAsyncNative}".toString(),
								bigDecimalAsString : "${openapiBigDecimalAsString}".toString(),
								booleanGetterPrefix : "${openapiBooleanGetterPrefix}".toString(),
								hideGenerationTimestamp : "${openapiHideGenerationTimestamp}".toString(),
								useGzipFeature : "${openapiUseGzipFeature}".toString(),
								//snapshotVersion = "${}"
								//sourceFolder = "${}"
							]
							
							def generatedCommonGradleBuildSources = project.getProperty('generatedCommonGradleBuildSources');
							sourceSets.main.java.srcDirs += "${outPath}/src/gen/java/"
							logInfo("Set source set to " + colorize(HIGHLITE_LEVEL, sourceSets.main.java.srcDirs))
						}

						compileJava.dependsOn createOpenApi
						
					}
				}
			}
		}
	}
}


if (!project.getProperty('IS_NEW')) {
	build.dependsOn openApiProcess
} else {
	ext.validBuild=true
	ext.errorMessagePrefix=""
	ext.validBuildMessage=""
	defaultTasks 'projectValidation'
}
// TODO:
//openApiValidate


/***************************************************************************************
 * Prepare meta-inf
 ***************************************************************************************/
createMeateInfFiles {
	doLast {
		// create empty beans.xml in META-INF
		new File("$commonGradleResourcebundleOutputPath/META-INF/beans.xml").createNewFile()
	}
}


/***************************************************************************************
 * project java validation
 ***************************************************************************************/
projectValidation {
	doFirst {
		if (project.hasProperty('projectNameTypeRegularExpressionPattern') && !project.getProperty('projectNameTypeRegularExpressionPattern').toString().trim().isEmpty()) {
			if (!(rootProject.name ==~ projectNameTypeRegularExpressionPattern)) {
				addError("Project name " + rootProject.name + " don't follow project type rule ($projectNameTypeRegularExpressionPattern)!")
			}
		}
	}
	
	doLast {
		
		if (project.hasProperty('IS_NEW_SRC_FOLDER') && project.getProperty('IS_NEW_SRC_FOLDER')) {
            logInfo("Create a sample service...")
			def openapiTemplate = 'openapi-sample.yaml.template'
			
			def apiName = 'openapi-sample'
			if (project.hasProperty('sampleInputSourceFileName') && !project.getProperty('sampleInputSourceFileName').toString().trim().isEmpty()) {
				apiName = project.getProperty('sampleInputSourceFileName')
			}

			setCommonGradleProperty("fileName", "${apiName}.yaml".toString())
			if (!new File("${srcMainApiSpecDirectory}/${fileName}").exists()) {
				if (!createFileFromTemplate("${srcMainApiSpecDirectory}/${fileName}", getTemplateFile(openapiTemplate, 'openapi'))) {
					printInfo("> Create file " + colorize(HIGHLITE_LEVEL, "${srcMainApiSpecDirectory}/${fileName}") + " with default values.")
					new File(srcMainApiSpecDirectory, "${fileName}").withWriter { w ->
						w << "openapi: \"3.0.3\"" << NELINE \
							<< "info:" << NELINE \
							<< "  version: ${project.ext.majorVersionNumber}.${project.ext.minorVersionNumber}.${project.ext.revisionVersionNumber}" << NELINE \
							<< "  title: Sample Petstore" << NELINE \
							<< "  license:" << NELINE \
							<< "    name: Copyright by ${licenseOrganisation}, all rights reserved." << NELINE \
							<< "servers:" << NELINE \
							<< "  - url: \"http://mypetstore.tech/v1\"" << NELINE \
							<< "paths:" << NELINE \
							<< "  /pets:" << NELINE \
							<< "    get:" << NELINE \
							<< "      summary: List all pets" << NELINE \
							<< "      operationId: listPets" << NELINE \
							<< "      tags:" << NELINE \
							<< "        - pets" << NELINE \
							<< "      parameters:" << NELINE \
							<< "        - name: limit" << NELINE \
							<< "          in: query" << NELINE \
							<< "          description: Defines how many items to return at one time (max 50)" << NELINE \
							<< "          required: false" << NELINE \
							<< "          schema:" << NELINE \
							<< "            type: integer" << NELINE \
							<< "            format: int32" << NELINE \
							<< "      responses:" << NELINE \
							<< "        200:" << NELINE \
							<< "          description: An array of pets (paged)" << NELINE \
							<< "          headers:" << NELINE \
							<< "            x-next:" << NELINE \
							<< "              description: A link to the next page of responses" << NELINE \
							<< "              schema:" << NELINE \
							<< "                type: string" << NELINE \
							<< "          content:" << NELINE \
							<< "            application/json:" << NELINE \
							<< "              schema:" << NELINE \
							<< "                $ref: \"#/components/schemas/Pets\"" << NELINE \
							<< "        default:" << NELINE \
							<< "          description: Unexpected error" << NELINE \
							<< "          content:" << NELINE \
							<< "            application/json:" << NELINE \
							<< "              schema:" << NELINE \
							<< "                $ref: \"#/components/schemas/Error\"" << NELINE \
							<< "    post:" << NELINE \
							<< "      summary: Create a pet" << NELINE \
							<< "      operationId: createPets" << NELINE \
							<< "      tags:" << NELINE \
							<< "        - pets" << NELINE \
							<< "      responses:" << NELINE \
							<< "        201:" << NELINE \
							<< "          description: Created pet" << NELINE \
							<< "        default:" << NELINE \
							<< "          description: Unexpected error" << NELINE \
							<< "          content:" << NELINE \
							<< "            application/json:" << NELINE \
							<< "              schema:" << NELINE \
							<< "                $ref: \"#/components/schemas/Error\"" << NELINE \
							<< "  /pets/{petId}:" << NELINE \
							<< "    get:" << NELINE \
							<< "      summary: Information for a pet" << NELINE \
							<< "      operationId: getPetById" << NELINE \
							<< "      tags:" << NELINE \
							<< "        - pets" << NELINE \
							<< "      parameters:" << NELINE \
							<< "        - name: petId" << NELINE \
							<< "          in: path" << NELINE \
							<< "          required: true" << NELINE \
							<< "          description: The id of the pet to retrieve" << NELINE \
							<< "          schema:" << NELINE \
							<< "            type: string" << NELINE \
							<< "      responses:" << NELINE \
							<< "        200:" << NELINE \
							<< "          description: Expected response to a valid request" << NELINE \
							<< "          content:" << NELINE \
							<< "            application/json:" << NELINE \
							<< "              schema:" << NELINE \
							<< "                $ref: \"#/components/schemas/Pets\"" << NELINE \
							<< "        default:" << NELINE \
							<< "          description: Unexpected error" << NELINE \
							<< "          content:" << NELINE \
							<< "            application/json:" << NELINE \
							<< "              schema:" << NELINE \
							<< "                $ref: \"#/components/schemas/Error\"" << NELINE \
							<< "components:" << NELINE \
							<< "  schemas:" << NELINE \
							<< "    Pet:" << NELINE \
							<< "      required:" << NELINE \
							<< "        - id" << NELINE \
							<< "        - name" << NELINE \
							<< "      properties:" << NELINE \
							<< "        id:" << NELINE \
							<< "          type: integer" << NELINE \
							<< "          format: int64" << NELINE \
							<< "        name:" << NELINE \
							<< "          type: string" << NELINE \
							<< "        tag:" << NELINE \
							<< "          type: string" << NELINE \
							<< "    Pets:" << NELINE \
							<< "      type: array" << NELINE \
							<< "      items:" << NELINE \
							<< "        $ref: \"#/components/schemas/Pet\"" << NELINE \
							<< "    Error:" << NELINE \
							<< "      required:" << NELINE \
							<< "        - code" << NELINE \
							<< "        - message" << NELINE \
							<< "      properties:" << NELINE \
							<< "        code:" << NELINE \
							<< "          type: integer" << NELINE \
							<< "          format: int32" << NELINE \
							<< "        message:" << NELINE \
							<< "          type: string" << NELINE \
							<< "" << NELINE
						}
					}
			
				registerEndMessage("" << NELINE \
									<< "  To get started (build & package jars, run tests), got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
									<< "      " + colorize(HIGHLITE_LEVEL, startExecutable) + "" << NELINE)
			}
		}
	}
}
