/*
 * react.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */


/***************************************************************************************
 * ResourceBundle.xls support
 ***************************************************************************************/
ext.initResourceBundle=true
ext.commonGradleResourcebundleJsonSupport=true
ext.commonGradleResourcebundleOutputPath='public/locales'
ext.reactEnvFileName='.env'

if (!project.hasProperty('commonGradleBuildUrl')) {
    ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}

ext.forceStaticTarget=true
if (!project.hasProperty("targetStatic")) {
	if (project.hasProperty("forceStaticTarget")) {
		project.ext.set("targetStatic", project.ext.get("forceStaticTarget"))
	} else {
		project.ext.set("targetStatic", false)
	}
}

if (project.hasProperty("targetStatic") && project.getProperty("targetStatic")) {
	if (!project.hasProperty("dockerImage")) {
		project.ext.set("dockerImage", "nginx:alpine")
	}
	if (!project.hasProperty("dockerDeploymentSourcePath")) {
		project.ext.set("dockerDeploymentSourcePath", 'dist')
	}
	
	// set to empty string to not generate dockerIgnoreFile (see base/container.gradle)
	project.ext.dockerIgnoreFile=""
	ext.nodeBuildArguments = ['run', 'build', '--loglevel', 'silent']
	
} else {
	if (!project.hasProperty("dockerImage")) {
		project.ext.set("dockerImage", "node:alpine")
	}
	if (!project.hasProperty("dockerFileTemplateName")) {
		project.ext.set("dockerFileTemplateName", 'Dockerfile-node.template')
	}
	if (!project.hasProperty("dockerDeploymentSourcePath")) {
		project.ext.set("dockerDeploymentSourcePath", '.')
	}
}


/***************************************************************************************
 * Dependencies
 ***************************************************************************************/
apply from: "${commonGradleBuildElementPath}/nodejs.gradle"

def reactEnvFile = "$rootDirectory/$reactEnvFileName"
if (!new File(reactEnvFile).exists()) {
	printInfo("> Create " + colorize(HIGHLITE_LEVEL, reactEnvFileName) + " to set build path.")
	new File(reactEnvFile).text = "# .env" + NELINE + "BUILD_PATH='./${dockerDeploymentSourcePath}'" + NELINE
} else {
	def content = new File(reactEnvFile).text
	if (!content.contains("BUILD_PATH")) {
		printInfo("> Update " + colorize(HIGHLITE_LEVEL, reactEnvFileName) + " to set build path.")
		new File(reactEnvFile).text = content + NELINE + "BUILD_PATH='./${dockerDeploymentSourcePath}'" + NELINE
	}
}

def reactPackageVersion = parseNpmDependencyVersion("$rootDirectory/package.json", "react")
//if (reactPackageVersion != null && isCompliantVersion(">=18", reactPackageVersion)) { // >= v3
//}

def packageJson="$rootDirectory/package.json"
if (new File(packageJson).exists()) {
	def content = new File(packageJson).text
	def p = "$dockerSubPathAccess"
	if (!p.startsWith("/")) {
		p = "/" + p
	}
	if (!p.endsWith("/")) {
		p += "/"
	}
	
	if (!content.contains("\"homepage\": \"$p\",")) {
		def add = (!content.contains("\"homepage\":"))
	
		def newContent = ""
		String[] splitData = content.split(NELINE);
		for (String eachSplit : splitData) {
			if (!add && eachSplit.contains("\"homepage\":")) {
				printInfo("> Update " + colorize(HIGHLITE_LEVEL, getFilename("package.json")) + " to set homepage " + colorize(HIGHLITE_LEVEL, getFilename(dockerDeploymentSourcePath)+p) + ".")
				newContent += "  \"homepage\": \"$p\"," + NELINE
			} else {
    			newContent += eachSplit + NELINE
			}

			if (add && eachSplit.contains("\"version\":")) {
				printInfo("> Add " + colorize(HIGHLITE_LEVEL, getFilename("package.json")) + " to set homepage " + colorize(HIGHLITE_LEVEL, getFilename(dockerDeploymentSourcePath)+p) + ".")
				newContent += "  \"homepage\": \"$p\"," + NELINE
			}
		}
		new File(packageJson).text = newContent
	}
}


/***************************************************************************************
 * common react dirctories and files
 ***************************************************************************************/
addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/public")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/tailwind.config.js")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/tailwind.config.ts")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/prettier.config.js")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/.eslintrc.cjs")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/index.html")


/***************************************************************************************
 * project validation
 ***************************************************************************************/
projectValidation {
	if (project.getProperty('IS_NEW')) {
		bootStraplogLifecycle("  > Just create project structure, skip build.")
		gradle.startParameter.excludedTaskNames += "build"
	}

	doFirst {
		if (project.getProperty('IS_NEW')) {
			// use the defined files

			new File("$rootDirectory/$licenseFilename").delete()
			if (!"$rootDirectory/$licenseFilename".toString().equalsIgnoreCase(licenseFile.toString())) {
				// in case the license file not corresponds to a local file, just ignore
			} else {
				createFileFromTemplate(licenseFile, getTemplateFile('LICENSE.template'))
			}
			
			new File(readmeFile).delete()
			createFileFromTemplate(readmeFile, getTemplateFile('README.template'))			
			new File(editorConfigFile).delete()
			createFileFromTemplate(editorConfigFile, getTemplateFile('editorconfig.template'))
			
			// generate git files if necessary
			if (project.hasProperty('initScmForNewProjects') && project.getProperty('initScmForNewProjects')) {
				createGitFiles(true)
			}

			registerEndMessage("" << NELINE \
								<< "  To get started (equivalent to 'npm run dev'), got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable run") + "" << NELINE \
								<< "" << NELINE \
								<< "  To build (equivalent to 'npm run build'), got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable") + "" << NELINE \
								<< "" << NELINE \
								<< "  To test (equivalent to 'npm test'), got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable test") + "" << NELINE \
								<< "" << NELINE \
								<< "  For TypeScript users, see: " + colorize(HIGHLITE_LEVEL, "https://typescript.nuxtjs.org/cookbook/components/") + "" << NELINE)
		} else {
			if (project.hasProperty('generateTypescriptVersionFile') && project.getProperty('generateTypescriptVersionFile')) {
				new File("$srcDirectory").mkdirs()
				new File(getFilePath(typescriptVersionFile)).mkdirs()
				new File("${typescriptVersionFile}").withWriter { writer ->
					writer << "export default \"${project.version}\";" << NELINE
				}
			}
		}
	}
}

if (!project.getProperty('IS_NEW')) {
	build() {
		doFirst {
			if (project.hasProperty("targetStatic") && project.getProperty("targetStatic")) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, "static") + " build.")
			} else {
				printInfo("> Create node " + colorize(HIGHLITE_LEVEL, "server") + " build.")
			}
		}
		
		doLast {
			if (project.hasProperty("targetStatic") && project.getProperty("targetStatic")) {
				addCommonGradlePropertyList("allowedMainDirectories", "$commonGradleBuildDistPath")
				copyFile("$rootDirectory/$versionFilename", "$commonGradleBuildDistPath/$versionFilename")

				if (!new File("$commonGradleBuildDistPath/robots.txt").exists()) {
					def destRobotsFile= "$commonGradleBuildDistPath/robots.txt"
					logInfo("Write file " + colorize(HIGHLITE_LEVEL, robotsFile) + colorize(INFO_LEVEL ,"..."))
					if (!createFileFromTemplate(destRobotsFile, getTemplateFile('robots.template'))) {
						printInfo("> Create " + colorize(HIGHLITE_LEVEL, "$commonGradleBuildDistName/robots.txt") + " with default values.")
						new File(destRobotsFile).withWriter { w ->
							w << "# robots.txt" << NELINE \
							<< "" << NELINE \
							<< "User-agent: *" << NELINE \
							<< "Disallow: /locales/" << NELINE 
						}
					}
				}
				
				if (new File("$commonGradleBuildDistPath/locales/").exists()) {
					def destRedirectIndexFile= "$commonGradleBuildDistPath/locales/${redirectIndexFile}"
					logInfo("Write file " + colorize(HIGHLITE_LEVEL, redirectIndexFile) + colorize(INFO_LEVEL ,"..."))
					if (!createFileFromTemplate(destRedirectIndexFile, getTemplateFile('redirectIndexFile.template'))) {
						printInfo("> Create " + colorize(HIGHLITE_LEVEL, "$commonGradleBuildDistName/locales/${redirectIndexFile}") + " with default values.")
					
						new File(destRedirectIndexFile).withWriter { w ->
							w << "<!DOCTYPE html>" << NELINE \
							<< "<html>" << NELINE \
							<< "<head>" << NELINE \
							<< "<meta name=\"robots\" content=\"noindex\" />" << NELINE \
							<< "<link rel=\"shortcut icon\" href=\"../favicon.ico\" />" << NELINE \
							<< "<meta http-equv=\"Refresh\" content=\"1; url=../index.html\">" << NELINE \
							<< "</head>" << NELINE \
							<< "<body>" << NELINE \
							<< "<h3><a href=\"../index.html\" target=_top>Invalid access, please start at the main entrance point.</a></h3>" << NELINE \
							<< "</body>" << NELINE \
							<< "</html>" << NELINE
						}
					}
				}
			}
		}
	}
}