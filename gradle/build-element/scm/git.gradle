/*
 * git.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */


addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/.git")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/.gitattributes")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/.gitignore")

buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		def grgitCoreVersion="4.0.2"
		if (project.hasProperty('grgitCoreVersion')) {
			grgitCoreVersion = project.getProperty('grgitCoreVersion')
		}
	
		logInfo("grgit core version: ${grgitCoreVersion}")	
		classpath "org.ajoberstar.grgit:grgit-core:${grgitCoreVersion}"
	}
}


/** 	
 * Check if git is already initialized
 */
ext.isGitAvailable = { ->
	def gitDir = "$rootDirectory/.git"
	def gitDirectoryIsAvailable = new File(gitDir).exists()
		
	if (gitDirectoryIsAvailable) {
		logInfo("GIT directory exist.")
		
		def git = openGit()
		if (git!=null) {
			try {
				if (git.head()!=null) {
					logInfo("GIT is available.")
				} else {
					logInfo("GIT is available but has nothing in head.")
				}
				
				return true;
			} catch (IOException e) {
				logInfo("Could not read head from git: " + e.getMessage())
			} finally {
				closeGit(git)
			}
		} 
	} else{ 
		logInfo("GIT directory don't exist.")
	}
	
	return false
}

apply from: "${commonGradleBuildElementPath}/base/exec.gradle"


/** 	
 * Open git 
 */
ext.openGit = { directory = projectDir ->
 	try	
	{
		logInfo("Open git...")

		// use credential manager
		org.ajoberstar.grgit.Credentials credentials = null
		/*
		if (project.hasProperty('scmUseCredentialManager') && project.getProperty('scmUseCredentialManager')) {
			def credentialContent=requestCredentials(cloneUrl)
			if (credentialContent!=null) {
				logInfo("Got credentials for [" + credentialContent[0] + "] of git repository: ${cloneUrl}")
				credentials = new org.ajoberstar.grgit.Credentials(credentialContent[0], credentialContent[1]);		
				//System.properties["org.ajoberstar.grgit.auth.username"]=credentialContent[0]
				//System.properties["org.ajoberstar.grgit.auth.password"]=credentialContent[1]
				//System.properties["org.ajoberstar.grgit.auth.force=hardcoded"]="true"
			}
		}
		*/

		def git
		if (credentials!=null) {
			//logInfo("Try to open git with credentials: ${cloneUrl}")
			git = org.ajoberstar.grgit.Grgit.open(dir: directory, credentials: credentials)
		} else {
			//logInfo("Try to open git without any credentials: ${cloneUrl}")
			git = org.ajoberstar.grgit.Grgit.open(dir: directory)
		}
	} catch (java.lang.IllegalStateException e) {
		printLine(ERROR_LEVEL, true)
		printInfo(colorize(ERROR_LEVEL, 'ERROR') + ": Can not access to git repository: " + e.getMessage() )
		printInfo("      In case you have to authenticate, please use system environment " + colorize(HIGHLITE_LEVEL, 'GRGIT_USER') + " and " + colorize(HIGHLITE_LEVEL, 'GRGIT_PASS') + "!")
		printLine(ERROR_LEVEL, true)
		throw new GradleException("Can not access to git repository: " + e.getMessage())
	}
}


/** 	
 * Close git
 */
ext.closeGit = { git -> 
	logInfo("Close git...")
	if (git!=null) {
		try {			
			git.close()
		} catch (Exception e) {
			printInfo("> Could not close git: " + e.getMessage())
		}
	}
}


/**
 * Initialize git project
 */
ext.initGit = { bare = false ->
	def git = null
	
    try {
		logInfo("Initialise git...")
		git = org.ajoberstar.grgit.Grgit.init(dir: projectDir, bare: bare)
		logInfo("Initialized git.")
	} catch (Exception e) {
		printWarn("Could not initialize git: " + e.getMessage())
	} finally {
		closeGit(git)
	}	
}


/** 	
 * Get remote url
 */
ext.getRemoteGit = { directory = projectDir ->
	def git = null	
	if (isGitAvailable()) {
		try {
			git = openGit()
			return git.remote.list();
		} catch (Exception e) {
			printWarn("Could not get git remote url: " + e.getMessage())
		} finally {
			closeGit(git)
		}	
	}
}


/**
 * Add files to git 
 */
ext.addGit = { inputPatterns = ['./'] ->
	def git = null	
	if (isGitAvailable()) {
		try {
			git = openGit()
			logInfo("Add to git...")
			git.add(patterns: inputPatterns)
		} catch (Exception e) {
			printWarn("Could not add files to git: " + e.getMessage())
		} finally {
			closeGit(git)
		}	
	}
}


/**
 * Commit git
 */
ext.commitGit = { message = "First commit", doPush = false ->
	def git = null	
	if (isGitAvailable()) {
		try {
			git = openGit()
			logInfo("Commit git...")
			git.commit(message: message)
			
			if (doPush) {
				git.push()
			}
		} catch (Exception e) {
			printWarn("Could not add files to git: " + e.getMessage())
		} finally {
			closeGit(git)
		}	
	}
}


/** 
 * Read the git commit hash 
 */
ext.getGitCommitHash = { ->
	def commitHashId = "";
	if (isGitAvailable()) {
		def git = null
		try {
			git = openGit()
			if (git!=null && git.head()!=null) {
				commitHashId = git.head().id;
				if (commitHashId!=null && commitHashId.length() > 9) {
					commitHashId = commitHashId.substring(0, 9)
				}
			}
		} catch (IOException e) {
			printWarn("Could not read git commit hash: " + e.getMessage())
		} finally {
			closeGit(git)
		}	
	}	
	
	return commitHashId
}


/** 
 * Read the git last tag name
 */
ext.getGitLastTagName = { ->
	def lastTag = ""
	if (isGitAvailable()) {
		def git = null
		try {
			git = openGit()
			if (git!=null && git.tag!=null) {
				def listOfTags = git.tag.list()
			
				if (listOfTags!=null && !listOfTags.isEmpty()) {		
					def tagNames = listOfTags.collect { git.describe(commit: it.commit, tags: true) }
					lastTag = tagNames.last()
				}
			}
		} catch (IOException e) {
			printWarn("Could not read last tag name: " + e.getMessage())
		} finally {
			closeGit(git)
		}	
	}	
	
	return lastTag
}


/** 
 * Read the git branch name
 */
ext.getGitBranchName = { ->
	def git = null
	if (isGitAvailable()) {
		try {
			git = openGit()
			if (git!=null && git.branch!=null && git.branch.current()!=null) {
				return git.branch.current().name
			}
		} catch (IOException e) {
			printWarn("Could not read git branch name: " + e.getMessage())
		} finally {
			closeGit(git)
		}	
	}
	
	return ""
}


/**
 * Set a git tag name
 */
ext.setGitTagName = { tagName, message, force = false  ->
	if (isGitAvailable()) {
		def git = null
		try {
			git = openGit()
			if (git!=null && git.tag!=null) {
				git.tag.add(name: tagName, message: message, force: true)
				git.push(tags: true, force: force)            
			}
		} catch (IOException e) {
			printWarn("Could not set git tag name: " + e.getMessage())
		} finally {
			closeGit(git)
		}	
	}
}


/**
 * Create a branch
 */
ext.checkout = { branchName, doCreateBranch=true ->
	def git = null	
	if (isGitAvailable()) {
		try {
			git = openGit()
			git.pull()
		} catch (Exception e) {
			printWarn("Could not checkout branch " + branchName + ": " + e.getMessage())
		}	
		
		def existBranch = false
		git.branch.list().each { 
			if (!existBranch) {
				existBranch = it.name.toString().equals(branchName.toString());
			}
		}
		
		def create = doCreateBranch
		if (existBranch) {
			printInfo("> Branch " + colorize(HIGHLITE_LEVEL, "$branchName")   + " already exists, don't create!")
			create = false
		}
		
		try {
			git.checkout {
				branch = "$branchName"
				createBranch = create
			}
		} catch (Exception e) {
			printWarn("Could not checkout branch " + branchName + ": " + e.getMessage())
		}	
	}
	
	return git;
}


/**
 * Clone a git repository
 */
ext.gitClone = { inputCloneDir, inputCloneUrl, overwrite = true ->
	
	def cloneDir = inputCloneDir.trim() //.replace('\', '/')
	def cloneUrl = inputCloneUrl.trim()
	def git = null
	def result = false
	
    try {
		if (!HAS_ONLINE_CONNECTION) {
			printWarn("Could not checkout [" + colorize(HIGHLITE_LEVEL, cloneUrl) + colorize(WARN_LEVEL, "] because no online connection!"))
			return false 
		}
		
		if (new File(cloneDir).exists()) {
			if (overwrite) {
				git = openGit(cloneDir)
				logInfo("GIT reset [" + colorize(HIGHLITE_LEVEL, cloneUrl) + colorize(INFO_LEVEL, "] in [") + colorize(HIGHLITE_LEVEL, cloneDir) + colorize(INFO_LEVEL, "]."))
				git.reset(mode: 'hard', commit: 'origin/master')
				logInfo("GIT clean [" + colorize(HIGHLITE_LEVEL, cloneDir) + colorize(INFO_LEVEL, "]."))
				git.clean(directories: true)
				logInfo("GIT pull [" + colorize(HIGHLITE_LEVEL, cloneDir) + colorize(INFO_LEVEL, "]."))
				git.pull()			
				return false
			} 
			
			printWarn("Checkout directory already exist [" + colorize(HIGHLITE_LEVEL, cloneDir) + colorize(WARN_LEVEL, "]!"))
			return false
		}
		
		logInfo("GIT checkout [" + colorize(HIGHLITE_LEVEL, cloneUrl) + colorize(INFO_LEVEL, "] into [") + colorize(HIGHLITE_LEVEL, cloneDir) + colorize(INFO_LEVEL, "]."))		

		// use credential manager
		org.ajoberstar.grgit.Credentials credentials = null
		if (project.hasProperty('scmUseCredentialManager') && project.getProperty('scmUseCredentialManager')) {
			def credentialContent=requestCredentials(cloneUrl)
			if (credentialContent!=null) {
				logInfo("Got credentials for [" + credentialContent[0] + "] of git repository: ${cloneUrl}")
				credentials = new org.ajoberstar.grgit.Credentials(credentialContent[0], credentialContent[1]);		
				//System.properties["org.ajoberstar.grgit.auth.username"]=credentialContent[0]
				//System.properties["org.ajoberstar.grgit.auth.password"]=credentialContent[1]
				//System.properties["org.ajoberstar.grgit.auth.force=hardcoded"]="true"
			}
		}
		
		if (credentials!=null) {
			logInfo("Try to clone git with credentials: ${cloneUrl}")			
			/*
		    org.eclipse.jgit.api.Git.cloneRepository()
				.setURI(cloneUrl)
				.setDirectory(new File(cloneDir))
				.setCredentialsProvider(new org.eclipse.jgit.transport.UsernamePasswordCredentialsProvider(credentials.username, credentials.password))
				.call();
			*/
			git = org.ajoberstar.grgit.Grgit.clone(dir: cloneDir, uri: cloneUrl, credentials: credentials)
		} else {
			logInfo("Try to clone git without any credentials: ${cloneUrl}")
			/*
		    org.eclipse.jgit.api.Git.cloneRepository()
				.setURI(cloneUrl)
				.setDirectory(new File(cloneDir))
				.call();
			*/
			git = org.ajoberstar.grgit.Grgit.clone(dir: cloneDir, uri: cloneUrl)
			result = true
		}
	} catch (Exception e) {
		logInfo("Could not checkout [" + colorize(HIGHLITE_LEVEL, cloneUrl) + colorize(WARN_LEVEL, "] into [") + colorize(HIGHLITE_LEVEL, cloneDir) + colorize(WARN_LEVEL, "]: " + e.getMessage()))
	
		def msg = e.getMessage();
		if (msg!=null) {
			if (msg.indexOf("Authentication is required")>=0) {
				printWarn("Could not checkout [" + colorize(HIGHLITE_LEVEL, cloneUrl) + colorize(WARN_LEVEL, "] (authentication is needed!)"))
			} else {
				printWarn("Could not checkout [" + colorize(HIGHLITE_LEVEL, cloneUrl) + colorize(WARN_LEVEL, "]: " + e.getMessage()))
			}
		} else {
			printWarn("Could not checkout [" + colorize(HIGHLITE_LEVEL, cloneUrl) + colorize(WARN_LEVEL, "]: " + e.getMessage()))
			//e.printStackTrace()
		}
	} finally {
		closeGit(git)
	}	
	
	return result
}


/** 
 * Read the git commit hash 
 */
def getGitCommitHashCmdline() {
    try {
		return "git rev-parse --short HEAD".execute().text.trim()
	} catch (IOException e) {
	}
	
	return ""
}


/** 
 * Read the git branch name
 */
def getGitBranchNameCmdline() {
    try {
		return "git rev-parse --abbrev-ref HEAD".execute().text.trim()
	} catch (IOException e) {
	}
	
	return ""
}


/**
 * Request credentials from git credential manager (in case common-build is installed)
 */
ext.requestCredentials = { url, timeout=-1 ->
	try {
		def cbHome=System.getenv('CB_HOME')
		if (cbHome!=null) {
			readOSConfiguration()
			def osEnvironment=project.getProperty('osEnvironment')
			def separator=project.getProperty('separator')
			def scriptEnding=project.getProperty('scriptEnding')

			def scriptBin = "cb-credential${scriptEnding}".toString()
			def scriptPath = "$cbHome${separator}bin${separator}include${separator}${scriptBin}".toString()
			if (osEnvironment.startsWith('cygwin')) {
				def sout = new StringBuilder(), serr = new StringBuilder()
				execRawCommand(['cmd', '/c', 'cygpath', '-w', scriptPath ], timeout, sout, serr)
				scriptPath=sout.toString().replace('\r', ' ').replace('\n', ' ')
			}

			def cmdCall="${scriptPath} --print \"${url}\"".toString()
			def args = [ cmdCall ]
			def windowsArgs = ['cmd', '/c', cmdCall]
			def sout = new StringBuilder(), serr = new StringBuilder()
			execOSCommand(args, windowsArgs, timeout, sout, serr)

			if (sout!=null) {
				def urlStr = sout.toString().replace('\r', ' ').replace('\n', ' ')
				if (urlStr.length()>0) {
					def credentialContent=new String(urlStr.decodeBase64())
					def idx =credentialContent.indexOf(':')
					if (idx>0) {
						logInfo("Read credentials for url ${url}.")
						return [credentialContent.substring(0, idx), credentialContent.substring(idx + 1)]
					}
				}
			}
		}
	} catch(Exception ex) {
		printWarn("Could not read credential for url ${url}: " + ex.getMessage())
	}
	
	return null
}


/***************************************************************************************
 * Initialize git files
 ***************************************************************************************/
ext.createGitFiles = { overwrite = false ->
	def rootDirectory = project.getProperty('rootDirectory');
	def commonGradleTemplateScmPath= project.getProperty('commonGradleTemplateScmPath')
	def gitIgnoreFile = '.gitignore'
	
	if (overwrite || !new File("${rootDirectory}", "${gitIgnoreFile}").exists()) {
		def gitIgnoreFileTemplate = 'gitignore.template'
		if (new File("${commonGradleTemplateScmPath}", "${gitIgnoreFileTemplate}").exists()) {
			printInfo("> Create " + colorize(HIGHLITE_LEVEL, gitIgnoreFile) + " from template ${gitIgnoreFileTemplate}.")
			copy {
				from "${commonGradleTemplateScmPath}"
				include "${gitIgnoreFileTemplate}"
				into "${rootDirectory}"
				rename { String fileName -> fileName.replace(gitIgnoreFileTemplate, gitIgnoreFile) }
			}
		} else {		
			printInfo("> Create " + colorize(HIGHLITE_LEVEL, gitIgnoreFile) + " with default values.")
			new File(rootDirectory, gitIgnoreFile).withWriterAppend { w ->
				w << "# Ignore Gradle project-specific cache directory" << NELINE \
				<< ".gradle" << NELINE \
				<< NELINE \
				<< "# Ignore Gradle build output directory" << NELINE \
				<< "build" << NELINE \
				<< NELINE \
				<< "# Ignore logs output directory" << NELINE \
				<< "logs" << NELINE \
				<< NELINE \
				<< "# Ignore temp output directory" << NELINE \
				<< "temp" << NELINE \
				<< NELINE \
				<< "# Java build artifacts class files" << NELINE \
				<< "*.class" << NELINE \
				<< NELINE \
				<< "# OSX files" << NELINE \
				<< ".DS_Store" << NELINE \
				<< NELINE
			}
		}
	}
		
	def gitAttributeFile = '.gitattributes'
	if (overwrite || !new File("${rootDirectory}", "${gitAttributeFile}").exists()) {
		def gitAttributeFileTemplate = 'gitattributes.template'
		if (new File("${commonGradleTemplateScmPath}", "${gitAttributeFileTemplate}").exists()) {
			printInfo("> Create " + colorize(HIGHLITE_LEVEL, gitAttributeFile) + " from template ${gitAttributeFileTemplate}.")
			copy {
				from "${commonGradleTemplateScmPath}"
				include "${gitAttributeFileTemplate}"
				into "${rootDirectory}"
				rename { String fileName -> fileName.replace(gitAttributeFileTemplate, gitAttributeFile) }
			}
		} else {		
			printInfo("> Create " + colorize(HIGHLITE_LEVEL, gitAttributeFile) + " with default values.")
			new File(rootDirectory, gitAttributeFile).withWriterAppend { w ->
				w << "#" << NELINE \
				<< "# https://help.github.com/articles/dealing-with-line-endings/" << NELINE \
				<< "#" << NELINE \
				<< "# These are explicitly windows files and should use crlf" << NELINE \
				<< NELINE \
				<< "*.bat           text eol=crlf" << NELINE \
				<< NELINE \
				<< "# Denote all files that are truly binary and should not be modified." << NELINE \
				<< "*.ico binary" << NELINE \
				<< "*.png binary" << NELINE \
				<< "*.jpg binary" << NELINE \
				<< "*.jpeg binary" << NELINE \
				<< "*.xls binary" << NELINE \
				<< "*.xlsx binary" << NELINE \
				<< "*.doc binary" << NELINE \
				<< "*.docx binary" << NELINE \
				<< NELINE
			}
		}
	}
}
