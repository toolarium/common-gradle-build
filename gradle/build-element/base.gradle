/*
 * base.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */
// doc: https://www.oreilly.com/library/view/gradle-beyond-the/9781449373801/ch01.html
// see http://sorcersoft.org/project/site/gradle/userguide/userguide.html


if (!project.hasProperty('commonGradleBuildUrl')) {
    ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}


/***************************************************************************************
 * basic groovy imports
 ***************************************************************************************/
apply from: "${commonGradleBuildElementPath}/base/constants.gradle"
apply from: "${commonGradleBuildElementPath}/base/logger.gradle"
apply from: "${commonGradleBuildElementPath}/base/property.gradle"
apply from: "${commonGradleBuildElementPath}/base/util.gradle"
apply from: "${commonGradleBuildElementPath}/base/file.gradle"
apply from: "${commonGradleBuildElementPath}/base/console.gradle"
apply from: "${commonGradleBuildElementPath}/base/github.gradle"

logInfo(LINE)
apply from: "${commonGradleBuildElementPath}/base/common-gradle-build.gradle"
apply from: "${commonGradleBuildElementPath}/base/initialisation.gradle"
apply from: "${commonGradleBuildElementPath}/base/defaults.gradle"


/***************************************************************************************
 * Common gradle build home handling (is different than common gradle build cache!)
 ***************************************************************************************/
if (project.hasProperty('commonGradleBuildHome')) {
	def commonGradleBuildHome = project.getProperty('commonGradleBuildHome')
	if (commonGradleBuildHome!=null && !"${commonGradleBuildHome}".isEmpty()) {
		def commonGradleBuildHomeDefaultsFile = "${commonGradleBuildHome}/gradle/defaults.gradle"

		// apply from home
		if (new File(commonGradleBuildHomeDefaultsFile).exists()) {
			bootStraplogLifecycle("> Found defaults in common-gradle-build home path, apply.")
			def userDefined = "[${commonGradleBuildHomeDefaultsFile}]"
			
			if (LINE.length()>userDefined.length()) {
				userDefined += LINE.substring(userDefined.length())
			}
			logInfo(userDefined)
			apply from: "${commonGradleBuildHomeDefaultsFile}"
			logInfo(userDefined)
		}
	}
}

logInfo(LINE)


/***************************************************************************************
 * base imports
 ***************************************************************************************/
apply from: "${commonGradleBuildElementPath}/base/version.gradle"
apply from: "${commonGradleBuildElementPath}/base/init.gradle"
apply from: "${commonGradleBuildElementPath}/base/gradle.gradle"
apply from: "${commonGradleBuildElementPath}/base/config.gradle"
apply from: "${commonGradleBuildElementPath}/base/project-report.gradle"
apply from: "${commonGradleBuildElementPath}/base/exec.gradle"
apply from: "${commonGradleBuildElementPath}/release.gradle"
apply from: "${commonGradleBuildElementPath}/scm/git.gradle"
//apply from: "${commonGradleBuildElementPath}/scm/changelog.gradle"


// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// add dependencies to all tasks except some special ones
if (!project.hasProperty('hasProjectValidationExecuted')) {
	setCommonGradleProperty('hasProjectValidationExecuted', false)
}

tasks.matching { it != projectValidation }.all {
	def hasAlreadyExecuted = project.hasProperty('hasProjectValidationExecuted') && project.getProperty('hasProjectValidationExecuted')
	if (!hasAlreadyExecuted && it != help && it != tasks && it != configJar && it != wrapper && it !=projectValidation) {
		logDebug("Add dependency to " + it)
		it.dependsOn projectValidation
	} else {
		logDebug("Ignore dependency " + it)
	}
}
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!


/***************************************************************************************
 * Before and after task handling
 ***************************************************************************************/
ext.currentTask = null
ext.failedTask = null
gradle.taskGraph.beforeTask { Task task ->
	ext.currentTask = task
}
gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (state.failure) {
		failedTask = task
    }
    else {
		currentTask = null
    }
}


/***************************************************************************************
 * Build finish
 ***************************************************************************************/
gradle.buildFinished { buildResult ->
	//println("=>"+gradle.startParameter.getConsoleOutput())
	//println("=>"+gradle.startParameter.getWarningMode())
	//println("=>"+gradle.startParameter.getShowStacktrace())
	//println("=>"+gradle.startParameter.getTaskNames())
	//println "BUILD FINISHED" + buildResult

	def startupTime=NOW
	//def startupTime = java.lang.management.ManagementFactory.getRuntimeMXBean().getStartTime()
	def cbStartupTimestamp=System.getenv('CB_START_TIMESTAMP')
	if (cbStartupTimestamp!=null && !cbStartupTimestamp.isEmpty()) {
		startupTime = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS").parse(cbStartupTimestamp)
		logInfo("Common build startup time " + cbStartupTimestamp)
	}
	
	def duration = ((((long)(new Date().getTime()/ 1000.0))*1000) - startupTime.getTime()) / 1000.0
	if (duration == null || duration < 0) {
		duration = 1
	}

	if (project.hasProperty('validBuild') && !project.getProperty('validBuild')) {
		def errorMessage = project.getProperty('validBuildMessage')
		if (gradle.startParameter.getLogLevel() != org.gradle.api.logging.LogLevel.QUIET) {
			printNewline()
		}

		if (errorMessage!=null && !errorMessage.isEmpty()) {
			printLine(ERROR_LEVEL, true)
			printInfo(colorize(ERROR_LEVEL, "ERROR: " + errorMessage))
			printLine(ERROR_LEVEL, true)
			throw new GradleException("ERROR: " + errorMessage)
		} else {
			printLine(ERROR_LEVEL)
			throw new GradleException("ERROR")
		}
	}

	def isFailed = (buildResult.getFailure()!=null  && failedTask!=null && failedTask.name!=null)
	if (isFailed) {
		if (gradle.startParameter.getLogLevel() == org.gradle.api.logging.LogLevel.QUIET) {
			println(colorize(ERROR_LEVEL, 'FAILURE:') + " In task " + colorize(HIGHLITE_LEVEL, failedTask.name) + ", task execution used ~" + duration + "s")
			printNewline()
		}
	} else {
		if (failedTask==null) {
			//gradle.startParameter.logLevel = org.gradle.api.logging.LogLevel.LIFECYCLE
			//gradle.startParameter.showStacktrace = org.gradle.api.logging.configuration.ShowStacktrace.ALWAYS
			//INTERNAL_EXCEPTIONS
		}

		if (gradle.startParameter.getLogLevel() == org.gradle.api.logging.LogLevel.QUIET) {
			printInfo(colorize(SUCCESS_LEVEL, "BUILD SUCCESSFUL") + " in ~" + duration + "s                      ")
		}
	}

	printLine()	
	
	// support end message
	if (!isFailed && project.hasProperty('endMessage')) {
		printInfo ("")
		printLine(HIGHLITE_LEVEL, true)
        printInfo ("" + project.getProperty('endMessage'))
		printLine(HIGHLITE_LEVEL, true)
	}
}


/***************************************************************************************
 * when project ready
 ***************************************************************************************/
gradle.taskGraph.whenReady { taskGraph ->
	// in case we deploy check credentials
    if (taskGraph.hasTask(":release") || taskGraph.hasTask(":publish")) {
		if (project.ext.isSnapshotVersion) {
			if (!project.ext.qualifierVersionNumber.endsWith(SNAPSHOT_TAG_NAME) || project.ext.isReleaseVersion) {
				printLine(ERROR_LEVEL, true)
				def errorMessage = ""
				if (project.ext.isReleaseVersion) {
					errorMessage += " Inconsistent status (either we build a snapshot version or a release version)!"
				}
				if (!project.ext.qualifierVersionNumber.endsWith(SNAPSHOT_TAG_NAME)) {
					errorMessage += " Snapshot version has to end with " + SNAPSHOT_TAG_NAME + "!"
				}
				printInfo(colorize(ERROR_LEVEL, "ERROR:" + errorMessage))
				printLine(ERROR_LEVEL, true)
				throw new GradleException("ERROR:" + errorMessage)
			}
		}

		if (project.ext.isReleaseVersion) {
			if (project.ext.qualifierVersionNumber.endsWith(SNAPSHOT_TAG_NAME) || project.ext.isSnapshotVersion) {
				printLine(ERROR_LEVEL, true)
				def errorMessage = ""
				if (project.ext.isSnapshotVersion) {
					errorMessage += " Inconsistent status (either we build a snapshot version or a release version)!"
				}
				if (project.ext.qualifierVersionNumber.endsWith(SNAPSHOT_TAG_NAME)) {
					errorMessage += " Release version don't end with " + SNAPSHOT_TAG_NAME + "!"
				}
				printInfo(colorize(ERROR_LEVEL, "ERROR:" + errorMessage))
				printLine(ERROR_LEVEL, true)
				throw new GradleException("ERROR:" + errorMessage)
			}
		}

		if (!project.hasProperty('mavenUsername') || !project.hasProperty('mavenPassword')) {
			def userHomeDirectory = ''
			if (project.hasProperty('userHomeDirectory')) {
				userHomeDirectory = project.getProperty('userHomeDirectory')
			}

			def configFileName = "${userHomeDirectory}.gradle/gradle.properties file"
			def credentialsMessage = colorize(HIGHLITE_LEVEL, 'mavenUsername') + " and " + colorize(HIGHLITE_LEVEL, 'mavenPassword')
			printLine(ERROR_LEVEL, true)
			printInfo(colorize(ERROR_LEVEL, 'ERROR:') + " ${credentialsMessage} has to be ")
			printInfo("       configured, e.g. in " + colorize(HIGHLITE_LEVEL, configFileName) + "!")
			printLine(ERROR_LEVEL, true)

			throw new GradleException("ERROR: ${mavenUsername} and ${mavenPassword} has to be configured, e.g. in ${configFileName}!")
		}
    }
}


/***************************************************************************************
 * project validation
 ***************************************************************************************/
projectValidation {
	// check common gradle build cache
	try {
		downloadCommonGradleBuildCache()
	} catch (Exception e) {
		printWarn("Could not download common gradle build to cache: " + e.getMessage())
	}

	// check common gradle build home
	try {
		downloadCommonGradleBuildHome()
	} catch (Exception e) {
		printWarn("Could not download common gradle build home: " + e.getMessage())
	}

	doFirst {
		hasProjectValidationExecuted=true
		logInfo("Project validation....")

		// validate project name
		def projectNameRegularExpressionPattern = ~"${projectNameRegularExpressionPattern}"
		if (rootProject.name ==~ projectNameRegularExpressionPattern) {
			logDebug("Valid project name.")
		} else {
			printWarn("Project name [$rootProject.name] don't follow rule: [" + colorize(HIGHLITE_LEVEL, projectNameRegularExpressionPattern) + colorize(WARN_LEVEL, "] (see projectNameRegularExpressionPattern seetings)!"))
			setCommonGradleProperty("validBuild", false)
			setCommonGradleProperty("validBuildMessage", "Invalid project name!")
		}

		// validate group id
		def projectGroupIdRegularExpressionPattern = ~"${projectGroupIdRegularExpressionPattern}"
		if (projectGroupId ==~ projectGroupIdRegularExpressionPattern) {
			logDebug("Valid project group id.")
		} else {
			printWarn("Group id [$projectGroupId] don't follow rule: [" + colorize(HIGHLITE_LEVEL, projectGroupIdRegularExpressionPattern) + colorize(WARN_LEVEL, "] (see projectGroupIdRegularExpressionPattern seetings)!"))
			setCommonGradleProperty("validBuild", false)
			setCommonGradleProperty("validBuildMessage", "Invalid project group id!")
		}

		// validate component id
		def projectComponentIdRegularExpressionPattern = ~"${projectComponentIdRegularExpressionPattern}"
		if (projectComponentId!=null && !projectComponentId.isEmpty()) {
			if (projectComponentId ==~ projectComponentIdRegularExpressionPattern) {
				logDebug("Valid project component id.")
			} else {
				printWarn("Component id [$projectComponentId] don't follow rule: [" + colorize(HIGHLITE_LEVEL, projectComponentIdRegularExpressionPattern) + colorize(WARN_LEVEL, "] (see projectComponentIdRegularExpressionPattern seetings)!"))
				setCommonGradleProperty("validBuild", false)
				setCommonGradleProperty("validBuildMessage", "Invalid project component id!")
			}

			def projectComponentIdSeparator = "-"
			if (project.hasProperty('projectComponentIdSeparator')) {
				projectComponentIdSeparator = project.getProperty('projectComponentIdSeparator')
			}

			def startOrEnd = ("${rootProject.name}".toString().equals(projectComponentId.toString()) || "${rootProject.name}".startsWith(projectComponentId+projectComponentIdSeparator) || "${rootProject.name}".endsWith(projectComponentIdSeparator+projectComponentId))
			if (projectComponentIdIsPartOfProjectName && !startOrEnd) {
				printWarn("Component id [$projectComponentId] should be part of the project name [$rootProject.name] (see projectComponentIdIsPartOfProjectName seetings)!")
				setCommonGradleProperty("validBuild", false)
				setCommonGradleProperty("validBuildMessage", "Invalid project component id!")
			}
		}
		
		// validate root package name
		if (projectRootPackageNamePrefix!=null && !projectRootPackageNamePrefix.isEmpty() && !projectRootPackageName.startsWith(projectRootPackageNamePrefix)) {
			printWarn("Root package name [$projectRootPackageName] has to start with prefix [$projectRootPackageNamePrefix] (see projectRootPackageNamePrefix seetings)!")
			setCommonGradleProperty("validBuild", false)
			setCommonGradleProperty("validBuildMessage", "Invalid root package name!")
		}
		
		// generate git files if necessary
		if (project.hasProperty('initScmForNewProjects') && project.getProperty('initScmForNewProjects')) {
			createGitFiles()
		}
		
		def validateProjectNameAndFolder = project.hasProperty('validateProjectNameAndFolder') && project.getProperty('validateProjectNameAndFolder')
		if (validateProjectNameAndFolder) {
			def userDir = cbProjectRootDir
			def idx = userDir.lastIndexOf('/')
			if (idx>0) {
				userDir = userDir.substring(idx+1)
			}
			if (!"${rootProject.name}".equals("${userDir}")) {
				printWarn("Project folder [$userDir] do not match with the project name [${rootProject.name}] (see validateProjectNameAndFolder seetings)!")
				setCommonGradleProperty("validBuild", false)
				setCommonGradleProperty("validBuildMessage", "Invalid path: project name and folder don't match!")
			}
		}
	}
	
	doLast {
		// validate root directories and files
		def validateRootFiles = project.hasProperty('validateRootFiles') && project.getProperty('validateRootFiles')
		def validateRootDirectories = project.hasProperty('validateRootDirectories') && project.getProperty('validateRootDirectories')
		def allowedMainDirectoryList = new ArrayList(Arrays.asList(allowedMainDirectories.split(", ")))
		def allowedMainFileList = new ArrayList(Arrays.asList(allowedMainFiles.split(", ")))
		
		def checkRootDirectory = defaultRootDirectory
		if (!defaultRootDirectory.toString().equals(rootDirectory.toString())) {
			checkRootDirectory = rootDirectory
		}
		
		Set result = new TreeSet()
		File[] files = new File(rootDirectory).listFiles();
		if (files != null && files.length > 0) {
			for (File file : files) {
				boolean valid = false;
				def nameToCheck = ("$checkRootDirectory/" + file.getName()).toString()

				if (file.isDirectory()) {
					if (validateRootDirectories) {
						valid = allowedMainDirectoryList.contains(nameToCheck)
						if (!valid) {
							printWarn("Invalid directory " + colorize(HIGHLITE_LEVEL, nameToCheck) + colorize(WARN_LEVEL, ", it's not supported!"))
							setCommonGradleProperty("validBuild", valid)

							if (validBuildMessage==null || validBuildMessage.isEmpty()) {
								setCommonGradleProperty("validBuildMessage", "Invalid directory!")
							}
						}
					}
				} else {
					if (validateRootFiles) {
						valid = allowedMainFileList.contains(nameToCheck)
						if (!valid) {
							printWarn("Invalid file " + colorize(HIGHLITE_LEVEL, nameToCheck) + colorize(WARN_LEVEL, ", it's not supported!"))
							setCommonGradleProperty("validBuild", valid)

							if (validBuildMessage==null || validBuildMessage.isEmpty()) {
								setCommonGradleProperty("validBuildMessage", "Invalid file " + nameToCheck + "!")
							}
						}
					}
				}

				if (valid) {
					result.add(file.getName())
				}
			}
		}

		// init scm
		if (project.hasProperty('initScmForNewProjects') && project.getProperty('initScmForNewProjects')) {
			if (!isGitAvailable()) {
				printInfo("> Initiallize git repository and add first files...")
				initGit()

				if (project.hasProperty('initScmWithNewFiles') && project.getProperty('initScmWithNewFiles')) {
					if (result!=null && result.size()>0) {
						addGit(result)
						commitGit("Added project files.")
					}
				}
			}
		}

		if (project.hasProperty('initShowScm') && project.getProperty('initShowScm')) {
			if (isGitAvailable()) {
				def branchName = getGitBranchName()
				def commitHash = getGitCommitHash()
				if (branchName!=null && !branchName.trim().isEmpty() && commitHash!=null && !commitHash.trim().isEmpty()) {
					printInfo("> Git branch: " + colorize(HIGHLITE_LEVEL, branchName) + ", commit: " + colorize(HIGHLITE_LEVEL, commitHash))
					project.ext.set(scmVersionNumber, commitHash)
				}
			}
		}
	}
}


/***************************************************************************************
 * Register end message (e.g. get started)
 ***************************************************************************************/
ext.registerEndMessage = { message ->
	def msg = message.toString()
	msg += "\n  Do you like common-build?\n" 
	msg += "  -> Go give it a star on " + colorize(TITLE_LEVEL, "https://github.com/toolarium/common-build") + "!\n"
	setCommonGradleProperty("endMessage", msg)
}
