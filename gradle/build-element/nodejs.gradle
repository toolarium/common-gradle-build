/*
 * nodejs.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */


/***************************************************************************************
 * ResourceBundle.xls json support
 ***************************************************************************************/
ext.commonGradleResourcebundleJsonSupport=true

if (!ext.has('nodeBuildArguments')) {
	ext.nodeBuildArguments = ['run', 'build', '--loglevel', 'silent']
}

if (!project.hasProperty('commonGradleBuildUrl')) {
    ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}

// set docker image standards
if (!project.hasProperty("dockerImage")) {
	//project.ext.set("dockerImage", "node:alpine")
	project.ext.set("dockerImage", "nginx:alpine")
}
if (!project.hasProperty("dockerDeploymentSourcePath")) {
	project.ext.set("dockerDeploymentSourcePath", '.')
}

// in case we have no group id but have a component id, we just take over the component id
if (!project.hasProperty("projectGroupId") || "$projectGroupId".toString().trim().isEmpty() ) {
	if (project.hasProperty("projectComponentId") && !"$projectComponentId".toString().trim().isEmpty() ) {
		project.ext.set("projectGroupId", project.ext.get("projectComponentId"))
	}
}
if (!project.hasProperty("kubernetesSupport")) {
	project.ext.set("kubernetesSupport", true)
}

if (!project.hasProperty("createJar")) {
	project.ext.set("createJar", false)
}
if (!project.hasProperty("createSourceJar")) {
	project.ext.set("createSourceJar", false)
}
if (!project.hasProperty("createJavadocJar")) {
	project.ext.set("createJavadocJar", false)
}


/***************************************************************************************
 * Set additional template path
 ***************************************************************************************/
ext.projectTypeTemplatePath='nodejs'


/***************************************************************************************
 * Dependencies
 ***************************************************************************************/
apply from: "${commonGradleBuildElementPath}/base.gradle"
apply from: "${commonGradleBuildElementPath}/base/gradle.gradle"
apply from: "${commonGradleBuildElementPath}/base/run.gradle"
apply from: "${commonGradleBuildElementPath}/base/kubernetes.gradle"
apply from: "${commonGradleBuildElementPath}/java/repository.gradle"
apply from: "${commonGradleBuildElementPath}/java/signing.gradle"
apply from: "${commonGradleBuildElementPath}/java/publication.gradle"


/***************************************************************************************
 * common node dirctories and files
 ***************************************************************************************/
addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/node_modules")
addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/coverage")
addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/test")

addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/package.json")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/package-lock.json")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/.babelrc")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/.eslintrc.js")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/.prettierrc")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/jest.config.js")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/jsconfig.json")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/tsconfig.json")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/yarn.lock")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/manifest.json")


/***************************************************************************************
 * artefacts
 ***************************************************************************************/
artifacts {
	if (project.hasProperty('kubernetesSupport') && project.getProperty('kubernetesSupport')) {
		archives kubernetesJar
	}
}


/***************************************************************************************
 * Node version
 ***************************************************************************************/
if (!project.getProperty('IS_NEW')) {
	node {
		// Whether to download and install a specific Node.js version or not. If false, it will use the globally installed Node.js
		// If true, it will download node using above parameters. Note that npm is bundled with Node.js.
		download = false
		
		// Version of node to download and install (only used if download is true). It will be unpacked in the workDir.
		version = "12.18.1"
		
		// Version of npm to use. If specified, installs it in the npmWorkDir. If empty, the plugin will use the npm command bundled with Node.js.
		npmVersion = ""
		
		// Version of Yarn to use. Any Yarn task first installs Yarn in the yarnWorkDir. It uses the specified version if defined and the 
		// latest version otherwise (by default).
		yarnVersion = ""
		
		// Base URL for fetching node distributions. Only used if download is true. Change it if you want to use a mirror or set to null if 
		// you want to add the repository on your own.
		distBaseUrl = "https://nodejs.org/dist"
		
		// The npm command executed by the npmInstall task. By default it is install but it can be changed to ci
		npmInstallCommand = "install"
		
		// The directory where Node.js is unpacked (when download is true).
		workDir = file("${project.projectDir}/.gradle/nodejs")
		
		// The directory where npm is installed (when a specific version is defined).
		npmWorkDir = file("${project.projectDir}/.gradle/npm")
		
		// The directory where yarn is installed (when a Yarn task is used).
		yarnWorkDir = file("${project.projectDir}/.gradle/yarn")
		
		// The Node.js project directory location. This is where the package.json file and node_modules directory are located. By default it 
		// is at the root of the current project.
		//nodeProjectDir = file("${project.projectDir}")
		
		// Whether the plugin automatically should add the proxy configuration to npm and yarn commands according the proxy configuration 
		// defined for Gradle. Disable this option if you want to configure the proxy for npm or yarn on your own (in the .npmrc file for instance).
		//useGradleProxySettings = true
	}

	defaultTasks 'clean', 'build'
	build.dependsOn('createResourceBundle')


	/***************************************************************************************
	 * clean
	 ***************************************************************************************/
	//task clean(type: NpmTask) {
	clean {
		doFirst {
			delete "${rootDirectory}/build/"
			delete "${rootDirectory}/dist/"
			delete "${rootDirectory}/.nuxt"
			delete "${rootDirectory}/logs/"
			delete "${rootDirectory}/temp/"
		}
	}


	/***************************************************************************************
	 * Fund off
	 ***************************************************************************************/
	task npmFundMessage(type: NpmTask) {	
		group = 'NPM tasks'
		description = 'Switch fund message off'
		args = ['config', 'set', 'fund', "$nodeFundMessage", '--global']
		
		doFirst {
			if (project.getProperty('nodeFundMessage')) {
				printInfo("> Enable npm fund message.")
			} else {
				printInfo("> Disable npm fund message.")
			}
		}
	}


	/***************************************************************************************
	 * sets the npm registry
	 ***************************************************************************************/
	task npmRegistry(type: NpmTask) {	
		group = 'NPM tasks'
		description = 'Set npm registry'
		args = ['config', 'set', 'registry', "$nodeRegistry"]
				
		doFirst {
			printInfo("> Initialize npm registry to " + colorize(HIGHLITE_LEVEL, "$nodeRegistry") + ".")
			
			//new File("$nodeConfigInitFile").write("$nodeRegistry")
			File nodeConfigInitFilePath = new File("$nodeConfigInitFile")
			new File(nodeConfigInitFilePath.getParent()).mkdirs()
			nodeConfigInitFilePath.write("$nodeRegistry")
		}
	}


	/***************************************************************************************
	 * build
	 ***************************************************************************************/
	task npmBuild(type: NpmTask) {	
		group = 'NPM tasks'
		description = 'Excute npm build'		
		args = nodeBuildArguments
	}
	build.finalizedBy npmBuild
	npmBuild.dependsOn npmInstall
	npmInstall.args = ['--loglevel', 'silent']

	// if there was never an initialisation add dependencies
	if (!new File("$nodeConfigInitFile").exists()) {
		npmInstall.dependsOn npmRegistry
		npmRegistry.dependsOn npmFundMessage
	}


	/***************************************************************************************
	 * test
	 ***************************************************************************************/
	task test(type: NpmTask) {
		group = 'NPM tasks'
		description = 'Excute npm test'
		args = ['run', 'test']
	}


	/***************************************************************************************
	 * npm run start
	 ***************************************************************************************/
	task runDev(type: NpmTask) {
		group = 'NPM tasks'
		description = 'Excute npm start'
	    //tasks = ['build', 'lint', 'test']
		args = ['run', 'dev']
	}
	//runDev.dependsOn build
	//runDev.dependsOn run
	run.dependsOn runDev


	/***************************************************************************************
	 * npm run audit
	 ***************************************************************************************/
	 /*
	task audit(type: NpmTask) {
		group = 'NPM tasks'
		description = 'Excute npm audit'
		args = ['run', 'npmaudit']
	}
	*/


	/***************************************************************************************
	 * npm run lint
	 ***************************************************************************************/
	task lint(type: NpmTask) {
		group = 'NPM tasks'
		description = 'Excute npm lint'
		args = ['run', 'lint']
	}
} else {
	defaultTasks 'projectValidation'
	projectValidation.finalizedBy('createResourceBundle')
}


/***************************************************************************************
 * generate package json
 ***************************************************************************************/
ext.generatePackageJson = { outputPath = "${$rootDirectory}",
							filename = "package.json", 							
							overwrite = false,
							packageJsonTemplateName = null,
							packageJsonTemplate ->							
	if (overwrite || !new File("${outputPath}", "${filename}").exists()) {
		logInfo("Write file " + colorize(HIGHLITE_LEVEL, outputPath + "/" + filename) + colorize(INFO_LEVEL, "..."))		
		if (packageJsonTemplateName==null || !createFileFromTemplate(rootDirectory + "/" + filename, getTemplateFile(packageJsonTemplateName))) {
			printInfo("> Create " + colorize(HIGHLITE_LEVEL, filename) + " with default values.")
			new File(outputPath, filename).withWriter { packageJsonTemplate }			
		}
	}
}


apply from: "${commonGradleBuildElementPath}/base/docker.gradle"
