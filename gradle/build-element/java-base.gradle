/*
 * java-library.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */


apply from: "${commonGradleBuildElementPath}/language-base.gradle"
apply from: "${commonGradleBuildElementPath}/base/kubernetes.gradle"
apply from: "${commonGradleBuildElementPath}/java/javadoc.gradle"
apply from: "${commonGradleBuildElementPath}/java/java.gradle"
apply from: "${commonGradleBuildElementPath}/java/test.gradle"
apply from: "${commonGradleBuildElementPath}/java/repository.gradle"
apply plugin: 'java'
apply from: "${commonGradleBuildElementPath}/java/signing.gradle"
apply from: "${commonGradleBuildElementPath}/java/publication.gradle"
apply from: "${commonGradleBuildElementPath}/java/javaversion.gradle"
apply from: "${commonGradleBuildElementPath}/java/checkstyle.gradle"
apply from: "${commonGradleBuildElementPath}/java/testcoverage.gradle"
apply from: "${commonGradleBuildElementPath}/java/eclipse.gradle"

defaultTasks 'clean', 'build'
jar.dependsOn(createResourceBundle)


/***************************************************************************************
 * Extend clean
 ***************************************************************************************/
clean {
	doFirst {
		delete "${rootDirectory}/bin/"
		delete "${rootDirectory}/build-eclipse/"		
		delete "${rootDirectory}/logs/"
		delete "${rootDirectory}/temp/"
	}
}


/**
 * Create the package path
 */
ext.createPackagePath = { basePath, packageName ->
	def slashedRootPackageName = packageName.replace('.', '/')
	def buildJavaSourcPath = basePath;
	String[] s = slashedRootPackageName.split('/')
	for (int i = 0; i<s.length; i++) {
		buildJavaSourcPath += "/" + s[i]
		new File(buildJavaSourcPath).mkdirs()
	}

	return buildJavaSourcPath;
}


/****************************************************************************************
 * Defines the api configuration
 *
 * https://docs.gradle.org/current/userguide/declaring_dependencies.html
 * https://docs.gradle.org/current/userguide/declaring_dependencies.html
 * https://docs.gradle.org/current/userguide/java_plugin.html#tab:configurations
 * https://reflectoring.io/maven-scopes-gradle-configurations/
 * https://github.com/gradle/gradle/issues/1118
 * https://github.com/xvik/gradle-pom-plugin
 ****************************************************************************************/
configurations {
    //api
	implementation.extendsFrom api
 }

// modify the scope of api depdenency: workaround
publishing.publications.all {
    pom.withXml {
        asNode().dependencies.'*'.findAll() {
            it.scope.text() == 'runtime' && project.configurations.api.allDependencies.find { dep ->
                dep.name == it.artifactId.text()
            }
        }.each { it.scope*.value = 'compile'}
    }
}

task printDependencies() {
	doFirst {
		configurations.api.getAllDependencies().each { dep -> 
			logInfo("API dependency: "+dep.group + ", " + dep.name + ", " + dep.version)
		}
	}
}
clean.finalizedBy('printDependencies')


/***************************************************************************************
 * artefacts
 ***************************************************************************************/
artifacts {
	if (project.hasProperty('createJar') && project.getProperty('createJar')) {
		archives jar
	}
	
	if (project.hasProperty('createSourceJar') && project.getProperty('createSourceJar')) {
		archives sourcesJar
	}
	
	if (project.hasProperty('createJavadocJar') && project.getProperty('createJavadocJar')) {
		archives javadocJar
	}
	
	if (project.hasProperty('kubernetesSupport') && project.getProperty('kubernetesSupport')) {
		archives kubernetesJar
	}

	if (project.hasProperty('createCustomJar') && project.getProperty('createCustomJar')) {
		archives customJar
	}
}


/***************************************************************************************
 * source generation folder
 ***************************************************************************************/
if (project.hasProperty('generatedCommonGradleBuildSources') && !project.getProperty('generatedCommonGradleBuildSources').isEmpty()) {
	def generatedCommonGradleBuildSources = project.getProperty('generatedCommonGradleBuildSources');
	def mainDirectoryName = project.getProperty('srcMainDirectoryName')
	sourceSets.main.java.srcDirs += "${generatedCommonGradleBuildSources}/java/${mainDirectoryName}"
	logInfo("Set source set to " + colorize(HIGHLITE_LEVEL, sourceSets.main.java.srcDirs))

	def size = sourceSets.main.resources.srcDirs.size()
	if (size>0 && supportMultipleResourceFolder) {
		sourceSets.main.resources.srcDirs += "${generatedCommonGradleBuildSources}/resources/${mainDirectoryName}"
		logInfo("Set resources set to " + colorize(HIGHLITE_LEVEL, sourceSets.main.resources.srcDirs))
	} else {
		//ext.generatedCommonGradleBuildSources=sourceSets.main.resources.srcDirs.iterator().next()
		//def count = new File("${generatedCommonGradleBuildSources}/resources/${mainDirectoryName}").listFiles().count { it.name ==~ /.*s/ }
	}
}


/***************************************************************************************
 * Prepare compile options
 ***************************************************************************************/
tasks.withType(JavaCompile) {
	doFirst {
		def mainDirectoryName = project.getProperty('srcMainDirectoryName')
		if (destinationDir.getName().endsWith(mainDirectoryName)) {

			// create common gradle build java source path
			createGenerateCommonGradleBuildJavaSourcePath()

			// create java version
			createJavaVersion()
		} else {
		    logInfo("Ignore:" + destinationDir.getName())
		}
	}
}


/*
  see https://discuss.gradle.org/t/proper-strategies-for-generating-sources-and-compiling-generated-and-non-generated-code-together/7252/4
compileJava {
    dependsOn processXSDs
	doLast {
		def generatedCommonGradleBuildJavaSourcPath = project.getProperty('generatedCommonGradleBuildJavaSources')
		source generatedCommonGradleBuildJavaSourcPath
	}
}
*/


/***************************************************************************************
 * project java validation
 ***************************************************************************************/
projectValidation {
	doFirst {
		createJavaSourcePath()
	}
}


/**
 * Create java source path
 */
ext.createJavaSourcePath = { ->
	createSourcePath()

	if (project.hasProperty('srcMainJavaDirectory')) {
		def srcMainJavaDirectory = project.getProperty('srcMainJavaDirectory')
		if (srcMainJavaDirectory!=null && !srcMainJavaDirectory.isEmpty()) {
			logInfo("Check Java source and test folders...")
			setCommonGradleProperty('createSrcMainJavaDirectory', !new File(srcMainJavaDirectory).exists())
			setCommonGradleProperty('createSrcTestJavaDirectory', !new File(srcTestJavaDirectory).exists())
			setCommonGradleProperty('createSrcMainResourcesDirectory', !new File(srcMainResourcesDirectory).exists())
			setCommonGradleProperty('createSrcTestResourcesDirectory', !new File(srcTestResourcesDirectory).exists())

			if (project.hasProperty('srcMainJavaDirectory') && !new File(srcMainJavaDirectory).exists()) {
				printInfo("> Create directory " + colorize(HIGHLITE_LEVEL, srcMainJavaDirectory) + ".")
				if (new File(srcMainJavaDirectory ).mkdirs()
					|| new File(srcMainJavaDirectory + '/' + projectRootPackageName.replace('.', '/')).mkdirs()) {
					setCommonGradleProperty('IS_NEW_SRC_FOLDER', true)
				}
			}

			if (project.hasProperty('srcMainResourcesDirectory') && !new File(srcMainResourcesDirectory).exists()) {
				printInfo("> Create directory " + colorize(HIGHLITE_LEVEL, srcMainResourcesDirectory) + ".")
				new File(srcMainResourcesDirectory).mkdir()
			}

			if (project.hasProperty('srcTestJavaDirectory') && !new File(srcTestJavaDirectory).exists()) {
				printInfo("> Create directory " + colorize(HIGHLITE_LEVEL, srcTestJavaDirectory) + ".")
				if (new File(srcTestJavaDirectory).mkdirs()
					|| new File(srcTestJavaDirectory + '/' + projectRootPackageName.replace('.', '/')).mkdirs()) {
					setCommonGradleProperty('IS_NEW_SRC_FOLDER', true)
				}
			}

			if (project.hasProperty('srcTestResourcesDirectory') && !new File(srcTestResourcesDirectory).exists()) {
				printInfo("> Create directory " + colorize(HIGHLITE_LEVEL, srcTestResourcesDirectory) + ".")
				new File(srcTestResourcesDirectory).mkdir()
			}
		}
	}

	createGenerateCommonGradleBuildJavaSourcePath()
	if (sourceCompatibility!=null && !sourceCompatibility.toString().isEmpty() && targetCompatibility!=null && !targetCompatibility.toString().isEmpty()) {
		def sourceVersion = parseVersion(sourceCompatibility)
		def targetVersion = parseVersion(targetCompatibility)
		if (sourceVersion!=null && targetVersion!=null && !targetVersion.isCompatibleWith(sourceVersion)) {
			printInfo("The target (" + colorize(HIGHLITE_LEVEL, targetCompatibility) + ") is not compatible with the source (" + colorize(HIGHLITE_LEVEL, sourceCompatibility) + ") compatibility!")
		}
	}
}


/**
 * Create generated common gradle build java source path
 */
ext.createGenerateCommonGradleBuildJavaSourcePath = { ->
	def mainDirectoryName = project.getProperty('srcMainDirectoryName')
	def generatedCommonGradleBuildJavaSources = project.getProperty('generatedCommonGradleBuildSources');
	new File(generatedCommonGradleBuildJavaSources).mkdirs()
	generatedCommonGradleBuildJavaSources += "/java"
	new File(generatedCommonGradleBuildJavaSources).mkdirs()
	generatedCommonGradleBuildJavaSources += "/" + mainDirectoryName
	new File(generatedCommonGradleBuildJavaSources).mkdirs()
	setCommonGradleDefaultPropertyIfNull("generatedCommonGradleBuildJavaSources", generatedCommonGradleBuildJavaSources)
	logInfo("Generate java source directory is [" + colorize(HIGHLITE_LEVEL, generatedCommonGradleBuildJavaSources) + colorize(INFO_LEVEL, "]"))

	def generatedCommonGradleBuildResourcesSources = project.getProperty('generatedCommonGradleBuildSources');
	generatedCommonGradleBuildResourcesSources += "/resources"
	new File(generatedCommonGradleBuildResourcesSources).mkdirs()
	generatedCommonGradleBuildResourcesSources += "/" + mainDirectoryName
	new File(generatedCommonGradleBuildResourcesSources).mkdirs()
	setCommonGradleDefaultPropertyIfNull("generatedCommonGradleBuildResourcesSources", generatedCommonGradleBuildResourcesSources)
	logInfo("Generate resources source directory is [" + colorize(HIGHLITE_LEVEL, generatedCommonGradleBuildResourcesSources) + colorize(INFO_LEVEL, "]"))

	// create path in generated source
	def generatedCommonGradleBuildJavaSourcPath = createPackagePath(generatedCommonGradleBuildJavaSources, projectRootPackageName)
	setCommonGradleDefaultPropertyIfNull("generatedCommonGradleBuildJavaSourcPath", generatedCommonGradleBuildJavaSourcPath)
}

