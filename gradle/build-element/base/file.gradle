/*
 * file.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */


if (!project.hasProperty('commonGradleBuildUrl')) {
    ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}


/***************************************************************************************
 * basic groovy imports
 ***************************************************************************************/
apply from: "${commonGradleBuildElementPath}/base/propertyreplacement.gradle"


/** 
 * Get common gradle build temp path
 */
ext.getCommonGradleBuildTempPath = { subPath=null ->
	def tempBaseFolder="${System.properties['java.io.tmpdir'].replace('\\', '/')}"
	if (!tempBaseFolder.toString().endsWith("/")) {
		tempBaseFolder="${tempBaseFolder}/"
	}
	
	def localUsername = ("" + System.properties['user.name']).toString().replace(' ', '_')
	tempBaseFolder="${tempBaseFolder}cgb-" + localUsername
	
	if (subPath!=null && !subPath.toString().trim().isEmpty()) {
		tempBaseFolder="${tempBaseFolder}/${subPath}"
	}
	
	new File(tempBaseFolder).mkdirs()
	return tempBaseFolder;
}


/** 
 * Get unique temp name
 */
ext.getUniqueTempName = { prefix="cgb", appendix="", extension=".tmp" ->
	def uniqueTempName=getCommonGradleBuildTempPath()
	
	if (!uniqueTempName.toString().endsWith("/")) {
		uniqueTempName="${uniqueTempName}/"
	}

	if (prefix!=null && !prefix.toString().trim().isEmpty()) {
		uniqueTempName="${uniqueTempName}${prefix}-"
	}

	def randomNumber=Math.abs(new Random().nextInt() % 1000000) + 1
	uniqueTempName="${uniqueTempName}" + randomNumber

	if (appendix!=null && !appendix.toString().trim().isEmpty()) {
		uniqueTempName="${uniqueTempName}-${appendix}"
	}

	if (extension!=null && !extension.toString().trim().isEmpty()) {
		uniqueTempName="${uniqueTempName}${extension}"
	}

	return uniqueTempName;
}
 
 
/** 
 * Get filename only
 */
ext.getFilename = { inputFilename ->
	if (inputFilename==null || inputFilename.toString().isEmpty()) {
		return ""
	}
	
	String name = inputFilename.toString().replace('\\', '/')
	return name.substring(name.lastIndexOf("/") + 1, name.length());	
}


/** 
 * Get filepath only
 */
ext.getFilePath = { inputFilename ->
	if (inputFilename==null || inputFilename.isEmpty()) {
		return ""
	}
	
	String name = inputFilename.replace('\\', '/')
	return name.substring(0, name.lastIndexOf("/") + 1);	
}


/** 
 * Count lines in a file
 */
ext.countLines = { inputFilename, lineFilter = null ->
    def lines = 0;
	if (inputFilename==null || "${inputFilename}".isEmpty()) {
		return lines;
	}
	
    File file = new File(inputFilename);
	if (!file.exists()) {
		return lines;
	}

	if (!file.canRead()) {
		return -1;
	}

	double fileSize = file.length();
	def totalRead = 0
	java.io.BufferedReader bufferedReader = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), "iso-8859-1"));

    try {
        while (bufferedReader.ready()) {
            String line = bufferedReader.readLine();
			
			if (lineFilter!=null && !lineFilter.toString().trim().isEmpty()) {
				if (line.indexOf(lineFilter.toString())>=0) {
					lines++
				}
			} else {
				lines++
			}
			
            totalRead += line.length() + 1; // we add +1 byte for the newline char.
            // println("Progress ===> " + ((totalRead / fileSize) * 100) + " %");
        }
    } finally {
        bufferedReader.close();
    }
	
	return lines
}


/** 
 * Create file from template
 */
ext.createFileFromTemplate = { inputFilename, inputTemplateFilename, overwrite = true, print = true, replacePlaceHolders = true, newLine = System.getProperty("line.separator") ->
	if (inputFilename==null || inputFilename.isEmpty()) {
		logDebug("Empty input filename.")
		return false
	}

	if (inputTemplateFilename==null || inputTemplateFilename.isEmpty() || !project.hasProperty('commonGradleTemplatePath') || !project.hasProperty('commonGradleTemplatePathName')) {
		logDebug("Empty template filename.")
		return false
	}

	String templateFilename = getFilename(inputTemplateFilename);
	String templateSubPath = getFilePath(inputTemplateFilename);
	if (templateSubPath!=null && !templateSubPath.isEmpty()) {
		templateSubPath = "/" + templateSubPath
	} else {
		templateSubPath = ""
	}

	def theTemplatePath = project.getProperty('commonGradleTemplatePath')
	if (project.hasProperty('commonGradleBuildHome') ) {
		def commonGradleBuildHome = project.getProperty('commonGradleBuildHome')
		if (commonGradleBuildHome!=null && !"${commonGradleBuildHome}".isEmpty() && new File(commonGradleBuildHome).exists()) {
			def homeTemplatePath = commonGradleBuildHome + "/gradle/" + project.getProperty('commonGradleTemplatePathName')
			if (new File(homeTemplatePath+"/"+inputTemplateFilename).exists()) {
				theTemplatePath = homeTemplatePath
			}
		}
	}
	
	if (!new File(theTemplatePath+"/"+inputTemplateFilename).exists()) {
		logDebug("Could not found template file [${theTemplatePath}/${inputTemplateFilename}].")
		return false
	}

	return createFileFromTemplatePath( inputFilename, theTemplatePath, templateSubPath, templateFilename, overwrite, print, replacePlaceHolders, newLine)
}


/** 
 * Create file from template path
 */
ext.createFileFromTemplatePath = { inputFilename, theTemplatePath, templateSubPath, templateFilename, overwrite = true, print = true, replacePlaceHolders = true, newLine = System.getProperty("line.separator") ->
	if (inputFilename==null || inputFilename.isEmpty()) {
		logDebug("Empty input filename.")
		return false
	}

	if (templateFilename==null || templateFilename.isEmpty()) {
		logDebug("Empty template filename.")
		return false
	}

	String filename = getFilename(inputFilename);
	String filePath = getFilePath(inputFilename);
	if (filePath!=null && new File(filePath).exists()) {
	} else if (filePath!=null && !new File(filePath).exists()) {
		logDebug("Create " + colorize(HIGHLITE_LEVEL, filePath) + colorize(INFO_LEVEL, "."))
		new File("${project.rootDir}/${filePath}").mkdirs()
	} else {
		filePath = project.ext.rootDirectory + "/"
	}

	if (new File("${theTemplatePath}${templateSubPath}", "${templateFilename}").exists()) {
		if (new File(inputFilename).exists() && !overwrite) {
			logDebug("File " + colorize(HIGHLITE_LEVEL, path) + colorize(INFO_LEVEL, " exist, don't overwrite."))
			return false
		}
	
		if (print) {		
			printInfo("> Create " + colorize(HIGHLITE_LEVEL, "${filename}") + " from template " + colorize(HIGHLITE_LEVEL, "${templateSubPath}${templateFilename}") + ".")
		}		
		logInfo("Create " + colorize(HIGHLITE_LEVEL, "${filePath}${filename}") + colorize(INFO_LEVEL, " from template ") + colorize(HIGHLITE_LEVEL, "${templateSubPath}${templateFilename}") + colorize(INFO_LEVEL, " (") + colorize(HIGHLITE_LEVEL, "${theTemplatePath}") + colorize(INFO_LEVEL, ")."))
		
		File inputFile = new File("${theTemplatePath}${templateSubPath}/${templateFilename}")
		File outputFile = new File("${filePath}/${filename}")
		if (overwrite && outputFile.exists()) {
			outputFile.delete()
		}

		try {			
			inputFile.withReader {
				def line
				while ((line = it.readLine()) != null) {
					if (replacePlaceHolders) {
						outputFile.append(searchReplaceByProperties(line) + newLine)
					} else {
						outputFile.append(line + newLine)
					}
				}
			}
		} catch (Exception e) {
			printWarn("Could not process file " + inputFile.getName() + ": " + e.getMessage())
			throw e
		}			
		
		return true
	} else {
		logDebug("Template file ${theTemplatePath}${templateSubPath}${templateFilename} don't exist.")
		return false
	}
}


/** 
 * Copy a file
 
 * fileToCopy contains the filename and path
 * fileDest contains the filename and path
 */
ext.copyFile = { fileToCopy, fileDest, overwrite = false ->
	if (fileToCopy==null || "${fileToCopy}".isEmpty()) {
		return false
	}
	if (fileDest==null || "${fileDest}".isEmpty()) {
		return false
	}

	String srcFilename = getFilename(fileToCopy);
	String srcFilePath = getFilePath(fileToCopy);
	if (srcFilePath==null || !new File(srcFilePath).exists() || !new File("${srcFilePath}/${srcFilename}").exists()) {
		printWarn("Could not find file " + colorize(HIGHLITE_LEVEL, fileToCopy) + colorize(INFO_LEVEL, "."))
		return false
	}

	String destFilename = getFilename(fileDest);
	String destFilePath = getFilePath(fileDest);
	if (destFilePath!=null && !new File(destFilePath).exists()) {
		logInfo("Create " + colorize(HIGHLITE_LEVEL, destFilePath) + colorize(INFO_LEVEL, "."))
		if (!new File(destFilePath).mkdirs()) {
			printWarn("Could not create path " + colorize(HIGHLITE_LEVEL, destFilePath) + ".")
			return false
		}
	}
	
	if (overwrite || !new File("${destFilePath}/${destFilename}").exists()) {
		if ("${srcFilename}".equals("${destFilename}")) {
			// just copy
			logInfo("Copy file " + colorize(HIGHLITE_LEVEL, "${srcFilePath}/${srcFilename}") + colorize(INFO_LEVEL, " to ") + colorize(HIGHLITE_LEVEL, "${destFilePath}/${destFilename}") + colorize(INFO_LEVEL, ".") )
			copy { from "${srcFilePath}" include "${srcFilename}" into "${destFilePath}" } 
			return true
		} else {
			// copy and rename
			logInfo("Copy and rename file " + colorize(HIGHLITE_LEVEL, "${srcFilePath}/${srcFilename}") + colorize(INFO_LEVEL, " to ") + colorize(HIGHLITE_LEVEL, "${destFilePath}/${destFilename}") + colorize(INFO_LEVEL, ".") )
			copy { from "${srcFilePath}" include "${srcFilename}" into "${destFilePath}" rename { String fileName -> fileName.replace("${srcFilename}", "${destFilename}") } }
			return true
		}
	}

	return false
}


/** 
 * Read properties file: gradle.properties, application.properties
 */
ext.readPropertiesFile = { inputFile ->
	def properties = new Properties()
	if (inputFile!=null && !"${inputFile}".isEmpty()) {
		logInfo("Read properties file " + colorize(HIGHLITE_LEVEL, inputFile) + colorize(INFO_LEVEL, "."))
		File file = new File(inputFile);
		if (file.exists() && file.canRead()) {
			file.withInputStream { properties.load(it) }
		}
	} else {
		logInfo("Could not read properties file.")
	}
	
	return properties
}


/** 
 * Read the gradle properties file
 */
ext.readGradlePropertiesFile = { 
	return readPropertiesFile(gradlePropertiesFile)
}


/** 
 * Read application properties file
 */
ext.readApplicationPropertiesFile = { inputFile = "${srcMainResourcesDirectory}/application.properties", filterProd = true ->
	Properties properties = readPropertiesFile(inputFile)
	Properties result = properties
	
	if (filterProd) {
		result = new Properties()
		logInfo("Filter prod properties in file " + colorize(HIGHLITE_LEVEL, inputFile) + colorize(INFO_LEVEL, "."))
		
		Enumeration e = properties.propertyNames();
		while(e.hasMoreElements()) {
			String key = (String)e.nextElement();
			
			if (filterProd) {
				if (!key.startsWith("%dev.") && !key.startsWith("%test.")) {
					String newKey = key;
					if (newKey.startsWith("%prod.")) {
						newKey = key.substring(6)
					}
					
					result.setProperty(newKey, properties.getProperty(key))
				}
			} else {
					result.setProperty(newKey, properties.getProperty(key))
			}
		}	
	}
	
	return result
}
