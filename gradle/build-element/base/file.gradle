/*
 * file.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */

 
/** 
 * Get filename only
 */
ext.getFilename = { inputFilename ->
	if (inputFilename==null || inputFilename.isEmpty()) {
		return ""
	}
	
	String name = inputFilename.replace('\\', '/')
	return name.substring(name.lastIndexOf("/") + 1, name.length());	
}


/** 
 * Get filepath only
 */
ext.getFilePath = { inputFilename ->
	if (inputFilename==null || inputFilename.isEmpty()) {
		return ""
	}
	
	String name = inputFilename.replace('\\', '/')
	return name.substring(0, name.lastIndexOf("/") + 1);	
}


/** 
 * Count lines in a file
 */
ext.countLines = { inputFilename ->
    def lines = 0;
	if (inputFilename==null || "${inputFilename}".isEmpty()) {
		return lines;
	}
	
    File file = new File(inputFilename);
	if (!file.exists()) {
		return lines;
	}

	if (!file.canRead()) {
		return -1;
	}

	double fileSize = file.length();
	def totalRead = 0
	java.io.BufferedReader bufferedReader = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), "iso-8859-1"));

    try {
        while (bufferedReader.ready()) {
            String line = bufferedReader.readLine();
			lines++
            totalRead += line.length() + 1; // we add +1 byte for the newline char.
            // println("Progress ===> " + ((totalRead / fileSize) * 100) + " %");
        }
    } finally {
        bufferedReader.close();
    }
	
	return lines
}


/** 
 * Create file from template
 */
ext.createFileFromTemplate = { inputFilename, inputTemplateFilename, overwrite = true, print = true ->
	if (inputFilename==null || inputFilename.isEmpty()) {
		logDebug("Empty input filename.")
		return false
	}

	if (inputTemplateFilename==null || inputTemplateFilename.isEmpty() || !project.hasProperty('commonGradleTemplatePath') || !project.hasProperty('commonGradleTemplatePathName')) {
		logDebug("Empty template filename.")
		return false
	}

	String templateFilename = getFilename(inputTemplateFilename);
	String templateSubPath = getFilePath(inputTemplateFilename);
	if (templateSubPath!=null && !templateSubPath.isEmpty()) {
		templateSubPath = "/" + templateSubPath
	} else {
		templateSubPath = ""
	}

	def theTemplatePath = project.getProperty('commonGradleTemplatePath')
	if (project.hasProperty('commonGradleBuildHome') ) {
		def commonGradleBuildHome = project.getProperty('commonGradleBuildHome')
		if (commonGradleBuildHome!=null && !"${commonGradleBuildHome}".isEmpty() && new File(commonGradleBuildHome).exists()) {
			def homeTemplatePath = commonGradleBuildHome + "/gradle/" + project.getProperty('commonGradleTemplatePathName')
			if (new File(homeTemplatePath+"/"+inputTemplateFilename).exists()) {
				theTemplatePath = homeTemplatePath
			}
		}
	}
	
	if (!new File(theTemplatePath+"/"+inputTemplateFilename).exists()) {
		logDebug("Could not found template file.")
		return false
	}
	
	String filename = getFilename(inputFilename);
	String filePath = getFilePath(inputFilename);
	if (filePath!=null && new File(filePath).exists()) {
	} else if (filePath!=null && !new File(filePath).exists()) {
		logDebug("Create " + colorize(HIGHLITE_LEVEL, filePath) + colorize(INFO_LEVEL, "."))
		new File(filePath).mkdirs()
	} else {
		filePath = project.ext.rootDirectory + "/"
	}

	if (new File("${theTemplatePath}${templateSubPath}", "${templateFilename}").exists()) {
		if (new File(inputFilename).exists() && !overwrite) {
			logDebug("File " + colorize(HIGHLITE_LEVEL, path) + colorize(INFO_LEVEL, " exist, don't overwrite."))
			return
		}
	
		if (print) {		
			printInfo("> Create " + colorize(HIGHLITE_LEVEL, "${filePath}${filename}") + " from template ${templateSubPath}${templateFilename}.")
		} else {
			logInfo("Create " + colorize(HIGHLITE_LEVEL, "${filePath}${filename}") + colorize(INFO_LEVEL, " from template ${templateSubPath}${templateFilename} (${theTemplatePath})."))
		}
		
		copy {
			from "${theTemplatePath}${templateSubPath}"
			include "${templateFilename}"
			into "${filePath}"
			rename { String fileName -> fileName.replace(templateFilename, filename) }
			filter { line -> line.replaceAll('@@PROJECT_NAME@@', "${rootProject.name}".toString()) }
			filter { line -> line.replaceAll('@@PROJECT_TYPE@@', "${project.ext.projectType}".toString()) }
			filter { line -> line.replaceAll('@@GROUP_ID@@', "${project.ext.projectGroupId}".toString()) }
			filter { line -> line.replaceAll('@@COMPONENT_ID@@', "${project.ext.projectComponentId}".toString()) }
			filter { line -> line.replaceAll('@@PACKAGE@@', "${project.ext.projectRootPackageName}".toString()) }
			filter { line -> line.replaceAll('@@DESCRIPTION@@', "${project.ext.projectDescription}".toString()) }
			filter { line -> line.replaceAll('@@URL@@', "${project.ext.projectUrl}".toString()) }
			filter { line -> line.replaceAll('@@LICENSE@@', "${project.ext.licenseText}".toString()) }
			filter { line -> line.replaceAll('@@LICENSE_ORGANISATION@@', "${project.ext.licenseOrganisation}".toString()) }			
			filter { line -> line.replaceAll('@@MAJOR_NUMBER@@', "${project.ext.majorVersionNumber}".toString()) }
			filter { line -> line.replaceAll('@@MINOR_NUMBER@@', "${project.ext.minorVersionNumber}".toString()) }
			filter { line -> line.replaceAll('@@REVISION_NUMBER@@', "${project.ext.revisionVersionNumber}".toString()) }
			filter { line -> line.replaceAll('@@MICRO_NUMBER@@', "${project.ext.revisionVersionNumber}".toString()) }
			filter { line -> line.replaceAll('@@QUALIFIER@@', "${project.ext.qualifierVersionNumber}".toString()) }
			filter { line -> line.replaceAll('@@SCM_NUMBER@@', "${project.ext.scmVersionNumber}".toString()) }
			filter { line -> line.replaceAll('@@BUILD_TIMESTAMP@@', "${project.ext.BUILD_TIMESTAMP}".toString()) }
			filter { line -> line.replaceAll('@@BUILD_TIMESTAMP_SHORT@@', "${project.ext.BUILD_TIMESTAMP_SHORT}".toString()) }
			filter { line -> line.replaceAll('@@DATE@@', "${DATE}".toString()) }
			filter { line -> line.replaceAll('@@YEAR@@', "${YEAR}".toString()) }
			filter { line -> line.replaceAll('@@IS_RELEASE_VERSION@@', "${project.ext.isReleaseVersion}".toString()) }
			filter { line -> line.replaceAll('@@VERSION@@', "${project.version}".toString()) }
			filter { line -> line.replaceAll('@@LINE@@', "${LINE}".toString()) }
			filter { line -> line.replaceAll('@@STAR_LINE@@', "${STAR_LINE}".toString()) }			
			filter { line -> line.replaceAll('@@COMMON_GRADLE_BUILD_URL@@', "${defaultCommonGradleBuildUrl}".toString()) }
			
			filter { line -> line.replaceAll('@@sourceCompatibility@@', "${project.ext.sourceCompatibility}".toString()) }
			filter { line -> line.replaceAll('@@targetCompatibility@@', "${project.ext.targetCompatibility}".toString()) }

			// main source
			if (project.hasProperty('srcMainDirectoryName')) {
				filter { line -> line.replaceAll('@@MAIN@@', "${project.ext.srcMainDirectoryName}".toString()) }
			}						
			if (project.hasProperty('srcMainDirectory')) {
				filter { line -> line.replaceAll('@@SRC_MAIN@@', "${project.ext.srcMainDirectory}".toString()) }
			}
			
			// test source
			if (project.hasProperty('srcTestDirectoryName')) {			
				filter { line -> line.replaceAll('@@TEST@@', "${srcTestDirectoryName}".toString()) }
			}						
			if (project.hasProperty('srcTestDirectory')) {			
				filter { line -> line.replaceAll('@@SRC_TEST@@', "${srcTestDirectory}".toString()) }
			}

			// genereated source
			if (project.hasProperty('generatedCommonGradleBuildJavaSources')) {			
				filter { line -> line.replaceAll('@@SRC_GEN_MAIN@@', "${generatedCommonGradleBuildJavaSources}".toString()) }
			}
			if (project.hasProperty('generatedCommonGradleBuildResourcesSources')) {			
				filter { line -> line.replaceAll('@@SRC_GEN_RESOURCES@@', "${generatedCommonGradleBuildResourcesSources}".toString()) }
			}

			// checkstyle
			def checkstyleConfigurationNameToSet = "${rootProject.name}"
			if (project.hasProperty('checkstyleConfigurationName')) {
				checkstyleConfigurationNameToSet = project.getProperty('checkstyleConfigurationName')
			}
			filter { line -> line.replaceAll('@@CHECKSTYLE_CONFIGURATION_NAME@@', "${checkstyleConfigurationNameToSet}".toString()) }
			if (project.hasProperty('runtimeCheckstyleConfigurationPath')) {			
				filter { line -> line.replaceAll('@@CHECKSTYLE_CONFIGURATION_PATH@@', "${runtimeCheckstyleConfigurationPath}".toString()) }
			}
			if (project.hasProperty('checkstyleToolVersion')) {
				filter { line -> line.replaceAll('@@checkstyleToolVersion@@', "${project.ext.checkstyleToolVersion}".toString()) }
			} else {
				filter { line -> line.replaceAll('@@checkstyleToolVersion@@', "${project.ext.checkstyleToolDefaultVersion}".toString()) }
			}
	
			if (project.hasProperty('testDependencyVersion')) {
				filter { line -> line.replaceAll('@@testDependencyVersion@@', "${project.ext.testDependencyVersion}".toString()) }
			}
			
			if (project.hasProperty('gradlePropertiesJvmArgs')) {
				filter { line -> line.replaceAll('@@GRADLE_JVM_ARG@@', "${project.ext.gradlePropertiesJvmArgs}".toString()) }
			}
			if (project.hasProperty('gradlePropertiesLogLevel')) {
				filter { line -> line.replaceAll('@@GRADLE_LOG_LEVEL@@', "${project.ext.gradlePropertiesLogLevel}".toString()) }
			}
			if (project.hasProperty('gradlePropertiesConsole')) {
				filter { line -> line.replaceAll('@@GRADLE_CONSOLE@@', "${project.ext.gradlePropertiesConsole}".toString()) }
			}
			if (project.hasProperty('gradlePropertiesWarningMode')) {
				filter { line -> line.replaceAll('@@GRADLE_WARNING_MODE@@', "${project.ext.gradlePropertiesWarningMode}".toString()) }
			}
			if (project.hasProperty('quarkusPluginVersion')) {
				filter { line -> line.replaceAll('@@QUARKUS_PLUGIN_VERSION@@', "${project.ext.quarkusPluginVersion}".toString()) }
			}
			if (project.hasProperty('nodePluginVersion')) {
				filter { line -> line.replaceAll('@@NODE_PLUGIN_VERSION@@', "${project.ext.nodePluginVersion}".toString()) }
			}
			if (project.hasProperty('openapiPluginVersion')) {
				filter { line -> line.replaceAll('@@OPENAPI_PLUGIN_VERSION@@', "${project.ext.openapiPluginVersion}".toString()) }
			}
			
			if (project.hasProperty('className')) {
				filter { line -> line.replaceAll('@@className@@', "${project.ext.className}".toString()) }
			}
			if (project.hasProperty('classNameUnderTest')) {
				filter { line -> line.replaceAll('@@classNameUnderTest@@', "${project.ext.classNameUnderTest}".toString()) }
			}
			if (project.hasProperty('fileName')) {
				filter { line -> line.replaceAll('@@fileName@@', "${project.ext.fileName}".toString()) }
			}
			if (project.hasProperty('packageName')) {
				filter { line -> line.replaceAll('@@packageName@@', "${project.ext.packageName}".toString()) }
			}
		}
				
		return true
	} else {
		logDebug("Template file ${theTemplatePath}/${inputTemplateFilename} don't exist.")
		return false
	}
}


/** 
 * Copy a file
 
 * fileToCopy contains the filename and path
 * fileDest contains the filename and path
 */
ext.copyFile = { fileToCopy, fileDest, overwrite = false ->
	if (fileToCopy==null || "${fileToCopy}".isEmpty()) {
		return false
	}
	if (fileDest==null || "${fileDest}".isEmpty()) {
		return false
	}

	String srcFilename = getFilename(fileToCopy);
	String srcFilePath = getFilePath(fileToCopy);
	if (srcFilePath==null || !new File(srcFilePath).exists() || !new File("${srcFilePath}/${srcFilename}").exists()) {
		printWarn("> Could not find file " + colorize(HIGHLITE_LEVEL, fileToCopy) + colorize(INFO_LEVEL, "."))
		return false
	}

	String destFilename = getFilename(fileDest);
	String destFilePath = getFilePath(fileDest);
	if (destFilePath!=null && !new File(destFilePath).exists()) {
		logInfo("Create " + colorize(HIGHLITE_LEVEL, destFilePath) + colorize(INFO_LEVEL, "."))
		if (!new File(destFilePath).mkdirs()) {
			printWarn("> Could not create path " + colorize(HIGHLITE_LEVEL, destFilePath) + ".")
			return false
		}
	}
	
	if (overwrite || !new File("${destFilePath}/${destFilename}").exists()) {
		if ("${srcFilename}".equals("${destFilename}")) {
			// just copy
			logInfo("Copy file " + colorize(HIGHLITE_LEVEL, "${srcFilePath}/${srcFilename}") + colorize(INFO_LEVEL, " to ") + colorize(HIGHLITE_LEVEL, "${destFilePath}/${destFilename}") + colorize(INFO_LEVEL, ".") )
			copy { from "${srcFilePath}" include "${srcFilename}" into "${destFilePath}" } 
			return true
		} else {
			// copy and rename
			logInfo("Copy and rename file " + colorize(HIGHLITE_LEVEL, "${srcFilePath}/${srcFilename}") + colorize(INFO_LEVEL, " to ") + colorize(HIGHLITE_LEVEL, "${destFilePath}/${destFilename}") + colorize(INFO_LEVEL, ".") )
			copy { from "${srcFilePath}" include "${srcFilename}" into "${destFilePath}" rename { String fileName -> fileName.replace("${srcFilename}", "${destFilename}") } }
			return true
		}
	}

	return false
}
