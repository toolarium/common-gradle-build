/*
 * defaults.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */


/***************************************************************************************
 * gradle cache and home properties file
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("userHomeDirectory", System.properties['user.home'].replace('\\', '/'))
if ("windows" == getOsName()) {
	setCommonGradleDefaultPropertyIfNull("userHomeDirectory", '%USERPROFILE%/')
} else {
	setCommonGradleDefaultPropertyIfNull("userHomeDirectory", '~/')
}

setCommonGradleDefaultPropertyIfNull("snakeYamlVersion", "1.29")
setCommonGradleDefaultPropertyIfNull("grgitCoreVersion", "4.1.1")
setCommonGradleDefaultPropertyIfNull("jsurferVersion", "1.6.3")
setCommonGradleDefaultPropertyIfNull("semver4jVersion", "3.1.0")
setCommonGradleDefaultPropertyIfNull("gradleWrapperDefaultVersion", "8.5")
setCommonGradleDefaultPropertyIfNull("gradleHome", "$userHomeDirectory/.gradle")
setCommonGradleDefaultPropertyIfNull("gradleHomePropertiesFile", "$gradleHome/gradle.properties")
setCommonGradleDefaultPropertyIfNull("defaultCommonGradleBuildUrl", "https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle/common.gradle")
setCommonGradleDefaultPropertyIfNull("commonGradleBuildReleasesUrl", "https://api.github.com/repos/toolarium/common-gradle-build/releases")
setCommonGradleDefaultPropertyIfNull("commonGradleBuildReleasesPreRelease", false)
setCommonGradleDefaultPropertyIfNull("commonGradleBuildReleaseVersion", "")
setCommonGradleDefaultPropertyIfNull("commonGradleBuildGitUrl", "https://github.com/toolarium/common-gradle-build.git")
setCommonGradleDefaultPropertyIfNull("commonGradleBuildHomeGitUrl", "")
setCommonGradleDefaultPropertyIfNull("commonGradleBuildHomeVersionFileUrl", "")
setCommonGradleDefaultPropertyIfNull("commonGradleBuildCustomConfigName", "Custom Config")


/***************************************************************************************
 * set project validation patterns
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("projectNameRegularExpressionPattern", '^[a-zA-Z0-9\\-]+$')
setCommonGradleDefaultPropertyIfNull("projectGroupIdRegularExpressionPattern", '^[a-zA-Z0-9\\.]+$')
setCommonGradleDefaultPropertyIfNull("projectComponentIdRegularExpressionPattern", '^[a-zA-Z0-9\\-]+$')
setCommonGradleDefaultPropertyIfNull("projectComponentIdIsPartOfProjectName", true)
setCommonGradleDefaultPropertyIfNull("projectComponentIdSeparator", "-")
setCommonGradleDefaultPropertyIfNull("projectRootPackageNamePrefix", "")
setCommonGradleDefaultPropertyIfNull("projectParentPackageElements", 1)
setCommonGradleDefaultPropertyIfNull("validateRootFiles", true)
setCommonGradleDefaultPropertyIfNull("validateRootDirectories", false)
setCommonGradleDefaultPropertyIfNull("validateProjectNameAndFolder", false)


/***************************************************************************************
 * set project type rules
 ***************************************************************************************/
 // projectNameTypeRegularExpressionPattern is used to support additional check names 
 // against a pattern. The projectNameRegularExpressionPattern builds the general name 
 // pattern, whereas the projectNameTypeRegularExpressionPattern could check patterns 
 // for specific name rules depending on the project type. Null or empty means no 
 // additional rule.
setCommonGradleDefaultPropertyIfNull("projectNameTypeRegularExpressionPattern", '')

// In normal case multiple source files is the regular case. For specific project
// types this can be used to have only a single input file.
setCommonGradleDefaultPropertyIfNull("allowMultipleSourceFiles", true)

// Define the input source file pattern. Null or empty means no pattern. In
// case of a pattern definition is made, please also adapt the 
// sampleInputSourceFileName
setCommonGradleDefaultPropertyIfNull("inputSourceFilePattern", '')

// Define the sample input source file name. Null or empty takes the default.
setCommonGradleDefaultPropertyIfNull("sampleInputSourceFileName", '')


/***************************************************************************************
 * gradle cache properties file
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("commonGradleBuildCache", "$gradleHome/common-gradle-build")
setCommonGradleDefaultPropertyIfNull("commonGradleBuildCacheLastCheckFile", "$commonGradleBuildCache/lastCheck.properties")
setCommonGradleDefaultPropertyIfNull("commonGradleBuildCacheLastCheckTimeout", 1000 * 60 * 60 * 12) // half day
setCommonGradleDefaultPropertyIfNull("mainTaskProtectExclusion", "tasks, help, wrapper, clean, projectValidation, configJar, dependencyReport, htmlDependencyReport")
setCommonGradleDefaultPropertyIfNull("duplicatesStrategy", "exclude")

/***************************************************************************************
 * base path
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("commonGradleBuildElementPath", "${commonGradleBuildUrl}/build-element")

// template directories
setCommonGradleDefaultPropertyIfNull("commonGradleTemplatePathName", "template")
setCommonGradleDefaultPropertyIfNull("commonGradleTemplatePath", "${commonGradleBuildUrl}/${commonGradleTemplatePathName}")
setCommonGradleDefaultPropertyIfNull("commonGradleTemplateBasePath", "${commonGradleTemplatePath}/base")
setCommonGradleDefaultPropertyIfNull("commonGradleTemplateCheckstylePath", "${commonGradleTemplatePath}/checkstyle")
setCommonGradleDefaultPropertyIfNull("commonGradleTemplateConfigPath", "${commonGradleTemplatePath}/config")
setCommonGradleDefaultPropertyIfNull("commonGradleTemplateEclipsePath", "${commonGradleTemplatePath}/eclipse")
setCommonGradleDefaultPropertyIfNull("commonGradleTemplateJavaPath", "${commonGradleTemplatePath}/java")
setCommonGradleDefaultPropertyIfNull("commonGradleTemplateNodeJsPath", "${commonGradleTemplatePath}/nodejs")
setCommonGradleDefaultPropertyIfNull("commonGradleTemplateQuarkusPath", "${commonGradleTemplatePath}/quarkus")
setCommonGradleDefaultPropertyIfNull("commonGradleTemplateScmPath", "${commonGradleTemplatePath}/scm")

// common gradle conf directory
setCommonGradleDefaultPropertyIfNull("commonGradleConfigPathName", "conf")
setCommonGradleDefaultPropertyIfNull("commonGradleConfigPath", "${commonGradleBuildUrl}/${commonGradleConfigPathName}")

// release properties
//setCommonGradleDefaultPropertyIfNull("releaseBaseDirectory", "")
setCommonGradleDefaultPropertyIfNull("taskNameBeforeReleaseArtefacts", "build")
setCommonGradleDefaultPropertyIfNull("copyReleaseArtefactInformation", true)
setCommonGradleDefaultPropertyIfNull("releaseAddComponentIdIntoReleasePath", true)
setCommonGradleDefaultPropertyIfNull("commonGradleBuildValidateReleaseArtefact", true)
setCommonGradleDefaultPropertyIfNull("commonGradleBuildSupportSnapshotHandling", true)
setCommonGradleDefaultPropertyIfNull("commonGradleBuildReleaseBranchName", "")
setCommonGradleDefaultPropertyIfNull("commonGradleBuildReleasePublish", true)


/***************************************************************************************
 * common project files
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("settingsGradleFile", "$rootDirectory/settings.gradle")
setCommonGradleDefaultPropertyIfNull("gradlePropertiesFile", "$rootDirectory/gradle.properties")
setCommonGradleDefaultPropertyIfNull("buildGradleFile", "$rootDirectory/build.gradle")
setCommonGradleDefaultPropertyIfNull("detectMinimalBuildGradleFile", 2)
setCommonGradleDefaultPropertyIfNull("versionFilename", "VERSION")
setCommonGradleDefaultPropertyIfNull("versionFile", "$rootDirectory/$versionFilename")
setCommonGradleDefaultPropertyIfNull("readmeFilename", "README.md")
setCommonGradleDefaultPropertyIfNull("readmeFile", "$rootDirectory/$readmeFilename")
setCommonGradleDefaultPropertyIfNull("includeReadmeFile", false)
setCommonGradleDefaultPropertyIfNull("licenseFilename", "LICENSE")
setCommonGradleDefaultPropertyIfNull("licenseFile", "$rootDirectory/$licenseFilename")
setCommonGradleDefaultPropertyIfNull("changelogFilename", "CHANGELOG.md")
setCommonGradleDefaultPropertyIfNull("changelogFile", "$rootDirectory/$changelogFilename")
setCommonGradleDefaultPropertyIfNull("editorConfigFilename", ".editorconfig")
setCommonGradleDefaultPropertyIfNull("editorConfigFile", "$rootDirectory/$editorConfigFilename")
setCommonGradleDefaultPropertyIfNull("javaVersionConfigFilename", ".java-version")
setCommonGradleDefaultPropertyIfNull("javaVersionConfigFile", "$rootDirectory/$javaVersionConfigFilename")
setCommonGradleDefaultPropertyIfNull("includeGeneratedMetaInfFiles", true)
setCommonGradleDefaultPropertyIfNull("includeLicenseFile", true)
setCommonGradleDefaultPropertyIfNull("includeVersionFile", true)
setCommonGradleDefaultPropertyIfNull("includeChangelogFile", true)
setCommonGradleDefaultPropertyIfNull("createChangelogFile", true)
setCommonGradleDefaultPropertyIfNull("validateChangelogFile", true)
setCommonGradleDefaultPropertyIfNull("changelogUpdateFileAfterRelease", true)
setCommonGradleDefaultPropertyIfNull("changelogFailOnSnapshotBuild", false);
setCommonGradleDefaultPropertyIfNull("changelogDescription", "" + NELINE
															 + "All notable changes to this project will be documented in this file." + NELINE
															 + "" + NELINE
															 + "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," + NELINE
															 + "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).")
setCommonGradleDefaultPropertyIfNull("changelogHeaderSeparator", '-');
setCommonGradleDefaultPropertyIfNull("changelogItemSeparator", '-');
setCommonGradleDefaultPropertyIfNull("changelogSupportUnreleased", true);
setCommonGradleDefaultPropertyIfNull("changelogSupportEmptySection", false);
setCommonGradleDefaultPropertyIfNull("changelogSupportBracketsAroundVersion", true);
setCommonGradleDefaultPropertyIfNull("changelogSupportReleaseLink", true);
setCommonGradleDefaultPropertyIfNull("changelogSupportReleaseInfo", true);
setCommonGradleDefaultPropertyIfNull("changelogSupportLinkInDescription", true);
setCommonGradleDefaultPropertyIfNull("changelogSupportIdListOnEndOfTheComment", true);
setCommonGradleDefaultPropertyIfNull("changelogDefaultType", ""); // FIXED
setCommonGradleDefaultPropertyIfNull("changelogDefaultComment", "Small bug fixes.");
setCommonGradleDefaultPropertyIfNull("changelogReleaseUpdateType", "SECURITY");
setCommonGradleDefaultPropertyIfNull("changelogReleaseUpdateComment", "Security updates."); //"Security updates (" + "${project.ext.BUILD_TIMESTAMP_ID}".toString().substring(0, 14) + ")."

// defines artecfacts to create
setCommonGradleDefaultPropertyIfNull("createJar", true)
setCommonGradleDefaultPropertyIfNull("createFatJar", false)
setCommonGradleDefaultPropertyIfNull("createSourceJar", true)
setCommonGradleDefaultPropertyIfNull("createJavadocJar", true)
setCommonGradleDefaultPropertyIfNull("createCustomJar", false)

// project config directory
setCommonGradleDefaultPropertyIfNull("configDirectoryName", "conf")
setCommonGradleDefaultPropertyIfNull("configDirectory", "$rootDirectory/$configDirectoryName")
setCommonGradleDefaultPropertyIfNull("configIgnoreEmptyPackages", true)
setCommonGradleDefaultPropertyIfNull("configPackages", "")
setCommonGradleDefaultPropertyIfNull("configPackageArchiveClassifier", "config")

// build directory
setCommonGradleDefaultPropertyIfNull("gradleBuildDirectory", "$rootDirectory/build")
setCommonGradleDefaultPropertyIfNull("gradleDistributionDirectoryName", "distributions")
setCommonGradleDefaultPropertyIfNull("gradleDistributionDirectory", "$gradleBuildDirectory/$gradleDistributionDirectoryName")

// .gradle directory
setCommonGradleDefaultPropertyIfNull("gradleDirectory", "$rootDirectory/.gradle")

// docs directory
setCommonGradleDefaultPropertyIfNull("includeDocsDirectoryInSource", false)
setCommonGradleDefaultPropertyIfNull("docsDirectoryName", "docs")
setCommonGradleDefaultPropertyIfNull("docsDirectory", "$rootDirectory/$docsDirectoryName")

// src directories
setCommonGradleDefaultPropertyIfNull("srcMainDirectoryName", "main")
setCommonGradleDefaultPropertyIfNull("srcTestDirectoryName", "test")
setCommonGradleDefaultPropertyIfNull("srcDirectoryName", "src")
setCommonGradleDefaultPropertyIfNull("srcDirectory", "$rootDirectory/$srcDirectoryName")
setCommonGradleDefaultPropertyIfNull("srcMainDirectory", "${srcDirectory}/${srcMainDirectoryName}")
setCommonGradleDefaultPropertyIfNull("srcTestDirectory", "${srcDirectory}/${srcTestDirectoryName}")

// resources directories
setCommonGradleDefaultPropertyIfNull("resourceDirectoryName", "resources")
setCommonGradleDefaultPropertyIfNull("srcMainResourcesDirectory", "${srcMainDirectory}/${resourceDirectoryName}")
setCommonGradleDefaultPropertyIfNull("srcTestResourcesDirectory", "${srcTestDirectory}/${resourceDirectoryName}")
setCommonGradleDefaultPropertyIfNull("supportMultipleResourceFolder", true)

// software generation settings
setCommonGradleDefaultPropertyIfNull("generatedCommonGradleSubfolderName", "generated")
setCommonGradleDefaultPropertyIfNull("generatedCommonGradleBaseBuildSources", "$gradleBuildDirectory/${generatedCommonGradleSubfolderName}/sources")
setCommonGradleDefaultPropertyIfNull("generatedCommonGradleBuildSources", "$generatedCommonGradleBaseBuildSources/common-gradle-build")

// logs directory
setCommonGradleDefaultPropertyIfNull("logsDirectoryName", "logs")
setCommonGradleDefaultPropertyIfNull("logsDirectory", "$rootDirectory/$logsDirectoryName")
setCommonGradleDefaultPropertyIfNull("createLogbackConfig", true)
setCommonGradleDefaultPropertyIfNull("logbackConfigPath", "${srcTestResourcesDirectory}")

// temp directory
setCommonGradleDefaultPropertyIfNull("tempDirectoryName", "temp")
setCommonGradleDefaultPropertyIfNull("tempDirectory", "$rootDirectory/$tempDirectoryName")

// package files
setCommonGradleDefaultPropertyIfNull("robotsFile", "robots.txt")
setCommonGradleDefaultPropertyIfNull("redirectIndexFile", "index.html")

// common gradle script directory
setCommonGradleDefaultPropertyIfNull("scriptsConfigurationPathname", "scripts")
setCommonGradleDefaultPropertyIfNull("scriptsConfigurationPath", "$gradleBuildDirectory/${scriptsConfigurationPathname}")


/***************************************************************************************
 * view init settings
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("initShowJava", true)
setCommonGradleDefaultPropertyIfNull("initShowGroovy", false)
setCommonGradleDefaultPropertyIfNull("initShowRuntime", false)
setCommonGradleDefaultPropertyIfNull("initShowPath", true)
setCommonGradleDefaultPropertyIfNull("initShowTempPath", false)
setCommonGradleDefaultPropertyIfNull("initShowScm", true)
setCommonGradleDefaultPropertyIfNull("initScmForNewProjects", true)
setCommonGradleDefaultPropertyIfNull("initScmWithNewFiles", true)
setCommonGradleDefaultPropertyIfNull("initCheckstyle", true)
setCommonGradleDefaultPropertyIfNull("initShowGradle", true)
setCommonGradleDefaultPropertyIfNull("initEclipse", true)
setCommonGradleDefaultPropertyIfNull("installGradleWrapper", true)


/***************************************************************************************
 * Use git credentials manager
 * Issue in grgit
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("scmUseCredentialManager", false)


/***************************************************************************************
 * show created artefacts
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("showCreatedArtefacts", true)


/***************************************************************************************
 * project basic settings
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("licenseOrganisation", "${rootProject.name}")
setCommonGradleDefaultPropertyIfNull("licenseText", "MIT License: https://mit-license.org")
setCommonGradleDefaultPropertyIfNull("licenseUrl", "https://mit-license.org")
setCommonGradleDefaultPropertyIfNull("projectUrl", "")
setCommonGradleDefaultPropertyIfNull("projectType", "java-library")


/***************************************************************************************
 * compile settings
 ***************************************************************************************/
//setCommonGradleDefaultPropertyIfNull("sourceCompatibility", JavaVersion.VERSION_1_8)
//setCommonGradleDefaultPropertyIfNull("targetCompatibility", JavaVersion.VERSION_1_8)
//setCommonGradleDefaultPropertyIfNull("sourceCompatibility", JavaVersion.VERSION_11)
//setCommonGradleDefaultPropertyIfNull("targetCompatibility", JavaVersion.VERSION_11)
setCommonGradleDefaultPropertyIfNull("sourceCompatibility", parseVersion("${System.properties['java.version']}"))
setCommonGradleDefaultPropertyIfNull("targetCompatibility", parseVersion("${System.properties['java.version']}"))
setCommonGradleDefaultPropertyIfNull("fileEncoding", "UTF-8")
setCommonGradleDefaultPropertyIfNull("excelFileEncoding", "UTF-8")
setCommonGradleDefaultPropertyIfNull("compileJavaFork", false)
setCommonGradleDefaultPropertyIfNull("compileJavaHome", "")


/***************************************************************************************
 * toolarium enum configuration support
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("hasToolariumEnumConfiguration", true)
setCommonGradleDefaultPropertyIfNull("toolariumEnumConfigurationVersion", "1.1.8") // in kubernetes-product.gradle there is an additional dependency
setCommonGradleDefaultPropertyIfNull("kubernetesProductEnvironmentVariableName", "kubernetes-environment-variables.properties")
setCommonGradleDefaultPropertyIfNull("kubernetesProductConfigMapEnvironmentVariableName", "kubernetes-configmap-environment-variables.properties")
setCommonGradleDefaultPropertyIfNull("kubernetesProductEnvironmentVariablePath", "kubernetes-product")
setCommonGradleDefaultPropertyIfNull("kubernetesProductEnvironmentVariableFilename", "${gradleBuildDirectory}/${kubernetesProductEnvironmentVariablePath}/${kubernetesProductEnvironmentVariableName}")
setCommonGradleDefaultPropertyIfNull("kubernetesProductConfigMapEnvironmentVariableFilename", "${gradleBuildDirectory}/${kubernetesProductEnvironmentVariablePath}/${kubernetesProductConfigMapEnvironmentVariableName}")


/***************************************************************************************
 * toolarium changelog parser support
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("toolariumChangelogParserVersion", "1.0.0")


/***************************************************************************************
 * repository settings
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("commonGradleCacheDynamicDuration", 10*60)
setCommonGradleDefaultPropertyIfNull("commonGradleCacheChangingModulesDuration", 0)
setCommonGradleDefaultPropertyIfNull("allowMavenCentralRepository", true)
setCommonGradleDefaultPropertyIfNull("allowGoogleRepository", true)

if (Integer.valueOf(gradle.gradleVersion.toString().split('\\.')[0])<7) {
    setCommonGradleDefaultPropertyIfNull("allowJCenterRepository", true)
    setCommonGradleDefaultPropertyIfNull("allowMavenCenterRepository", false)
} else {
    setCommonGradleDefaultPropertyIfNull("allowJCenterRepository", false)
    setCommonGradleDefaultPropertyIfNull("allowMavenCenterRepository", true)
}
setCommonGradleDefaultPropertyIfNull("mavenPublishUrl", "https://oss.sonatype.org/service/local/staging/deploy/maven2") // by sonatype you deploy to staging, after go to -> https://oss.sonatype.org/#stagingRepositories -> close
setCommonGradleDefaultPropertyIfNull("mavenRepositoryUrl", "https://oss.sonatype.org/content/repositories/public")
setCommonGradleDefaultPropertyIfNull("allowMavenRepository", false)
setCommonGradleDefaultPropertyIfNull("mavenStagingPublishUrl", "https://oss.sonatype.org/service/local/staging/deploy/maven2")
setCommonGradleDefaultPropertyIfNull("mavenStagingRepositoryUrl", "https://oss.sonatype.org/content/repositories/staging")
setCommonGradleDefaultPropertyIfNull("allowMavenStagingRepository", false)
setCommonGradleDefaultPropertyIfNull("mavenSnapshotPublishUrl", "https://oss.sonatype.org/content/repositories/snapshots")
setCommonGradleDefaultPropertyIfNull("mavenSnapshotRepositoryUrl", "https://oss.sonatype.org/content/repositories/snapshots")
setCommonGradleDefaultPropertyIfNull("allowMavenSnapshotRepository", true)


// use as default the sonatype repository -> url, username and password
if (!project.hasProperty('mavenUsername')) {
	if (project.hasProperty('sonatypeUsername')){
		setCommonGradleDefaultPropertyIfNull("mavenUsername", sonatypeUsername)
	} else {
		setCommonGradleDefaultPropertyIfNull("mavenUsername", System.properties['user.name'])
	}
}

if (!project.hasProperty('publishingUsername')) {
	if (project.hasProperty('mavenUsername')){
		setCommonGradleDefaultPropertyIfNull("publishingUsername", mavenUsername)
	}
}

if (!project.hasProperty('mavenPassword')) {
	if (project.hasProperty('sonatypePassword')){
		setCommonGradleDefaultPropertyIfNull("mavenPassword", sonatypePassword, false)
	}
}


/***************************************************************************************
 * testing
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("initTesting", true)
setCommonGradleDefaultPropertyIfNull("useJUnit", true)
setCommonGradleDefaultPropertyIfNull("showStandardStreams", false)
setCommonGradleDefaultPropertyIfNull("testMinHeapSize", "128m")
setCommonGradleDefaultPropertyIfNull("testMaxHeapSize", "512m")

if (initTesting) {
	if (useJUnit) {
		setCommonGradleDefaultPropertyIfNull("testDependencyVersion", "5.7.2") // 5.10.1

		if (testDependencyVersion!=null && !testDependencyVersion.isEmpty()) {
			if (testDependencyVersion.startsWith("4.")) {
				setCommonGradleDefaultPropertyIfNull("testImplementationDependency", "junit:junit:${testDependencyVersion}")
				setCommonGradleDefaultPropertyIfNull("testRuntimeOnlyDependency", "junit:junit:${testDependencyVersion}")
			} else {
				setCommonGradleDefaultPropertyIfNull("testImplementationDependency", "org.junit.jupiter:junit-jupiter-api:${testDependencyVersion}")
				setCommonGradleDefaultPropertyIfNull("testRuntimeOnlyDependency", "org.junit.jupiter:junit-jupiter-engine:${testDependencyVersion}")
				setCommonGradleDefaultPropertyIfNull("testRuntimeOnlyPlatformLauncher", "org.junit.platform:junit-platform-launcher")
			}
		}
	}
}


/***************************************************************************************
 * dependency report
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("dependencyCheckEnabled", false)
setCommonGradleDefaultPropertyIfNull("dependencyTextReport", true)
setCommonGradleDefaultPropertyIfNull("dependencyHTMLReport", true)
setCommonGradleDefaultPropertyIfNull("reportsPath", "${buildDir}/reports")
setCommonGradleDefaultPropertyIfNull("junitReportPath", "${reportsPath}/junit")
setCommonGradleDefaultPropertyIfNull("dependenciesReportPath", "${reportsPath}/dependencies")
setCommonGradleDefaultPropertyIfNull("dependenciesFile", "${reportsPath}/dependencies/dependencies.json")


/***************************************************************************************
 * dependency-check: https://plugins.gradle.org/plugin/org.owasp.dependencycheck
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("toolariumDependencyCheckVersion", '9.0.6')  
setCommonGradleDefaultPropertyIfNull("dependencyCheckFailBuildOnCVSS", 11) // 7  
setCommonGradleDefaultPropertyIfNull("dependencyCheckAutoUpdate", true)
setCommonGradleDefaultPropertyIfNull("dependencyCheckCveValidForHours", 12)
setCommonGradleDefaultPropertyIfNull("dependencyCheckFailOnError", true)
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportPath", "${reportsPath}/dependency-check")
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportFile", "${dependencyCheckReportPath}/dependency-check-report.json")
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportHtmlFile", "${dependencyCheckReportPath}/dependency-check-report.html")
setCommonGradleDefaultPropertyIfNull("dependencyCheckPreparedDatabaseArchiveFile", "${gradleHome}/dependency-check-data.zip")
setCommonGradleDefaultPropertyIfNull("dependencyCheckPreparedDatabaseArchiveUrl", "")

// report
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportMaxTextLen", "72")
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportEnableReason", "false")
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportEnableUrl", "false")
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportEnableConfidence", "false")
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportArtifactColor", "${HIGHLITE_LEVEL}")
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportArtifactBgColor", null)
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportConfigurationColor", "${TITLE_LEVEL}")
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportConfigurationBgColor", null)
setCommonGradleDefaultPropertyIfNull("dependencyCheckConfidenceColor", "LIGHT_RED")
setCommonGradleDefaultPropertyIfNull("dependencyCheckConfidenceBgColor", null)
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportSeverityColor", "LIGHT_RED")
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportSeverityBgColor", null)
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportCveColor", "WHITE")
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportCveBgColor", "RED")
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportIncludedByColor", "LIGHT_YELLOW")
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportIncludedByBgColor", null)
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportEndExcludingVersionColor", "WHITE")
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportEndExcludingVersionBgColor", null)
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportUrlColor", "LIGHT_BLUE")
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportUrlBgColor", null)
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportReasonColor", "LIGHT_GREEN")
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportReasonBgColor", null)
setCommonGradleDefaultPropertyIfNull("dependencyCheckReportFilter", "api, implementation, runtimeOnly, runtimeClasspath")


/***************************************************************************************
 * code quality: checkstyle
 ***************************************************************************************/
//setCommonGradleDefaultPropertyIfNull("checkstyleToolDefaultVersion", '10.3.3')
setCommonGradleDefaultPropertyIfNull("checkstyleToolVersion", '10.3.3')
setCommonGradleDefaultPropertyIfNull("checkstyleMaxWarnings", 0)
setCommonGradleDefaultPropertyIfNull("checkstyleXMLReport", false)
setCommonGradleDefaultPropertyIfNull("checkstyleHTMLReport", true)
setCommonGradleDefaultPropertyIfNull("checkstyleConfigurationPath", "${configDirectory}/checkstyle")
setCommonGradleDefaultPropertyIfNull("checkstyleConfigurationFilename", "checkstyle.xml")
setCommonGradleDefaultPropertyIfNull("checkstyleConfiguration", "${checkstyleConfigurationPath}/${checkstyleConfigurationFilename}")
setCommonGradleDefaultPropertyIfNull("projectIndividualCheckstyleConfiguration", true)
setCommonGradleDefaultPropertyIfNull("checkstyleEclipseConfigurationOverwrite", true)


/***************************************************************************************
 * test coverage: jacoco
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("jacocoToolDefaultVersion", '0.8.9')
setCommonGradleDefaultPropertyIfNull("jacocoXMLReport", true)
setCommonGradleDefaultPropertyIfNull("jacocoCSVReport", false)
setCommonGradleDefaultPropertyIfNull("jacocoHTMLReport", true)
setCommonGradleDefaultPropertyIfNull("jacocoReportPath", "${reportsPath}/testcoverage")


/***************************************************************************************
 * sonar
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("sonarEnabled", false)
setCommonGradleDefaultPropertyIfNull("sonarVersion", "4.4.1.3373")


/***************************************************************************************
 * general settings
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("createServiceProperties", true)
setCommonGradleDefaultPropertyIfNull("servicePropertiesName", "toolarium-service.properties")


/***************************************************************************************
 * quarkus plugin defaults
 ***************************************************************************************/
// the quarkusPluginVersion is used for setup new projects where defaultQuarkusPluginVersion 
// controls the used version and force for update.x
setCommonGradleDefaultPropertyIfNull("defaultQuarkusPluginVersion", '3.2.9.Final')
//setCommonGradleDefaultPropertyIfNull("quarkusPluginVersion", '3.2.9.Final')
setCommonGradleDefaultPropertyIfNull("quarkusPluginVersion", "${defaultQuarkusPluginVersion}")
setCommonGradleDefaultPropertyIfNull("quarkusReleaseUpdateVersion", true)
setCommonGradleDefaultPropertyIfNull("quarkusPlatformArtifactId", 'quarkus-universe-bom')
setCommonGradleDefaultPropertyIfNull("quarkusPlatformGroupId", 'io.quarkus')
setCommonGradleDefaultPropertyIfNull("quarkusPlatformVersion", "${quarkusPluginVersion}")
setCommonGradleDefaultPropertyIfNull("quarkusRepository", "https://repository.jboss.org/maven2/")
setCommonGradleDefaultPropertyIfNull("quarkusAppDirectory", "${gradleBuildDirectory}/quarkus-app")
setCommonGradleDefaultPropertyIfNull("quarkusAppSubPathName", "app")
setCommonGradleDefaultPropertyIfNull("quarkusAppJar", "quarkus-run.jar")
setCommonGradleDefaultPropertyIfNull("updateApplicationProperties", true)
setCommonGradleDefaultPropertyIfNull("createServiceJavaRunner", true) // re dockerJavaRunner will be taken
setCommonGradleDefaultPropertyIfNull("createServiceJavaAgent", true) // the dockerJavaAgent will be taken
setCommonGradleDefaultPropertyIfNull("enablePatchRunTimeDefaultsConfigSource", true)


/***************************************************************************************
 * java-app defaults
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("javaApplicationShadowClassifier", "")


/***************************************************************************************
 * node plugin defaults
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("nodePluginVersion", '2.2.4')
setCommonGradleDefaultPropertyIfNull("nodeConfigInitFile", "$commonGradleBuildHome/.node-config-initialized")
setCommonGradleDefaultPropertyIfNull("nodeFundMessage", false)
setCommonGradleDefaultPropertyIfNull("nodeRegistry", "https://registry.npmjs.org/")

setCommonGradleDefaultPropertyIfNull("webServerRunnerPackage", "com.github.toolarium")
setCommonGradleDefaultPropertyIfNull("webServerRunnerName", "toolarium-jwebserver")
setCommonGradleDefaultPropertyIfNull("webServerRunnerVersion", "1.1.5")
setCommonGradleDefaultPropertyIfNull("webServerRunnerPropertiesName", "jwebserver.properties")


/***************************************************************************************
 * openapi plugin defaults
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("srcMainApiSpecDirectoryName", "api-spec")
setCommonGradleDefaultPropertyIfNull("srcMainApiSpecDirectory", "${srcMainDirectory}/${srcMainApiSpecDirectoryName}")
setCommonGradleDefaultPropertyIfNull("defaultOpenapiPluginVersion", "7.2.0")
setCommonGradleDefaultPropertyIfNull("openapiPluginVersion", "${defaultOpenapiPluginVersion}")
//setCommonGradleDefaultPropertyIfNull("openapiLibrary", 'okhttp-gson')
//setCommonGradleDefaultPropertyIfNull("openapiGeneratorName", 'java')
// openApiInputSourceFilePattern: my-special-service-api-spec -> my-special-service -> my-special -> ^my-special.*(service|service-adapter)-api.yaml$
setCommonGradleDefaultPropertyIfNull("openApiInputSourceFilePattern", '^' + "${rootProject.name}".replace(projectComponentIdSeparator + srcMainApiSpecDirectoryName, '') /* cut -api-spec */
	.replace(projectComponentIdSeparator + 'adapter' + projectComponentIdSeparator + 'service', '').replace(projectComponentIdSeparator + 'service', '') /* cut -adapter-service and -service */
	+ '.*(service|service' + projectComponentIdSeparator + 'adapter)' + projectComponentIdSeparator + 'api.yaml$') /* add .*(service|service-adapter)-api.yaml$ */
setCommonGradleDefaultPropertyIfNull("openApiAllowMultipleSourceFiles", true);
setCommonGradleDefaultPropertyIfNull("openapiVersionContentLineRegExp", "^.+version\\s?:.+\$")
setCommonGradleDefaultPropertyIfNull("openapiUpdateFileAfterRelease", true)
setCommonGradleDefaultPropertyIfNull("openapiGeneratorName", 'jaxrs-spec')
setCommonGradleDefaultPropertyIfNull("openapiLibrary", 'quarkus')
setCommonGradleDefaultPropertyIfNull("openapiUseJakartaEe", 'true')
setCommonGradleDefaultPropertyIfNull("openapiDocs", true)
setCommonGradleDefaultPropertyIfNull("openapiTests", true)
setCommonGradleDefaultPropertyIfNull("openapiModelDocs", false)
setCommonGradleDefaultPropertyIfNull("openapiModelTests", false)
setCommonGradleDefaultPropertyIfNull("openapiDateLibrary", "java8") // legacy
setCommonGradleDefaultPropertyIfNull("openapiInterfaceOnly", true)
setCommonGradleDefaultPropertyIfNull("openapiReturnResponse", true)
setCommonGradleDefaultPropertyIfNull("openapiUseJava8Features", true)
setCommonGradleDefaultPropertyIfNull("openapiUseBeanValidation", false)
setCommonGradleDefaultPropertyIfNull("openapiNullable", false)
setCommonGradleDefaultPropertyIfNull("openapiAsyncNative", false)
setCommonGradleDefaultPropertyIfNull("openapiBigDecimalAsString", true)
setCommonGradleDefaultPropertyIfNull("openapiBooleanGetterPrefix", "get")
setCommonGradleDefaultPropertyIfNull("openapiHideGenerationTimestamp", true)
setCommonGradleDefaultPropertyIfNull("openapiUseGzipFeature", true)
setCommonGradleDefaultPropertyIfNull("openapiSerializableModel", true)


/***************************************************************************************
 * gradle jvm arguments
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("gradlePropertiesJvmArgs", "-Xmx1g -XX:MaxHeapSize=1g -XX:MaxMetaspaceSize=256m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=${fileEncoding}")
//setCommonGradleDefaultPropertyIfNull("gradlePropertiesLogLevel", "lifecycle")
setCommonGradleDefaultPropertyIfNull("gradlePropertiesLogLevel", "quiet")
setCommonGradleDefaultPropertyIfNull("gradlePropertiesConsole", "rich")
setCommonGradleDefaultPropertyIfNull("gradlePropertiesWarningMode", "all")
//gradle.startParameter.showStacktrace = org.gradle.api.logging.configuration.ShowStacktrace.ALWAYS


/***************************************************************************************
 * allowedMainDirectories & allowedMainFiles
 ***************************************************************************************/
addCommonGradlePropertyList("changedFileSet", "")
addCommonGradlePropertyList("allowedMainDirectories", gradleBuildDirectory)
addCommonGradlePropertyList("allowedMainDirectories", gradleDirectory)
addCommonGradlePropertyList("allowedMainDirectories", configDirectory)
addCommonGradlePropertyList("allowedMainDirectories", srcDirectory)
addCommonGradlePropertyList("allowedMainDirectories", docsDirectory)
addCommonGradlePropertyList("allowedMainDirectories", logsDirectory)
addCommonGradlePropertyList("allowedMainDirectories", tempDirectory)
addCommonGradlePropertyList("allowedMainFiles", licenseFile)
addCommonGradlePropertyList("allowedMainFiles", readmeFile)
addCommonGradlePropertyList("allowedMainFiles", versionFile)
addCommonGradlePropertyList("allowedMainFiles", buildGradleFile)
addCommonGradlePropertyList("allowedMainFiles", gradlePropertiesFile)
addCommonGradlePropertyList("allowedMainFiles", settingsGradleFile)
addCommonGradlePropertyList("allowedMainFiles", changelogFile)
addCommonGradlePropertyList("allowedMainFiles", editorConfigFile)
addCommonGradlePropertyList("allowedMainFiles", javaVersionConfigFile)

// editor settings
addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/.idea")

if (project.hasProperty('installGradleWrapper') && project.getProperty('installGradleWrapper')) {
	addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/gradle")
	addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/gradlew")
	addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/gradlew.bat")
}


/***************************************************************************************
 * version default settings
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("majorVersionNumber", 0)
setCommonGradleDefaultPropertyIfNull("minorVersionNumber", 0)
setCommonGradleDefaultPropertyIfNull("revisionVersionNumber", 1)
setCommonGradleDefaultPropertyIfNull("qualifierVersionNumber", SNAPSHOT_TAG_NAME)
setCommonGradleDefaultPropertyIfNull("isReleaseVersion", false)
setCommonGradleDefaultPropertyIfNull("tagReleaseVersion", true)
setCommonGradleDefaultPropertyIfNull("isReleaseUpdateVersion", false)
setCommonGradleDefaultPropertyIfNull("tagReleaseUpdateVersion", true)
setCommonGradleDefaultPropertyIfNull("tagIgnoreReleaseUpdateVersionIfNoFilesChanged", true)
setCommonGradleDefaultPropertyIfNull("scmVersionNumber", '')


/***************************************************************************************
 * online connection url
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("onlineCheckConnectionUrl", 'www.google.com')
setCommonGradleDefaultPropertyIfNull("onlineCheckConnectionUrlTimeout", 1500)


/***************************************************************************************
 * valid build attributes
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("validBuild", true)
setCommonGradleDefaultPropertyIfNull("validBuildMessage", "")
setCommonGradleDefaultPropertyIfNull("errorMessagePrefix", "\nERROR")
setCommonGradleDefaultPropertyIfNull("logErrorMessage", false)
setCommonGradleDefaultPropertyIfNull("errorMessageColor", WARN_LEVEL)


/***************************************************************************************
 * docker
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("projectIndividualDockerfie", true)
setCommonGradleDefaultPropertyIfNull("createProjectIndividualDockerfie", false)
setCommonGradleDefaultPropertyIfNull("srcDockerDirectoryName", "docker")
setCommonGradleDefaultPropertyIfNull("srcDockerDirectory", "${srcMainDirectory}/${srcDockerDirectoryName}")
setCommonGradleDefaultPropertyIfNull("dockerFileTemplateName", "Dockerfile.template")
setCommonGradleDefaultPropertyIfNull("dockerFilename", "Dockerfile")
setCommonGradleDefaultPropertyIfNull("dockerIgnoreFilename", ".dockerignore")
setCommonGradleDefaultPropertyIfNull("dockerFile", "${srcDockerDirectory}/${dockerFilename}")
setCommonGradleDefaultPropertyIfNull("dockerFileTemplate", "${srcDockerDirectory}/${dockerFilename}.template")
setCommonGradleDefaultPropertyIfNull("dockerIgnoreFile", "${rootDirectory}/${dockerIgnoreFilename}")
setCommonGradleDefaultPropertyIfNull("dockerName", "")
setCommonGradleDefaultPropertyIfNull("buildAlwaysDockerImage", false)
setCommonGradleDefaultPropertyIfNull("dockerDefaultPort", "8080")
setCommonGradleDefaultPropertyIfNull("dockerUID", "3000")
setCommonGradleDefaultPropertyIfNull("dockerGID", "${dockerUID}")
setCommonGradleDefaultPropertyIfNull("dockerExposePort", "${dockerDefaultPort}")
setCommonGradleDefaultPropertyIfNull("dockerUser", "appuser")
setCommonGradleDefaultPropertyIfNull("dockerGroup", "appgroup")
setCommonGradleDefaultPropertyIfNull("dockerTimezone", "" + java.util.TimeZone.getDefault().getID())
setCommonGradleDefaultPropertyIfNull("dockerSubPathAccess", "")
setCommonGradleDefaultPropertyIfNull("dockerRemoveDanglingImages", true)
setCommonGradleDefaultPropertyIfNull("dockerRemovePreviousVersionImages", true)
setCommonGradleDefaultPropertyIfNull("dockerMaxNumberOfImages", 2) // keep max 2 versions / tags of same image
setCommonGradleDefaultPropertyIfNull("dockerDefaultEncoding", "${fileEncoding}")
setCommonGradleDefaultPropertyIfNull("dockerDefaultLanguage", "en")
setCommonGradleDefaultPropertyIfNull("dockerDefaultLocale", "${dockerDefaultLanguage}_US")
setCommonGradleDefaultPropertyIfNull("dockerJavaOptions", "-Djava.security.egd=file:/dev/./urandom")
setCommonGradleDefaultPropertyIfNull("dockerDefaultJavaOptions", "${dockerJavaOptions}")
setCommonGradleDefaultPropertyIfNull("dockerJavaAgent", "")
setCommonGradleDefaultPropertyIfNull("dockerProxyHost", "")
setCommonGradleDefaultPropertyIfNull("dockerProxyPort", "")
setCommonGradleDefaultPropertyIfNull("dockerNoProxyHosts", "")
setCommonGradleDefaultPropertyIfNull("dockerHttpAgent", "")
setCommonGradleDefaultPropertyIfNull("dockerKeepAlive", "")
setCommonGradleDefaultPropertyIfNull("dockerMaxConnections", "")
setCommonGradleDefaultPropertyIfNull("dockerMaxRedirects", "")
setCommonGradleDefaultPropertyIfNull("dockerLogLevel", "")
setCommonGradleDefaultPropertyIfNull("dockerJavaRunner", "java-runner")
setCommonGradleDefaultPropertyIfNull("dockerEnableAccessLog", false)
setCommonGradleDefaultPropertyIfNull("containerCmd", "nerdctl") // docker: docker
setCommonGradleDefaultPropertyIfNull("dockerBuildPull", "") // docker: --pull --force-rm
setCommonGradleDefaultPropertyIfNull("dockerBuildCompress", "") // docker: --compress
setCommonGradleDefaultPropertyIfNull("dockerBuildArgs", "") // "--build-arg "
setCommonGradleDefaultPropertyIfNull("dockerBuildLatestTag", false)
setCommonGradleDefaultPropertyIfNull("dockerBuildLatestTagName", "")
setCommonGradleDefaultPropertyIfNull("dockerRepositoryHost", "")
setCommonGradleDefaultPropertyIfNull("dockerTagPrefix", "hub.docker.com")
setCommonGradleDefaultPropertyIfNull("dockerSnapshotRepositoryHost", "")
setCommonGradleDefaultPropertyIfNull("dockerSnapshotTagPrefix", "")
setCommonGradleDefaultPropertyIfNull("dockerRepositoryUser", "")
setCommonGradleDefaultPropertyIfNull("dockerRepositoryPassword", "")
setCommonGradleDefaultPropertyIfNull("dockerCleanupAfterBuild", false)
setCommonGradleDefaultPropertyIfNull("dockerCleanupAfterPublish", true)
setCommonGradleDefaultPropertyIfNull("dockerPullImageCommand", "docker pull")

if (!"$dockerIgnoreFile".toString().isEmpty()) {
	addCommonGradlePropertyList("allowedMainFiles", "$dockerIgnoreFile")
}

// define the projects which are allowed to have a local Dockerfile.template
setCommonGradleDefaultPropertyIfNull("dockerSupportProjectTemplateList", false)
addCommonGradlePropertyList("allowedDockerfileTemplateProjects", "")


/***************************************************************************************
 * kubernetes
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("kubernetesSupport", false)
setCommonGradleDefaultPropertyIfNull("kubernetesReplicas", "2")
setCommonGradleDefaultPropertyIfNull("srcKubernetesDirectoryName", "kubernetes")
setCommonGradleDefaultPropertyIfNull("srcKubernetesDirectory", "${srcMainDirectory}/${srcKubernetesDirectoryName}")
setCommonGradleDefaultPropertyIfNull("kubernetesInstallSupport", true)
setCommonGradleDefaultPropertyIfNull("kubernetesProductInformationSupport", true)

if (project.hasProperty('projectGroupId') && !project.getProperty('projectGroupId').trim().isEmpty()) {
	setCommonGradleDefaultPropertyIfNull("kubernetesLabelId", project.getProperty('projectGroupId'))
	setCommonGradleDefaultPropertyIfNull("kubernetesNamespace", project.getProperty('projectGroupId').toString().replace(".", "-"))
} else {
	setCommonGradleDefaultPropertyIfNull("kubernetesLabelId", "my.application")
	setCommonGradleDefaultPropertyIfNull("kubernetesNamespace", "my-application")
}

setCommonGradleDefaultPropertyIfNull("kubernetesApplicationHost", "${rootProject.name}.local")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationPrototcol", "http://")
setCommonGradleDefaultPropertyIfNull("kubernetesUsernamePasswordBase64Encode", true)
setCommonGradleDefaultPropertyIfNull("kubernetesProjectConfiguration", true)
//setCommonGradleDefaultPropertyIfNull("kubernetesDockerImage", "")
setCommonGradleDefaultPropertyIfNull("kubernetesPathAnnotationName", "url-path")
setCommonGradleDefaultPropertyIfNull("kubernetesUrlRootPath", "/api")
setCommonGradleDefaultPropertyIfNull("kubernetesUrlPath", "${kubernetesUrlRootPath}/${rootProject.name}")
setCommonGradleDefaultPropertyIfNull("kubernetesConfigurationPathname", "kubernetes")
setCommonGradleDefaultPropertyIfNull("kubernetesConfigurationPath", "$gradleBuildDirectory/${kubernetesConfigurationPathname}")
setCommonGradleDefaultPropertyIfNull("kubernetesConfigurationProjctPath", "$kubernetesConfigurationPath")
setCommonGradleDefaultPropertyIfNull("kubernetesConfigurationServicesPath", "${kubernetesConfigurationPath}-services")
setCommonGradleDefaultPropertyIfNull("kubernetesConfigurationElementsPath", "${kubernetesConfigurationPath}-elements")

setCommonGradleDefaultPropertyIfNull("kubernetesApplicationConfigurationInformationPathname", "application-information")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationInformationPath", "$gradleBuildDirectory/${kubernetesApplicationConfigurationInformationPathname}")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationServicePathname", "quarkus")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationServicePath", "$kubernetesApplicationInformationPath/${kubernetesApplicationServicePathname}")
setCommonGradleDefaultPropertyIfNull("includeApplicationInformation", true)
setCommonGradleDefaultPropertyIfNull("kubernetesProductMainResourcesPath", "$srcMainResourcesDirectory")
setCommonGradleDefaultPropertyIfNull("kubernetesProductMainResourcesIncludes", "**")
setCommonGradleDefaultPropertyIfNull("kubernetesProductResourcesPathname", "app-${resourceDirectoryName}")
setCommonGradleDefaultPropertyIfNull("kubernetesProductResourcesPath", "$kubernetesApplicationInformationPath/${kubernetesProductResourcesPathname}")
setCommonGradleDefaultPropertyIfNull("kubernetesEnumConfigurationPathname", "toolarium-enum-configuration")
setCommonGradleDefaultPropertyIfNull("kubernetesEnumConfigurationFilename", "${kubernetesEnumConfigurationPathname}.json")
setCommonGradleDefaultPropertyIfNull("kubernetesEnumConfigurationToInitialize", "${kubernetesEnumConfigurationPathname}-to-initialize.json")
setCommonGradleDefaultPropertyIfNull("kubernetesEnumConfigurationMapping", "index.json")
setCommonGradleDefaultPropertyIfNull("kubernetesEnumConfigurationPath", "$kubernetesApplicationInformationPath/${kubernetesEnumConfigurationPathname}")

setCommonGradleDefaultPropertyIfNull("kustomizeSupport", true)
setCommonGradleDefaultPropertyIfNull("includeKustomizeConfiguration", true)
setCommonGradleDefaultPropertyIfNull("kustomizeConfigurationPathname", "kustomize")
setCommonGradleDefaultPropertyIfNull("kustomizeConfigurationPath", "$gradleBuildDirectory/${kustomizeConfigurationPathname}/base")
setCommonGradleDefaultPropertyIfNull("kustomizeBaseServicesConfigurationPath", "services")
setCommonGradleDefaultPropertyIfNull("kustomizeBaseConfigConfigurationPath", "config")
setCommonGradleDefaultPropertyIfNull("kustomizeBaseControllerConfigurationPath", "controller")
setCommonGradleDefaultPropertyIfNull("kustomizeBaseKustomization", "kustomization.yaml")

setCommonGradleDefaultPropertyIfNull("kubernetesApplyCommand", "kubectl apply -f")
setCommonGradleDefaultPropertyIfNull("kubernetesDeleteCommand", "kubectl delete")
setCommonGradleDefaultPropertyIfNull("kubernetesInstallMessage", "This file describes the installation of the product.")

setCommonGradleDefaultPropertyIfNull("kubernetesIngresControlFilename", "$kubernetesConfigurationElementsPath/${rootProject.name}-ingress-controller.yaml")
setCommonGradleDefaultPropertyIfNull("kubernetesControllerImage", "networking.k8s.io/v1")
// imgress-nginx: https://github.com/kubernetes/ingress-nginx
setCommonGradleDefaultPropertyIfNull("kubernetesSupportIngressNginx", true)
setCommonGradleDefaultPropertyIfNull("kubernetesDownloadIngressNginxVersion", false)
setCommonGradleDefaultPropertyIfNull("kubernetesIngressNginxVersion", "1.9.5") // see https://github.com/kubernetes/ingress-nginx
setCommonGradleDefaultPropertyIfNull("kubernetesIngressUrl", "https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v${kubernetesIngressNginxVersion}/deploy/static/provider/cloud/deploy.yaml") 
setCommonGradleDefaultPropertyIfNull("kubernetesIngressProxyBufferSize", "8k") 
setCommonGradleDefaultPropertyIfNull("kubernetesIngressProxyBodySize", "10m") 

setCommonGradleDefaultPropertyIfNull("kubernetesFileAdditionalContent", "")

// kubernetes / application.properties environment variable names
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseKind", "DATABASE_KIND")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseJdbcUrlEnvName", "DATABASE_JDBC_URL")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseMaxSizieEnvName", "DATABASE_JDBC_MAXSIZE")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseUsernameEnvName", "DATABASE_USERNAME")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabasePasswordEnvName", "DATABASE_PASSWORD")

// application configuration
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationConfigPath", "config")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationNamespaceConfigFilename", "${kubernetesApplicationConfigPath}/${rootProject.name}-namespace-kubernetes.yaml")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationConfigBaseName", "application-config")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationConfigName", "${kubernetesApplicationConfigBaseName}") // -@@PRODUCT_BUILD_ID@@
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationConfigFilename", "${kubernetesApplicationConfigPath}/${rootProject.name}-${kubernetesApplicationConfigBaseName}-kubernetes.yaml")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationSecretBaseName", "application-secret")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationSecretName", "${kubernetesApplicationSecretBaseName}") // -@@PRODUCT_BUILD_ID@@
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationSecretFilename", "${kubernetesApplicationConfigPath}/${rootProject.name}-${kubernetesApplicationSecretBaseName}-kubernetes.yaml")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationOIDCClientIdEnvName", "OIDC_CLIENT_ID")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationOIDCClientIdKey", "oidc.client-id")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationOIDCPublicKeyEnvName", "OIDC_PUBLIC_KEY")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationOIDCPublicKeyKey", "oidc.public-key")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationOIDCClientId", "services")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationOIDCPublicKey", "")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationOIDCAuthServerUrlName", "OIDC_AUTH_SERVER_URL")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationOIDCAuthServerUrlKey", "oidc.auth-server-url")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationOIDCAuthServerUrl", "${kubernetesApplicationPrototcol}keycloak:8080/auth/realms")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationOIDCTokenIssuerName", "OIDC_TOKEN_ISSUER")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationOIDCTokenIssuerKey", "oidc.token-issuer")
setCommonGradleDefaultPropertyIfNull("kubernetesApplicationOIDCTokenIssuer", "${kubernetesApplicationPrototcol}${kubernetesApplicationHost}/auth/realms")

// database secret name
setCommonGradleDefaultPropertyIfNull("kubernetesSupportDatabase", true)
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseSecretBaseName", "database-secret")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseSecretName", "${kubernetesDatabaseSecretBaseName}") // -@@PRODUCT_BUILD_ID@@
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseSecretFilename", "${kubernetesApplicationConfigPath}/${rootProject.name}-${kubernetesDatabaseSecretBaseName}-kubernetes.yaml")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseUsernameKey", "username")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabasePasswordKey", "password") 
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseUsername", "appuser")    // service database user
setCommonGradleDefaultPropertyIfNull("kubernetesDatabasePassword", "pleaseCh@nge1t") // service database password
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseAdminSecretBaseName", "database-admin-secret")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseAdminSecretName", "${kubernetesDatabaseAdminSecretBaseName}") //-@@PRODUCT_BUILD_ID@@
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseAdminUsername", "dbadmin") // admin database user
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseAdminPassword", "${kubernetesDatabasePassword}") // service database password

// database 
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseServiceName", "database")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseHost", "database")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabasePort", "5432")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseImage", "postgres:latest")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseName", "${kubernetesNamespace}")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseStorage", "100Mi")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseVolumeName", "${kubernetesDatabaseServiceName}-data")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseMountPath", "/var/lib/postgresql/data")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseEnvName", "POSTGRES_DB")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseEnvUserName", "POSTGRES_USER")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseEnvPasswordName", "POSTGRES_PASSWORD")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseUserFileEnvName", "POSTGRES_USER_FILE")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabasePasswordFileEnvName", "POSTGRES_PASSWORD_FILE")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseIntitializationString", "set -e" + NELINE \
																			  + "    psql -v ON_ERROR_STOP=1 --username \$POSTGRES_USER --dbname \$POSTGRES_DB <<-EOSQL" + NELINE \
																			  + "        CREATE USER \$APP_USER_NAME WITH PASSWORD '\$APP_USER_PASSWORD';" + NELINE \
																			  + "        CREATE SCHEMA IF NOT EXISTS AUTHORIZATION \$APP_USER_NAME;" + NELINE \
																			  + "        CREATE USER \$IDM_USER_NAME WITH PASSWORD '\$IDM_USER_PASSWORD';" + NELINE \
																			  + "        CREATE SCHEMA IF NOT EXISTS \$IDM_SCHEMA AUTHORIZATION \$IDM_USER_NAME;" + NELINE \
																			  + "    EOSQL")

// application properties
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseType", "postgresql")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseUrl", "jdbc:${kubernetesDatabaseType}://${kubernetesDatabaseHost}:${kubernetesDatabasePort}/${kubernetesDatabaseName}")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseUrlKey", "database.jdbc.url")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseMaxSizeKey", "database.jdbc.maxsize")
setCommonGradleDefaultPropertyIfNull("kubernetesDatabaseMaxConnections", "10")

// idm support
setCommonGradleDefaultPropertyIfNull("kubernetesSupportIdm", true)
setCommonGradleDefaultPropertyIfNull("kubernetesIdmTemplateFilename", "kubernetes-idm.template")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmConfigTemplateFilename", "kubernetes-idm-config.template")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmSecretTemplateFilename", "kubernetes-idm-secret.template")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmImageVersion", "23.0.3")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmUrlPath", "/auth")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmUrlProtocol", "${kubernetesApplicationPrototcol}")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmFrontendUrl", "${kubernetesIdmUrlProtocol}${kubernetesApplicationHost}${kubernetesIdmUrlPath}")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmAdminUrlPath", "${kubernetesIdmUrlPath}/admin/")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmAdminUrl", "${kubernetesIdmUrlProtocol}${kubernetesApplicationHost}${kubernetesIdmAdminUrlPath}")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmPort", "8080")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmCacheOwners", "2")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmServiceName", "keycloak")	
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabase", "${kubernetesDatabaseName}")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabaseSchema", "${kubernetesIdmServiceName}")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabaseHost", "${kubernetesDatabaseHost}")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabasePort", "${kubernetesDatabasePort}")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabaseVendor", "postgres")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabaseUsername", "idmuser")   // idm username
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabasePassword", "${kubernetesDatabasePassword}") // idm password
setCommonGradleDefaultPropertyIfNull("kubernetesIdmAdminUsername", "admin") // user in sample
setCommonGradleDefaultPropertyIfNull("kubernetesIdmAdminPassword", "pleaseCh@nge1t") // user in sample
setCommonGradleDefaultPropertyIfNull("kubernetesIdmImage", "quay.io/keycloak/keycloak:${kubernetesIdmImageVersion}")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabaseKey", "db.database")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabaseHostKey", "db.addr")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabasePortKey", "db.port")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabaseVendorKey", "db.vendor")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabaseSchemaKey", "db.schema")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmFrontendUrlKey", "frontend.url")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmLogLevelKey", "log.level")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmAddressForwardingKey", "proxy.address.forwarding")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmConfigBaseName", "idm-config")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmConfigName", "${kubernetesIdmConfigBaseName}") // -@@PRODUCT_BUILD_ID@@
setCommonGradleDefaultPropertyIfNull("kubernetesIdmLogLevel", "INFO")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmAddressForwarding", "true")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmSecretBaseName", "idm-secret")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmSecretName", "${kubernetesIdmSecretBaseName}") // -@@PRODUCT_BUILD_ID@@
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabaseUsernameKey", "db-username")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabasePasswordKey", "db-password")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmAdminUsernameKey", "admin-username")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmAdminPasswordKey", "admin-password")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmUserFileEnvName", "KEYCLOAK_USER_FILE")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmPasswordFileEnvName", "KEYCLOAK_PASSWORD_FILE")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabaseVendorEnvName", "DB_VENDOR")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabaseHostEnvName", "DB_ADDR")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabasePortEnvName", "DB_PORT")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabaseEnvName", "DB_DATABASE")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabaseSchemaEnvName", "DB_SCHEMA")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabaseUserFileEnvName", "DB_USER_FILE")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmDatabasePasswordFileEnvName", "DB_PASSWORD_FILE")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmLogLevelEnvName", "KEYCLOAK_LOGLEVEL")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmAddressForwardingEnvName", "PROXY_ADDRESS_FORWARDING")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmFrontendUrlEnvName", "KEYCLOAK_FRONTEND_URL")

// readiness and liveness
setCommonGradleDefaultPropertyIfNull("kubernetesReadinessFailureThreshold", 3)
setCommonGradleDefaultPropertyIfNull("kubernetesReadinessScheme", "HTTP")
setCommonGradleDefaultPropertyIfNull("kubernetesReadinessInitialDelaySeconds", 60)
setCommonGradleDefaultPropertyIfNull("kubernetesReadinessPeriodSeconds", 30)
setCommonGradleDefaultPropertyIfNull("kubernetesReadinessSuccessThreshold", 1)
setCommonGradleDefaultPropertyIfNull("kubernetesReadinessTimeoutSeconds", 10)
setCommonGradleDefaultPropertyIfNull("kubernetesLivenessFailureThreshold", project.getProperty('kubernetesReadinessFailureThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesLivenessScheme", project.getProperty('kubernetesReadinessScheme'))
setCommonGradleDefaultPropertyIfNull("kubernetesLivenessInitialDelaySeconds", project.getProperty('kubernetesReadinessInitialDelaySeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesLivenessPeriodSeconds", project.getProperty('kubernetesReadinessPeriodSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesLivenessSuccessThreshold", project.getProperty('kubernetesReadinessSuccessThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesLivenessTimeoutSeconds", project.getProperty('kubernetesReadinessTimeoutSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesStartupFailureThreshold", project.getProperty('kubernetesReadinessFailureThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesStartupScheme", project.getProperty('kubernetesReadinessScheme'))
setCommonGradleDefaultPropertyIfNull("kubernetesStartupInitialDelaySeconds", project.getProperty('kubernetesReadinessInitialDelaySeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesStartupPeriodSeconds", project.getProperty('kubernetesReadinessPeriodSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesStartupSuccessThreshold", project.getProperty('kubernetesReadinessSuccessThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesStartupTimeoutSeconds", project.getProperty('kubernetesReadinessTimeoutSeconds'))

setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusReadinessCheckPath", "${kubernetesUrlRootPath}/q/health/ready")
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusReadinessFailureThreshold", project.getProperty('kubernetesReadinessFailureThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusReadinessScheme", project.getProperty('kubernetesReadinessScheme'))
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusReadinessInitialDelaySeconds", project.getProperty('kubernetesReadinessInitialDelaySeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusReadinessPeriodSeconds", project.getProperty('kubernetesReadinessPeriodSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusReadinessSuccessThreshold", project.getProperty('kubernetesReadinessSuccessThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusReadinessTimeoutSeconds", project.getProperty('kubernetesReadinessTimeoutSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusLivenessCheckPath", "${kubernetesUrlRootPath}/q/health/live")
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusLivenessFailureThreshold", project.getProperty('kubernetesLivenessFailureThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusLivenessScheme", project.getProperty('kubernetesLivenessScheme'))
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusLivenessInitialDelaySeconds", project.getProperty('kubernetesLivenessInitialDelaySeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusLivenessPeriodSeconds", project.getProperty('kubernetesLivenessPeriodSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusLivenessSuccessThreshold", project.getProperty('kubernetesLivenessSuccessThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusLivenessTimeoutSeconds", project.getProperty('kubernetesLivenessTimeoutSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusStartupCheckPath", "${kubernetesUrlRootPath}/q/health/ready")
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusStartupFailureThreshold", project.getProperty('kubernetesLivenessFailureThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusStartupScheme", project.getProperty('kubernetesLivenessScheme'))
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusStartupInitialDelaySeconds", project.getProperty('kubernetesLivenessInitialDelaySeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusStartupPeriodSeconds", project.getProperty('kubernetesLivenessPeriodSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusStartupSuccessThreshold", project.getProperty('kubernetesLivenessSuccessThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesQuarkusStartupTimeoutSeconds", project.getProperty('kubernetesLivenessTimeoutSeconds'))

setCommonGradleDefaultPropertyIfNull("kubernetesNodeReadinessCheckPath", "/index.html")
setCommonGradleDefaultPropertyIfNull("kubernetesNodeReadinessFailureThreshold", project.getProperty('kubernetesReadinessFailureThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeReadinessScheme", project.getProperty('kubernetesReadinessScheme'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeReadinessInitialDelaySeconds", project.getProperty('kubernetesReadinessInitialDelaySeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeReadinessPeriodSeconds", project.getProperty('kubernetesReadinessPeriodSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeReadinessSuccessThreshold", project.getProperty('kubernetesReadinessSuccessThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeReadinessTimeoutSeconds", project.getProperty('kubernetesReadinessTimeoutSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeLivenessCheckPath", project.getProperty('kubernetesNodeReadinessCheckPath'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeLivenessFailureThreshold", project.getProperty('kubernetesLivenessFailureThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeLivenessScheme", project.getProperty('kubernetesLivenessScheme'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeLivenessInitialDelaySeconds", project.getProperty('kubernetesLivenessInitialDelaySeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeLivenessPeriodSeconds", project.getProperty('kubernetesLivenessPeriodSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeLivenessSuccessThreshold", project.getProperty('kubernetesLivenessSuccessThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeLivenessTimeoutSeconds", project.getProperty('kubernetesLivenessTimeoutSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeStartupCheckPath", project.getProperty('kubernetesNodeReadinessCheckPath'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeStartupFailureThreshold", project.getProperty('kubernetesLivenessFailureThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeStartupScheme", project.getProperty('kubernetesLivenessScheme'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeStartupInitialDelaySeconds", project.getProperty('kubernetesLivenessInitialDelaySeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeStartupPeriodSeconds", project.getProperty('kubernetesLivenessPeriodSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeStartupSuccessThreshold", project.getProperty('kubernetesLivenessSuccessThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesNodeStartupTimeoutSeconds", project.getProperty('kubernetesLivenessTimeoutSeconds'))

setCommonGradleDefaultPropertyIfNull("kubernetesIdmReadinessCheckPath", "${kubernetesIdmUrlPath}/realms/master")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmReadinessFailureThreshold", project.getProperty('kubernetesReadinessFailureThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmReadinessScheme", project.getProperty('kubernetesReadinessScheme'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmReadinessInitialDelaySeconds", project.getProperty('kubernetesReadinessInitialDelaySeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmReadinessPeriodSeconds", project.getProperty('kubernetesReadinessPeriodSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmReadinessSuccessThreshold", project.getProperty('kubernetesReadinessSuccessThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmReadinessTimeoutSeconds", project.getProperty('kubernetesReadinessTimeoutSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmLivenessCheckPath", "${kubernetesIdmUrlPath}/")
setCommonGradleDefaultPropertyIfNull("kubernetesIdmLivenessFailureThreshold", project.getProperty('kubernetesLivenessFailureThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmLivenessScheme", project.getProperty('kubernetesLivenessScheme'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmLivenessInitialDelaySeconds", project.getProperty('kubernetesLivenessInitialDelaySeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmLivenessPeriodSeconds", project.getProperty('kubernetesLivenessPeriodSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmLivenessSuccessThreshold", project.getProperty('kubernetesLivenessSuccessThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmLivenessTimeoutSeconds", project.getProperty('kubernetesLivenessTimeoutSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmStartupCheckPath", project.getProperty('kubernetesIdmReadinessCheckPath'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmStartupFailureThreshold", project.getProperty('kubernetesLivenessFailureThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmStartupScheme", project.getProperty('kubernetesLivenessScheme'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmStartupInitialDelaySeconds", project.getProperty('kubernetesLivenessInitialDelaySeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmStartupPeriodSeconds", project.getProperty('kubernetesLivenessPeriodSeconds'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmStartupSuccessThreshold", project.getProperty('kubernetesLivenessSuccessThreshold'))
setCommonGradleDefaultPropertyIfNull("kubernetesIdmStartupTimeoutSeconds", project.getProperty('kubernetesLivenessTimeoutSeconds'))

// define the projects which are allowed to have a local kubernetes.template
setCommonGradleDefaultPropertyIfNull("kubernetesSupportProjectTemplateList", false)
addCommonGradlePropertyList("allowedKubernetesTemplateProjects", "")


/***************************************************************************************
 * nuxt
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("forceStaticTarget", false)
setCommonGradleDefaultPropertyIfNull("generateTypescriptVersionFile", true)
setCommonGradleDefaultPropertyIfNull("typescriptVersionFile", "${srcDirectory}/${generatedCommonGradleSubfolderName}/version.ts")
setCommonGradleDefaultPropertyIfNull("commonGradleBuildDistName", "dist")
setCommonGradleDefaultPropertyIfNull("commonGradleBuildDistPath", "${rootDirectory}/${commonGradleBuildDistName}")


/***************************************************************************************
 * resource bundle
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("initResourceBundle", false)
setCommonGradleDefaultPropertyIfNull("hasResourceBundle", false)
setCommonGradleDefaultPropertyIfNull("commonGradleConfigResourcebundleName", "Resourcebundle.xls")
setCommonGradleDefaultPropertyIfNull("commonGradleConfigResourcebundlePath", "${configDirectory}/${commonGradleConfigResourcebundleName}")
setCommonGradleDefaultPropertyIfNull("commonGradleResourcebundleOutputPath", "${generatedCommonGradleBuildSources}/resources/main")
setCommonGradleDefaultPropertyIfNull("commonGradleResourcebundleOutputNamePrefix", "resourcebundle")

setCommonGradleDefaultPropertyIfNull("referenceSheetName", "")
setCommonGradleDefaultPropertyIfNull("referenceSheetHasNoSubFolder", "false")

setCommonGradleDefaultPropertyIfNull("commonGradleResourcebundleJsonSupport", false)
setCommonGradleDefaultPropertyIfNull("commonGradleConfigResourcebundleMaxMemory", "512m")


/***************************************************************************************
 * elastic
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("esElasticsearchVersion", "8.8.2")
setCommonGradleDefaultPropertyIfNull("esElasticsearchClusterName", "elastic")
setCommonGradleDefaultPropertyIfNull("esElasticsearchReplicas", "${kubernetesReplicas}")
setCommonGradleDefaultPropertyIfNull("esElasticsearchStorageSize", "3Gi")
setCommonGradleDefaultPropertyIfNull("esElasticsearchStorageClassName", "standard")


/***************************************************************************************
 * white- and blacklist dependencies
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("commonGradleConfigWhitelistDependenciesName", "whitelist-dependencies.properties")
setCommonGradleDefaultPropertyIfNull("commonGradleConfigBlacklistDependenciesName", "blacklist-dependencies.properties")


/***************************************************************************************
 * library version used in templates
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("commonGradleSlf4jApiVersion", "2.0.10")
setCommonGradleDefaultPropertyIfNull("commonGradleLogbackVersion", "1.4.14")
setCommonGradleDefaultPropertyIfNull("commonGradleJptoolsVersion", "1.7.10")
setCommonGradleDefaultPropertyIfNull("commonGradleJavaxValidtionVersion", "2.0.1.Final")
setCommonGradleDefaultPropertyIfNull("commonGradleJavaxWsRSApiVersion", "2.1.1")
setCommonGradleDefaultPropertyIfNull("commonGradleJacksonAnnotationVersion", "2.15.3")
setCommonGradleDefaultPropertyIfNull("commonGradleJavaxAnnotationVersion", "1.3.2")
setCommonGradleDefaultPropertyIfNull("commonGradleJakartaAnnotationVersion", "2.1.1")
setCommonGradleDefaultPropertyIfNull("commonGradleJakartaValidtionVersion", "3.0.2")
setCommonGradleDefaultPropertyIfNull("commonGradleJakartaWsRSApiVersion", "3.1.0")


/***************************************************************************************
 * resource bundle
 ***************************************************************************************/
setCommonGradleDefaultPropertyIfNull("commonGradleJptoolsModelGeneratorVersion", "${commonGradleJptoolsVersion}")
setCommonGradleDefaultPropertyIfNull("commonGradleJexcelapiModelGeneratorVersion", "2.6.12")
