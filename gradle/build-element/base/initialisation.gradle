/*
 * initialisation.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */


/***************************************************************************************
 * Project initialisation
 ***************************************************************************************/
ext.projectInitialisation = { ->
	// check mandatory files	
	def createSettingsGralde = !new File(settingsGradleFile).exists()
	def createGradleProperties = !new File(gradlePropertiesFile).exists()
	def createBuildGradle = !new File(buildGradleFile).exists()
	def createVersionFile = !new File(versionFile).exists()
	def createReadmeFile = !new File(readmeFile).exists()
	def createLicenseFile = !new File(licenseFile).exists()
	def createChangelogFile = createChangelogFile && !new File(changelogFile).exists()
	def createGraldeHomeProperties = !new File(gradleHomePropertiesFile).exists()
	
	// validate properties
	def isReady = !createSettingsGralde \
					&& !createGradleProperties \
					&& !createBuildGradle \
					&& project.hasProperty('projectGroupId') && project.hasProperty('projectComponentId') && project.hasProperty('projectRootPackageName') && project.hasProperty('projectDescription') \
					&& !createVersionFile \
					&& !createReadmeFile \
					&& !createLicenseFile \
					&& !createChangelogFile
					
	setCommonGradleProperty('IS_NEW', !isReady)
	
	def onlineCheckConnectionUrl = project.getProperty('onlineCheckConnectionUrl')
	def onlineCheckConnectionUrlTimeout = project.getProperty('onlineCheckConnectionUrlTimeout')
	setCommonGradleProperty('HAS_ONLINE_CONNECTION', isServerAvailable(onlineCheckConnectionUrl, onlineCheckConnectionUrlTimeout))

	isReady = isReady \
					&& !createGraldeHomeProperties

	if (!isReady) {
		printLine(ERROR_LEVEL, true)

		if (createSettingsGralde) {
			printInfo("Set root project name to " + colorize(HIGHLITE_LEVEL, rootProject.name) + ", created file " + colorize(HIGHLITE_LEVEL, settingsGradleFile) + "...")
			if (createGradleProperties || createBuildGradle || !project.hasProperty('projectRootPackageName') || !project.hasProperty('projectGroupId') || !project.hasProperty('projectComponentId') || !project.hasProperty('projectDescription') || createVersionFile || createReadmeFile || createLicenseFile || createChangelogFile || createGraldeHomeProperties) 
				printNewline()
		}

		if (createGradleProperties) {
			printInfo("> Created file " + colorize(HIGHLITE_LEVEL, gradlePropertiesFile) + "...")
			if (createBuildGradle || !project.hasProperty('projectRootPackageName') || !project.hasProperty('projectGroupId') || !project.hasProperty('projectComponentId') || !project.hasProperty('projectDescription')  || createVersionFile || createReadmeFile || createLicenseFile || createChangelogFile || createGraldeHomeProperties) 
				printNewline()
		}

		if (createBuildGradle) {
			printInfo("> Created file " + colorize(HIGHLITE_LEVEL, buildGradleFile) + "...")
			if (!project.hasProperty('projectRootPackageName') || !project.hasProperty('projectGroupId') || !project.hasProperty('projectComponentId') || !project.hasProperty('projectDescription') || createVersionFile || createReadmeFile || createLicenseFile || createChangelogFile || createGraldeHomeProperties) 
				printNewline()
		}
		
		if (!project.hasProperty('projectRootPackageName')) {
			def numberPattern = ~"\\d+"
			def packageNameSplit = "${rootProject.name}".replace('-', '.').replace('_', '.').split('\\.')
			def rootPackageName = ""
			for (String name : packageNameSplit) {
				if (rootPackageName!=null && !rootPackageName.isEmpty()) {
					rootPackageName += "."
				}
				
				if (name ==~ numberPattern) {
					rootPackageName += "_"
				}
				rootPackageName += name
			}
			
			setCommonGradleProperty('projectRootPackageName', rootPackageName)
			printInfo("> Set project root package name to " + colorize(HIGHLITE_LEVEL, projectRootPackageName) + ", please define it in the gradle.properties:")
			printInfo("  e.g. " + colorize(TITLE_LEVEL, 'projectRootPackageName') + " = $projectRootPackageName")
			
			if (!project.hasProperty('projectGroupId') || !project.hasProperty('projectComponentId') || !project.hasProperty('projectDescription') || createVersionFile || createReadmeFile || createLicenseFile || createChangelogFile || createGraldeHomeProperties) 
				printNewline()
		}

		if (!project.hasProperty('projectGroupId')) {			
			setCommonGradleProperty('projectGroupId', "${rootProject.name}".replace("-", ".").split("\\.")[0])
			printInfo("> Set projectGroupId to " + colorize(HIGHLITE_LEVEL, projectRootPackageName) + ", please define it in the gradle.properties:")
			printInfo("  e.g. " + colorize(TITLE_LEVEL, 'projectGroupId') + " = $projectGroupId")
			
			if (!project.hasProperty('projectComponentId') || !project.hasProperty('projectDescription') || createVersionFile || createReadmeFile || createLicenseFile || createChangelogFile || createGraldeHomeProperties) 
				printNewline()
		}

		if (!project.hasProperty('projectComponentId')) {
			setCommonGradleProperty('projectComponentId', '')
			printInfo("> Set projectComponentId to " + colorize(HIGHLITE_LEVEL, rootProject.name) + ", please define it in the gradle.properties:")
			printInfo("  e.g. " + colorize(TITLE_LEVEL, 'projectComponentId') + " = '...'")
			
			if (!project.hasProperty('projectDescription') || createVersionFile || createReadmeFile || createLicenseFile || createChangelogFile || createGraldeHomeProperties) 
				printNewline()
		}
		
		if (!project.hasProperty('projectDescription')) {
			setCommonGradleProperty('description', rootProject.name)
			setCommonGradleProperty('projectDescription', rootProject.name)
			printInfo("> Set the description to " + colorize(HIGHLITE_LEVEL, projectRootPackageName) + ", please define it in the gradle.properties:")
			printInfo("  e.g. " + colorize(TITLE_LEVEL, 'projectDescription') + " = '...'")

			if (createVersionFile || createReadmeFile || createLicenseFile || createChangelogFile || createGraldeHomeProperties) 
				printNewline()
		}
		
		if (createVersionFile) {
			printInfo("> Created file " + colorize(HIGHLITE_LEVEL, versionFile) + "...")
			updateVersion()
			
			//if (createReadmeFile || createLicenseFile || createChangelogFile || createGraldeHomeProperties) 
			//	printNewline()
		}

		if (createReadmeFile) {
			logInfo("Write file " + colorize(HIGHLITE_LEVEL, readmeFile) + colorize(INFO_LEVEL, "..."))
			// https://gist.github.com/PurpleBooth/109311bb0361f32d87a2		
			if (!createFileFromTemplate(readmeFile, 'base/README.template')) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, readmeFile) + " with default values.")
				
				new File('.', readmeFile).withWriter { w ->
					w << "# Welcome to ${rootProject.name}" << NELINE \
					<< "${projectDescription}" << NELINE 
				}	
			}
			
			//if (createLicenseFile || createChangelogFile || createGraldeHomeProperties) 
			//	printNewline()
		}
		
		if (createLicenseFile) {
			logInfo("Write file " + colorize(HIGHLITE_LEVEL, licenseFile) + colorize(INFO_LEVEL ,"..."))
			if (!createFileFromTemplate(licenseFile, 'base/LICENSE.template')) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, licenseFile) + " with default values.")
				new File('.', licenseFile).withWriter { w ->
					w << "MIT License" << NELINE \
					<< "" << NELINE \
					<< "Copyright (c) ${YEAR} ${rootProject.name}" << NELINE \
					<< "" << NELINE \
					<< "Permission is hereby granted, free of charge, to any person obtaining a copy" << NELINE \
					<< "of this software and associated documentation files (the \"Software\"), to deal" << NELINE \
					<< "in the Software without restriction, including without limitation the rights" << NELINE \
					<< "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell" << NELINE \
					<< "copies of the Software, and to permit persons to whom the Software is" << NELINE \
					<< "furnished to do so, subject to the following conditions:" << NELINE \
					<< "" << NELINE \
					<< "The above copyright notice and this permission notice shall be included in all" << NELINE \
					<< "copies or substantial portions of the Software." << NELINE \
					<< "" << NELINE \
					<< "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR" << NELINE \
					<< "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY," << NELINE \
					<< "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE" << NELINE \
					<< "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER" << NELINE \
					<< "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM," << NELINE \
					<< "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE" << NELINE \
					<< "SOFTWARE." << NELINE
				}				
			}
		}

		if (createChangelogFile) {
			logInfo("Write file " + colorize(HIGHLITE_LEVEL, changelogFile) + colorize(INFO_LEVEL ,"..."))
			if (!createFileFromTemplate(changelogFile, 'base/changelog.template')) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, changelogFile) + " with default values.")
				new File('.', changelogFile).withWriter { w ->
					w << "# Changelog" << NELINE \
					<< "" << NELINE \
					<< "All notable changes to this project will be documented in this file." << NELINE \
					<< "" << NELINE \
					<< "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," << NELINE \
					<< "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." << NELINE \
					<< "" << NELINE \
					<< "## [Unreleased]" << NELINE \
					<< "" << NELINE
				}				
			}
		}
		
		if (createGraldeHomeProperties) {
			logInfo("Write file " + colorize(HIGHLITE_LEVEL, gradleHomePropertiesFile) + colorize(INFO_LEVEL ,"..."))
			if (!createFileFromTemplate(gradleHomePropertiesFile, 'base/gradlehome.properties.template')) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, gradleHomePropertiesFile) + " with default values.")
				new File(gradleHomePropertiesFile).withWriterAppend { w ->
					w << "/***************************************************************************************" << NELINE \
					<< " * Maven credentials" << NELINE \
					<< " ***************************************************************************************/" << NELINE \
					<< "mavenUsername =" << NELINE \
					<< "mavenPassword =" << NELINE \
					<< "" << NELINE \
					<< "" << NELINE \
					<< "/***************************************************************************************" << NELINE \
					<< " * Signing credentials" << NELINE \
					<< " ***************************************************************************************/" << NELINE \
					<< "signing.keyId =" << NELINE \
					<< "signing.password =" << NELINE \
					<< "signing.secretKeyRingFile =" << NELINE
				}				
			}
		}

		// if it doesn't exist
		if (createSettingsGralde) {
			if (!createFileFromTemplate(settingsGradleFile, 'base/settings.gradle.template')) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, settingsGradleFile) + " with default values.")
				new File('.', settingsGradleFile).withWriterAppend { w ->
					w << "rootProject.name    = \'${rootProject.name}\'" << NELINE
				}
			}
		}
		
		if (createGradleProperties) {
			def checkstyleToolVersion
			if (!project.hasProperty('checkstyleToolVersion')) {
				checkstyleToolVersion = "8.27"
			} else {
				checkstyleToolVersion = project.getProperty('checkstyleToolVersion')
			}

			def testDependencyVersion
			if (!project.hasProperty('testDependencyVersion')) {
				testDependencyVersion = "5.3.1"
			} else {
				testDependencyVersion = project.getProperty('testDependencyVersion')
			}

			if (!createFileFromTemplate(gradlePropertiesFile, 'base/gradle.properties.template')) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, gradlePropertiesFile) + " with default values.")
				new File('.', gradlePropertiesFile).withWriterAppend { w ->
					w << "# base information" << NELINE \
					<< "projectType             = ${projectType}" << NELINE \
					<< "projectRootPackageName  = ${projectRootPackageName}" << NELINE \
					<< "projectGroupId          = ${projectGroupId}" << NELINE \
					<< "projectComponentId      = ${projectComponentId}" << NELINE \
					<< "projectDescription      = ${projectDescription}" << NELINE \
					<< "projectUrl              = ${projectUrl}" << NELINE \
					<< "" << NELINE \
					<< "# jvm information" << NELINE \
					<< "org.gradle.jvmargs      = ${gradlePropertiesJvmArgs}" << NELINE \
					<< "" << NELINE \
					<< "# tool information" << NELINE \
					<< "# checkstyleToolVersion = ${checkstyleToolVersion}" << NELINE \
					<< "# testDependencyVersion = ${testDependencyVersion}" << NELINE \
					<< "# sourceCompatibility   = ${sourceCompatibility}" << NELINE \
					<< "# targetCompatibility   = ${targetCompatibility}" << NELINE \
					<< "" << NELINE
				}
			}
		}	

		if (createBuildGradle) {
			if (!createFileFromTemplate(buildGradleFile, 'build.gradle.template')) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, buildGradleFile) + " with default values.")
				new File('.', buildGradleFile).withWriterAppend { w ->
					w << "/*\n" \
					<< " * build.gradle" << NELINE \
					<< " * " << NELINE \
					<< " * Copyright by ${rootProject.name}, all rights reserved." << NELINE \
					<< " * ${licenseText}" << NELINE \
					<< " */" << NELINE \
					<< "apply from: 'gradle/jptools.gradle'" << NELINE \
					<< NELINE \
					<< NELINE \
					<< "/${LINE}" << NELINE \
					<< " * Define project dependencies" << NELINE \
					<< " ${LINE}/" << NELINE \
					<< "dependencies {" << NELINE \
					<< "\t//implementation 'net.sf.jptools:jptools:1.7.0'" << NELINE \
					<< "}" << NELINE
				}
			}
		}	
		
		printLine(ERROR_LEVEL, true)
	}

	/*
	if (rootProject.name != projectName) {
		printInfo("Current folder do not match with the project name:")
		printInfo("[" + colorize(HIGHLITE_LEVEL, rootProject.name) + "] " + colorize(TITLE_LEVEL, '!=') + " [" + colorize(HIGHLITE_LEVEL, projectName) + "]")
		printLine(HIGHLITE_LEVEL, true)
	}
	*/	
	setCommonGradleProperty('IS_VALID_PROJECT', true)
}


/***************************************************************************************
 * Create the common gradle build source path
 ***************************************************************************************/
ext.createCommonGradleBuildSourcesPath = { ->
	if (project.hasProperty('generatedCommonGradleBuildSources') && !project.getProperty('generatedCommonGradleBuildSources').isEmpty()) {
		def generatedCommonGradleBuildSources = project.getProperty('generatedCommonGradleBuildSources');
		new File(generatedCommonGradleBuildSources).mkdirs()
		logInfo("Generate source directory is " + colorize(INFO_LEVEL, generatedCommonGradleBuildSources))
	}
}