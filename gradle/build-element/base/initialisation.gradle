/*
 * initialisation.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */


/***************************************************************************************
 * Project initialisation
 ***************************************************************************************/
ext.projectInitialisation = { ->
	// check mandatory files
	def createSettingsGralde = !new File(settingsGradleFile).exists()
	def createGradleProperties = !new File(gradlePropertiesFile).exists()
	def createBuildGradle = !new File(buildGradleFile).exists()
	def createVersionFile = !new File(versionFile).exists()
	def createReadmeFile = !new File(readmeFile).exists()
	def createLicenseFile = !new File(licenseFile).exists()
	
	// validate properties
	def isReady = !createSettingsGralde \
					&& !createGradleProperties \
					&& !createBuildGradle \
					&& project.hasProperty('rootGroupId') && project.hasProperty('rootComponent') && project.hasProperty('rootPackageName') && project.hasProperty('rootDescription') \
					&& !createVersionFile \
					&& !createReadmeFile \
					&& !createLicenseFile 
	setCommonGradleProperty('IS_NEW', !isReady)
								
	if (!isReady) {
		printLine(ERROR_LEVEL)

		if (createSettingsGralde) {
			printInfo("Set root project name to " + colorize(HIGHLITE_LEVEL, rootProject.name) + ", created file " + colorize(HIGHLITE_LEVEL, settingsGradleFile) + "...")
			if (createGradleProperties || createBuildGradle || !project.hasProperty('rootPackageName') || !project.hasProperty('rootGroupId') || !project.hasProperty('rootComponent') || !project.hasProperty('rootDescription') || createVersionFile || createReadmeFile || createLicenseFile) 
				printNewline()
		}

		if (createGradleProperties) {
			printInfo("> Created file " + colorize(HIGHLITE_LEVEL, gradlePropertiesFile) + "...")
			if (createBuildGradle || !project.hasProperty('rootPackageName') || !project.hasProperty('rootGroupId') || !project.hasProperty('rootComponent') || !project.hasProperty('rootDescription')  || createVersionFile || createReadmeFile || createLicenseFile) 
				printNewline()
		}

		if (createBuildGradle) {
			printInfo("> Created file " + colorize(HIGHLITE_LEVEL, buildGradleFile) + "...")
			if (!project.hasProperty('rootPackageName') || !project.hasProperty('rootGroupId') || !project.hasProperty('rootComponent') || !project.hasProperty('rootDescription') || createVersionFile || createReadmeFile || createLicenseFile) 
				printNewline()
		}
		
		if (!project.hasProperty('rootPackageName')) {
			setCommonGradleProperty('rootPackageName', "${rootProject.name}".replace('-', '.').replace('_', '.'))
			printInfo("> Set root package name to " + colorize(HIGHLITE_LEVEL, rootPackageName) + ", please define it in the gradle.properties:")
			printInfo("e.g " + colorize(TITLE_LEVEL, 'rootPackageName') + " = $rootPackageName")
			
			if (!project.hasProperty('rootGroupId') || !project.hasProperty('rootComponent') || !project.hasProperty('rootDescription') || createVersionFile || createReadmeFile || createLicenseFile) 
				printNewline()
		}

		if (!project.hasProperty('rootGroupId')) {
			setCommonGradleProperty('rootGroupId', rootProject.name)
			printInfo("> Set rootGroupId to " + colorize(HIGHLITE_LEVEL, rootPackageName) + ", please define it in the gradle.properties:")
			printInfo("e.g " + colorize(TITLE_LEVEL, 'rootGroupId') + " = $rootPackageName")
			
			if (!project.hasProperty('rootComponent') || !project.hasProperty('rootDescription') || createVersionFile || createReadmeFile || createLicenseFile) 
				printNewline()
		}

		if (!project.hasProperty('rootComponent')) {
			setCommonGradleProperty('rootComponent', rootProject.name)
			printInfo("> Set rootComponent to " + colorize(HIGHLITE_LEVEL, rootProject.name) + ", please define it in the gradle.properties:")
			printInfo("e.g " + colorize(TITLE_LEVEL, 'rootComponent') + " = $rootProject.name")
			
			if (!project.hasProperty('rootDescription') || createVersionFile || createReadmeFile || createLicenseFile) 
				printNewline()
		}
		
		if (!project.hasProperty('rootDescription')) {
			setCommonGradleProperty('description', rootProject.name)
			setCommonGradleProperty('rootDescription', rootProject.name)
			printInfo("> Set the description to " + colorize(HIGHLITE_LEVEL, rootPackageName) + ", please define it in the gradle.properties:")
			printInfo("e.g " + colorize(TITLE_LEVEL, 'rootDescription') + " = '...'")

			//if (createVersionFile || createReadmeFile || createLicenseFile) 
			printNewline()
		}
		
		if (createVersionFile) {
			printInfo("> Created file " + colorize(HIGHLITE_LEVEL, versionFile) + "...")
			updateVersion()
			
			if (createReadmeFile || createLicenseFile) 
				printNewline()
		}

		if (createReadmeFile) {
			logInfo("Write file " + colorize(HIGHLITE_LEVEL, readmeFile) + colorize(INFO_LEVEL, "..."))
			// https://gist.github.com/PurpleBooth/109311bb0361f32d87a2
			def readmeTemplate = 'README.template'
			if (new File("${commonGradleTemplatePath}", "${readmeTemplate}").exists()) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, readmeFile) + " from template ${readmeTemplate}.")
				copy {
					from "${commonGradleTemplatePath}"
					include "${readmeTemplate}"
					into "."
					rename { String fileName -> fileName.replace(readmeTemplate, readmeFile) }
					filter { line -> line.replaceAll('@@YEAR@@', "${YEAR}".toString()) }
					filter { line -> line.replaceAll('@@NAME@@', "${rootProject.name}".toString()) }
					filter { line -> line.replaceAll('@@rootProject.name@@', "${rootProject.name}".toString()) }					
					filter { line -> line.replaceAll('@@rootGroupId@@', "${rootGroupId}".toString()) }
					filter { line -> line.replaceAll('@@rootComponent@@', "${rootComponent}".toString()) }					
					filter { line -> line.replaceAll('@@rootPackageName@@', "${rootPackageName}".toString()) }
					filter { line -> line.replaceAll('@@rootDescription@@', "${rootDescription}".toString()) }					
					filter { line -> line.replaceAll('@@LINE@@', "${LINE}".toString()) }
				}
			} else {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, readmeFile) + " with default values.")
				
				new File('.', readmeFile).withWriter { w ->
					w << "# Welcome to ${rootProject.name}" << NELINE \
					<< "${rootDescription}" << NELINE 
				}	
			}
			
			if (createLicenseFile) 
				printNewline()
		}

		if (createLicenseFile) {
			logInfo("Write file " + colorize(HIGHLITE_LEVEL, licenseFile) + colorize(INFO_LEVEL ,"..."))
			def licenseTemplate = 'LICENSE.template'
			if (new File("${commonGradleTemplateBasePath}", "${licenseTemplate}").exists()) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, licenseFile) + " from template ${licenseTemplate}.")
				copy {
					from "${commonGradleTemplateBasePath}"
					include "${licenseTemplate}"
					into "."
					rename { String fileName -> fileName.replace(licenseTemplate, licenseFile) }
					filter { line -> line.replaceAll('@@YEAR@@', "${YEAR}".toString()) }
					filter { line -> line.replaceAll('@@NAME@@', "${rootProject.name}".toString()) }
					filter { line -> line.replaceAll('@@rootProject.name@@', "${rootProject.name }".toString()) }					
					filter { line -> line.replaceAll('@@rootGroupId@@', "${rootGroupId}".toString()) }
					filter { line -> line.replaceAll('@@rootComponent@@', "${rootComponent}".toString()) }					
					filter { line -> line.replaceAll('@@rootPackageName@@', "${rootPackageName}".toString()) }
					filter { line -> line.replaceAll('@@LINE@@', "${LINE}".toString()) }
				}
			} else {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, licenseFile) + " with default values.")
				new File('.', licenseFile).withWriter { w ->
					w << "MIT License" << NELINE \
					<< "" << NELINE \
					<< "Copyright (c) ${YEAR} ${rootProject.name}" << NELINE \
					<< "" << NELINE \
					<< "Permission is hereby granted, free of charge, to any person obtaining a copy" << NELINE \
					<< "of this software and associated documentation files (the \"Software\"), to deal" << NELINE \
					<< "in the Software without restriction, including without limitation the rights" << NELINE \
					<< "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell" << NELINE \
					<< "copies of the Software, and to permit persons to whom the Software is" << NELINE \
					<< "furnished to do so, subject to the following conditions:" << NELINE \
					<< "" << NELINE \
					<< "The above copyright notice and this permission notice shall be included in all" << NELINE \
					<< "copies or substantial portions of the Software." << NELINE \
					<< "" << NELINE \
					<< "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR" << NELINE \
					<< "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY," << NELINE \
					<< "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE" << NELINE \
					<< "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER" << NELINE \
					<< "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM," << NELINE \
					<< "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE" << NELINE \
					<< "SOFTWARE." << NELINE
				}				
			}
		}
		
		// if it doesn't exist
		if (createSettingsGralde) {
			def settingsGradleTemplate = 'settings.gradle.template'
			if (new File("${commonGradleTemplateBasePath}", "${settingsGradleTemplate}").exists()) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, settingsGradleFile) + " from template ${settingsGradleTemplate}.")
				copy {
					from "${commonGradleTemplateBasePath}"
					include "${settingsGradleTemplate}"
					into "."
					rename { String fileName -> fileName.replace(settingsGradleTemplate, settingsGradleFile) }
					filter { line -> line.replaceAll('@@rootProject.name@@', "${rootProject.name }".toString()) }					
					filter { line -> line.replaceAll('@@rootGroupId@@', "${rootGroupId}".toString()) }
					filter { line -> line.replaceAll('@@rootComponent@@', "${rootComponent}".toString()) }					
					filter { line -> line.replaceAll('@@rootPackageName@@', "${rootPackageName}".toString()) }
					filter { line -> line.replaceAll('@@rootDescription@@', "${rootDescription}".toString()) }
					filter { line -> line.replaceAll('@@sourceCompatibility@@', "${sourceCompatibility}".toString()) }
					filter { line -> line.replaceAll('@@targetCompatibility@@', "${targetCompatibility}".toString()) }
					filter { line -> line.replaceAll('@@jvmarg@@', "${GRADLE_PROPERTIES_JVMARGS}".toString()) }
					filter { line -> line.replaceAll('@@YEAR@@', "${YEAR}".toString()) }
					filter { line -> line.replaceAll('@@LINE@@', "${LINE}".toString()) }
				}
			} else {		
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, settingsGradleFile) + " with default values.")
				new File('.', settingsGradleFile).withWriterAppend { w ->
					w << "rootProject.name    = \'${rootProject.name}\'" << NELINE
				}
			}
		}
		
		if (createGradleProperties) {
			setCommonGradleDefaultPropertyIfNull("rootGroupId", rootGroupId)
			setCommonGradleDefaultPropertyIfNull("rootComponent", rootComponent)
			setCommonGradleDefaultPropertyIfNull("rootPackageName", rootPackageName)
			setCommonGradleDefaultPropertyIfNull("rootDescription", rootDescription)
			setCommonGradleDefaultPropertyIfNull("rootUrl", rootUrl)
			setCommonGradleDefaultPropertyIfNull("sourceCompatibility", sourceCompatibility)
			setCommonGradleDefaultPropertyIfNull("targetCompatibility", targetCompatibility)

			def gradlePropertiesTemplate = 'gradle.properties.template'
			if (new File("${commonGradleTemplateBasePath}", "${gradlePropertiesTemplate}").exists()) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, gradlePropertiesFile) + " from template ${gradlePropertiesTemplate}.")
				copy {
					from "${commonGradleTemplateBasePath}"
					include "${gradlePropertiesTemplate}"
					into "."
					rename { String fileName -> fileName.replace(gradlePropertiesTemplate, gradlePropertiesFile) }
					filter { line -> line.replaceAll('@@rootProject.name@@', "${rootProject.name }".toString()) }					
					filter { line -> line.replaceAll('@@rootGroupId@@', "${rootGroupId}".toString()) }
					filter { line -> line.replaceAll('@@rootComponent@@', "${rootComponent}".toString()) }					
					filter { line -> line.replaceAll('@@rootPackageName@@', "${rootPackageName}".toString()) }
					filter { line -> line.replaceAll('@@rootDescription@@', "${rootDescription}".toString()) }
					filter { line -> line.replaceAll('@@rootUrl@@', "${rootUrl}".toString()) }					
					filter { line -> line.replaceAll('@@sourceCompatibility@@', "${sourceCompatibility}".toString()) }
					filter { line -> line.replaceAll('@@targetCompatibility@@', "${targetCompatibility}".toString()) }
					filter { line -> line.replaceAll('@@jvmarg@@', "${GRADLE_PROPERTIES_JVMARGS}".toString()) }
					filter { line -> line.replaceAll('@@YEAR@@', "${YEAR}".toString()) }
					filter { line -> line.replaceAll('@@LINE@@', "${LINE}".toString()) }
				}
			} else {		
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, gradlePropertiesFile) + " with default values.")
				new File('.', gradlePropertiesFile).withWriterAppend { w ->
					w << "rootPackageName     = ${rootPackageName}" << NELINE \
					<< "rootGroupId         = ${rootGroupId}" << NELINE \
					<< "rootComponent       = ${rootComponent}" << NELINE \
					<< "rootDescription     = ${rootDescription}" << NELINE \
					<< "rootUrl             = ${rootUrl}" << NELINE \
					<< "//sourceCompatibility = ${sourceCompatibility}" << NELINE \
					<< "//targetCompatibility = ${targetCompatibility}" << NELINE \
					<< "org.gradle.jvmargs  = ${GRADLE_PROPERTIES_JVMARGS}" << NELINE
				}
			}
		}	

		if (createBuildGradle) {
			def buildGradle = 'build.gradle.template'
			if (new File("${commonGradleTemplateBasePath}", "${buildGradle}").exists()) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, buildGradleFile) + " from template ${buildGradle}.")
				copy {
					from "${commonGradleTemplateBasePath}"
					include "${buildGradle}"
					into "."
					rename { String fileName -> fileName.replace(buildGradle, buildGradleFile) }
					filter { line -> line.replaceAll('@@rootProject.name@@', "${rootProject.name }".toString()) }					
					filter { line -> line.replaceAll('@@rootGroupId@@', "${rootGroupId}".toString()) }
					filter { line -> line.replaceAll('@@rootComponent@@', "${rootComponent}".toString()) }					
					filter { line -> line.replaceAll('@@rootPackageName@@', "${rootPackageName}".toString()) }
					filter { line -> line.replaceAll('@@rootDescription@@', "${rootDescription}".toString()) }
					filter { line -> line.replaceAll('@@sourceCompatibility@@', "${sourceCompatibility}".toString()) }
					filter { line -> line.replaceAll('@@targetCompatibility@@', "${targetCompatibility}".toString()) }
					filter { line -> line.replaceAll('@@jvmarg@@', "${GRADLE_PROPERTIES_JVMARGS}".toString()) }
					filter { line -> line.replaceAll('@@YEAR@@', "${YEAR}".toString()) }
					filter { line -> line.replaceAll('@@LINE@@', "${LINE}".toString()) }
				}
			} else {		
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, buildGradleFile) + " with default values.")
				new File('.', buildGradleFile).withWriterAppend { w ->
					w << "/*\n" \
					<< " * build.gradle" << NELINE \
					<< " * " << NELINE \
					<< " * Copyright by ${rootProject.name}, all rights reserved." << NELINE \
					<< " * ${LICENSE}" << NELINE \
					<< " */" << NELINE \
					<< "apply from: 'gradle/jptools.gradle'" << NELINE \
					<< NELINE \
					<< NELINE \
					<< "/${LINE}" << NELINE \
					<< " * Define project dependencies" << NELINE \
					<< " ${LINE}/" << NELINE \
					<< "dependencies {" << NELINE \
					<< "\t//implementation 'net.sf.jptools:jptools:1.7.0'" << NELINE \
					<< "}" << NELINE
				}
			}
		}	
		
		//wrapper.execute()
		printLine(ERROR_LEVEL)
	}

	
	/*
	if (rootProject.name != projectName) {
		printInfo("Current folder do not match with the project name:")
		printInfo("[" + colorize(HIGHLITE_LEVEL, rootProject.name) + "] " + colorize(TITLE_LEVEL, '!=') + " [" + colorize(HIGHLITE_LEVEL, projectName) + "]")
		printLine()
	}
	*/	
	setCommonGradleProperty('IS_VALID_PROJECT', true)
}


/***************************************************************************************
 * Create the common gradle build source path
 ***************************************************************************************/
ext.createCommonGradleBuildSourcesPath = { ->
	if (project.hasProperty('generatedCommonGradleBuildSources') && !project.getProperty('generatedCommonGradleBuildSources').isEmpty()) {
		def generatedCommonGradleBuildSources = project.getProperty('generatedCommonGradleBuildSources');
		new File(generatedCommonGradleBuildSources).mkdirs()
		logInfo("Generate source directory is " + colorize(INFO_LEVEL, generatedCommonGradleBuildSources))
	}
}