/*
 * initialisation.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */

apply from: "${commonGradleBuildElementPath}/base/constants.gradle"
apply from: "${commonGradleBuildElementPath}/base/path.gradle"
apply from: "${commonGradleBuildElementPath}/base/util.gradle"


/***************************************************************************************
 * Project initialisation
 ***************************************************************************************/
task projectInitialisation { 
	group = 'Verification'
	description = 'Project initialisation'

	// check mandatory files
	def createSettingsGralde = !new File(settingsGradleFile).exists()
	def createGradleProperties = !new File(gradlePropertiesFile).exists()
	def createBuildGradle = !new File(buildGradleFile).exists()
	def createVersionFile = !new File(versionFile).exists()
	def createReadmeFile = !new File(readmeFile).exists()
	def createLicenseFile = !new File(licenseFile).exists()
	
	// validate properties
	gradle.ext.isValidProject = !createSettingsGralde \
								&& !createGradleProperties \
								&& !createBuildGradle \
								&& project.hasProperty('rootGroupId') && project.hasProperty('rootPackageName') && project.hasProperty('rootDescription') \
								&& !createVersionFile \
								&& !createReadmeFile \
								&& !createLicenseFile 
								
	if (!gradle.ext.isValidProject) {
		println("${STYLER['red'](LINE)}")

		if (createSettingsGralde) {
			println("${INDENT}> Set root project name to ${STYLER['cyan'](rootProject.name)}, created file ${STYLER['cyan'](settingsGradleFile)}...")
			if (createGradleProperties || createBuildGradle || !project.hasProperty('rootPackageName') || !project.hasProperty('rootGroupId') || !project.hasProperty('rootDescription') || createVersionFile || createReadmeFile || createLicenseFile) 
				println("")
		}

		if (createGradleProperties) {
			println("${INDENT}> Created file ${STYLER['cyan'](gradlePropertiesFile)}...")
			if (createBuildGradle || !project.hasProperty('rootPackageName') || !project.hasProperty('rootGroupId') || !project.hasProperty('rootDescription')  || createVersionFile || createReadmeFile || createLicenseFile) 
				println("")
		}

		if (createBuildGradle) {
			println("${INDENT}> Created file ${STYLER['cyan'](buildGradleFile)}...")
			if (!project.hasProperty('rootPackageName') || !project.hasProperty('rootGroupId') || !project.hasProperty('rootDescription') || createVersionFile || createReadmeFile || createLicenseFile) 
				println("")
		}
		
		if (!project.hasProperty('rootPackageName')) {
			project.ext."rootPackageName" = "${rootProject.name}".replace('-', '.').replace('_', '.') 
			println("${INDENT}> Set root package name to ${STYLER['cyan'](rootPackageName)}, please define it in the gradle.properties:")
			println("${INDENT}e.g ${STYLER['yellow']('rootPackageName')} = $rootPackageName")
			ext.rootPackageName = rootPackageName
			
			if (!project.hasProperty('rootGroupId') || !project.hasProperty('rootDescription') || createVersionFile || createReadmeFile || createLicenseFile) 
				println("")
		}

		if (!project.hasProperty('rootGroupId')) {
			project.ext."rootGroupId" = rootProject.name			
			println("${INDENT}> Set rootGroupId to ${STYLER['cyan'](rootPackageName)}, please define it in the gradle.properties:")
			println("${INDENT}e.g ${STYLER['yellow']('rootGroupId')} = $rootPackageName")
			ext.rootGroupId = rootPackageName
			
			if (!project.hasProperty('rootDescription') || createVersionFile || createReadmeFile || createLicenseFile) 
				println("")
		}

		if (!project.hasProperty('rootDescription')) {
			project.ext."project.description" = rootProject.name
			println("${INDENT}> Set the description to ${STYLER['cyan'](rootPackageName)}, please define it in the gradle.properties:")
			println("${INDENT}e.g ${STYLER['yellow']('rootDescription')} = '...'")
			ext.rootDescription = rootProject.name
			ext.description = rootPackageName

			//if (createVersionFile || createReadmeFile || createLicenseFile) 
			println("")
		}
		
		if (createVersionFile) {
			logger.info "Write file " + versionFile + "..."
			new File('.', versionFile).withWriter { w ->
				w << "major.number        = ${project.ext.majorVersionNumber}" << NELINE \
				<< "minor.number        = ${project.ext.minorVersionNumber}" << NELINE \
				<< "revision.number     = ${project.ext.revisionVersionNumber}" << NELINE \
				<< "build.number        = ${project.ext.buildVersionNumber}" << NELINE 
			}	
			
			println("${INDENT}> Created file ${STYLER['cyan'](versionFile)}...")
			if (createReadmeFile || createLicenseFile) 
				println("")
		}

		if (createReadmeFile) {
			logger.info "Write file " + readmeFile + "..."
			// https://gist.github.com/PurpleBooth/109311bb0361f32d87a2
			def readmeTemplate = 'README.template'
			if (new File("${commonGradleTemplatePath}", "${readmeTemplate}").exists()) {
				println("${INDENT}> Create ${STYLER['cyan'](readmeFile)} from template ${readmeTemplate}.")
				copy {
					from "${commonGradleTemplatePath}"
					include "${readmeTemplate}"
					into "."
					rename { String fileName -> fileName.replace(readmeTemplate, readmeFile) }
					filter { line -> line.replaceAll('@@YEAR@@', "${YEAR}".toString()) }
					filter { line -> line.replaceAll('@@NAME@@', "${rootProject.name}".toString()) }
					filter { line -> line.replaceAll('@@rootProject.name@@', "${rootProject.name}".toString()) }					
					filter { line -> line.replaceAll('@@rootDescription@@', "${rootDescription}".toString()) }					
					filter { line -> line.replaceAll('@@LINE@@', "${LINE}".toString()) }
				}
			} else {
				println("${INDENT}> Create ${STYLER['cyan'](readmeFile)} with default values.")
				
				new File('.', readmeFile).withWriter { w ->
					w << "# Welcome to ${rootProject.name}" << NELINE \
					<< "${rootDescription}" << NELINE 
				}	
			}
			
			if (createLicenseFile) 
				println("")
		}

		if (createLicenseFile) {
			logger.info "Write file " + licenseFile + "..."
			def licenseTemplate = 'LICENSE.template'
			if (new File("${commonGradleTemplatePath}", "${licenseTemplate}").exists()) {
				println("${INDENT}> Create ${STYLER['cyan'](licenseFile)} from template ${licenseTemplate}.")
				copy {
					from "${commonGradleTemplatePath}"
					include "${licenseTemplate}"
					into "."
					rename { String fileName -> fileName.replace(licenseTemplate, licenseFile) }
					filter { line -> line.replaceAll('@@YEAR@@', "${YEAR}".toString()) }
					filter { line -> line.replaceAll('@@NAME@@', "${rootProject.name}".toString()) }
					filter { line -> line.replaceAll('@@rootProject.name@@', "${rootProject.name }".toString()) }					
					filter { line -> line.replaceAll('@@LINE@@', "${LINE}".toString()) }
				}
			} else {
				println("${INDENT}> Create ${STYLER['cyan'](licenseFile)} with default values.")
				new File('.', licenseFile).withWriter { w ->
					w << "MIT License" << NELINE \
					<< "" << NELINE \
					<< "Copyright (c) ${YEAR} ${rootProject.name}" << NELINE \
					<< "" << NELINE \
					<< "Permission is hereby granted, free of charge, to any person obtaining a copy" << NELINE \
					<< "of this software and associated documentation files (the \"Software\"), to deal" << NELINE \
					<< "in the Software without restriction, including without limitation the rights" << NELINE \
					<< "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell" << NELINE \
					<< "copies of the Software, and to permit persons to whom the Software is" << NELINE \
					<< "furnished to do so, subject to the following conditions:" << NELINE \
					<< "" << NELINE \
					<< "The above copyright notice and this permission notice shall be included in all" << NELINE \
					<< "copies or substantial portions of the Software." << NELINE \
					<< "" << NELINE \
					<< "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR" << NELINE \
					<< "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY," << NELINE \
					<< "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE" << NELINE \
					<< "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER" << NELINE \
					<< "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM," << NELINE \
					<< "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE" << NELINE \
					<< "SOFTWARE." << NELINE
				}				
			}
		}
		
		// if it doesn't exist
		if (createSettingsGralde) {
			def settingsGradleTemplate = 'settings.gradle.template'
			if (new File("${commonGradleTemplatePath}", "${settingsGradleTemplate}").exists()) {
				println("${INDENT}> Create ${STYLER['cyan'](settingsGradleFile)} from template ${settingsGradleTemplate}.")
				copy {
					from "${commonGradleTemplatePath}"
					include "${settingsGradleTemplate}"
					into "."
					rename { String fileName -> fileName.replace(settingsGradleTemplate, settingsGradleFile) }
					filter { line -> line.replaceAll('@@rootProject.name@@', "${rootProject.name }".toString()) }					
					filter { line -> line.replaceAll('@@rootGroupId@@', "${rootGroupId}".toString()) }
					filter { line -> line.replaceAll('@@rootPackageName@@', "${rootPackageName}".toString()) }
					filter { line -> line.replaceAll('@@rootDescription@@', "${rootDescription}".toString()) }
					filter { line -> line.replaceAll('@@sourceCompatibility@@', "${sourceCompatibility}".toString()) }
					filter { line -> line.replaceAll('@@targetCompatibility@@', "${targetCompatibility}".toString()) }
					filter { line -> line.replaceAll('@@jvmarg@@', "${GRADLE_PROPERTIES_JVMARGS}".toString()) }
					filter { line -> line.replaceAll('@@YEAR@@', "${YEAR}".toString()) }
					filter { line -> line.replaceAll('@@LINE@@', "${LINE}".toString()) }
				}
			} else {		
				println("${INDENT}> Create ${STYLER['cyan'](settingsGradleFile)} with default values.")
				new File('.', settingsGradleFile).withWriterAppend { w ->
					w << "rootProject.name    = \'${rootProject.name}\'" << NELINE
				}
			}
		}
		
		if (createGradleProperties) {
			def gradlePropertiesTemplate = 'gradle.properties.template'
			if (new File("${commonGradleTemplatePath}", "${gradlePropertiesTemplate}").exists()) {
				println("${INDENT}> Create ${STYLER['cyan'](gradlePropertiesFile)} from template ${gradlePropertiesTemplate}.")
				copy {
					from "${commonGradleTemplatePath}"
					include "${gradlePropertiesTemplate}"
					into "."
					rename { String fileName -> fileName.replace(gradlePropertiesTemplate, gradlePropertiesFile) }
					filter { line -> line.replaceAll('@@rootProject.name@@', "${rootProject.name }".toString()) }					
					filter { line -> line.replaceAll('@@rootPackageName@@', "${rootPackageName}".toString()) }
					filter { line -> line.replaceAll('@@rootGroupId@@', "${rootGroupId}".toString()) }
					filter { line -> line.replaceAll('@@rootDescription@@', "${rootDescription}".toString()) }
					filter { line -> line.replaceAll('@@rootUrl@@', "${rootUrl}".toString()) }					
					filter { line -> line.replaceAll('@@sourceCompatibility@@', "${sourceCompatibility}".toString()) }
					filter { line -> line.replaceAll('@@targetCompatibility@@', "${targetCompatibility}".toString()) }
					filter { line -> line.replaceAll('@@jvmarg@@', "${GRADLE_PROPERTIES_JVMARGS}".toString()) }
					filter { line -> line.replaceAll('@@YEAR@@', "${YEAR}".toString()) }
					filter { line -> line.replaceAll('@@LINE@@', "${LINE}".toString()) }
				}
			} else {		
				println("${INDENT}> Create ${STYLER['cyan'](gradlePropertiesFile)} with default values.")
				new File('.', gradlePropertiesFile).withWriterAppend { w ->
					w << "rootPackageName     = ${rootPackageName}" << NELINE \
					<< "rootGroupId         = ${rootGroupId}" << NELINE \
					<< "rootDescription     = ${rootDescription}" << NELINE \
					<< "rootUrl             = ${rootUrl}" << NELINE \
					<< "//sourceCompatibility = ${sourceCompatibility}" << NELINE \
					<< "//targetCompatibility = ${targetCompatibility}" << NELINE \
					<< "org.gradle.jvmargs  = ${GRADLE_PROPERTIES_JVMARGS}" << NELINE
				}
			}
		}	

		if (createBuildGradle) {
			def buildGradle = 'build.gradle.template'
			if (new File("${commonGradleTemplatePath}", "${buildGradle}").exists()) {
				println("${INDENT}> Create ${STYLER['cyan'](buildGradleFile)} from template ${buildGradle}.")
				copy {
					from "${commonGradleTemplatePath}"
					include "${buildGradle}"
					into "."
					rename { String fileName -> fileName.replace(buildGradle, buildGradleFile) }
					filter { line -> line.replaceAll('@@rootProject.name@@', "${rootProject.name }".toString()) }					
					filter { line -> line.replaceAll('@@rootPackageName@@', "${rootPackageName}".toString()) }
					filter { line -> line.replaceAll('@@rootGroupId@@', "${rootGroupId}".toString()) }
					filter { line -> line.replaceAll('@@rootDescription@@', "${rootDescription}".toString()) }
					filter { line -> line.replaceAll('@@sourceCompatibility@@', "${sourceCompatibility}".toString()) }
					filter { line -> line.replaceAll('@@targetCompatibility@@', "${targetCompatibility}".toString()) }
					filter { line -> line.replaceAll('@@jvmarg@@', "${GRADLE_PROPERTIES_JVMARGS}".toString()) }
					filter { line -> line.replaceAll('@@YEAR@@', "${YEAR}".toString()) }
					filter { line -> line.replaceAll('@@LINE@@', "${LINE}".toString()) }
				}
			} else {		
				println("${INDENT}> Create ${STYLER['cyan'](buildGradleFile)} with default values.")
				new File('.', buildGradleFile).withWriterAppend { w ->
					w << "/*\n" \
					<< " * build.gradle" << NELINE \
					<< " * " << NELINE \
					<< " * Copyright by ${rootProject.name}, all rights reserved." << NELINE \
					<< " * ${LICENSE}" << NELINE \
					<< " */" << NELINE \
					<< "apply from: 'gradle/jptools.gradle'" << NELINE \
					<< NELINE \
					<< NELINE \
					<< "/${LINE}" << NELINE \
					<< " * Define project dependencies" << NELINE \
					<< " ${LINE}/" << NELINE \
					<< "dependencies {" << NELINE \
					<< "\t//implementation 'net.sf.jptools:jptools:1.7.0'" << NELINE \
					<< "}" << NELINE
				}
			}
		}	
		
		//wrapper.execute()
		println("${STYLER['red'](LINE)}")
	}
	
	/*
	if (rootProject.name != projectName) {
		println("${INDENT}Current folder do not match with the project name:")
		println("${INDENT}[${STYLER['cyan'](rootProject.name)}] ${STYLER['yellow']('!=')} [${STYLER['cyan'](projectName)}]")
		println("${STYLER['cyan'](LINE)}")
	}
	*/
} 
