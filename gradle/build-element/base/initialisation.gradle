/*
 * initialisation.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */


/***************************************************************************************
 * Root directory handling
 ***************************************************************************************/ 
setCommonGradleProperty("defaultRootDirectory", ".")
 
// root: ${project.rootDir} project: ${project.projectDir} ${System.properties['user.dir'].replace('\\', '/')}
def userDir = "${System.properties['user.dir'].replace('\\', '/')}"
if (userDir.endsWith('/')) {
	userDir = userDir.substring(0, userDir.length() -1)
}

ext.cbProjectRootDir = "${project.rootDir}".replace('\\', '/')
if (cbProjectRootDir.endsWith('/')) {
	cbProjectRootDir = cbProjectRootDir.substring(0, cbProjectRootDir.length() -1)
}

if (!userDir.toString().equalsIgnoreCase(cbProjectRootDir.toString())) {
	setCommonGradleProperty("rootDirectory", "$cbProjectRootDir")
} else {
	setCommonGradleProperty("rootDirectory", "$defaultRootDirectory")
}

if (project.hasProperty('projectGroupId')) {
	group projectGroupId
}


/***************************************************************************************
 * Project initialisation
 ***************************************************************************************/
ext.projectInitialisation = { ->
	// check mandatory files
	def createSettingsGralde = !new File(settingsGradleFile).exists()
	def createGradleProperties = !new File(gradlePropertiesFile).exists()
	def createBuildGradle = !new File(buildGradleFile).exists()
	def createVersionFile = !new File(versionFile).exists()
	def createReadmeFile = !new File(readmeFile).exists()
	def createLicenseFile = !new File(licenseFile).exists()
	if (createLicenseFile && !"$rootDirectory/$licenseFilename".toString().equalsIgnoreCase(licenseFile.toString())) {
		// in case the license file not corresponds to a local file, just ignore
		createLicenseFile = false
	}
	
	def createChangelogFile = createChangelogFile && !new File(changelogFile).exists()
	def createEditorConfigFile = !new File(editorConfigFile).exists()
	def createGraldeHomeProperties = !new File(gradleHomePropertiesFile).exists()

	// detect a minimal build gradle file -> replace it
	if (project.hasProperty('detectMinimalBuildGradleFile') && (project.getProperty('detectMinimalBuildGradleFile') > 0)) {
		def numberOfLines = countLines(buildGradleFile)
		createBuildGradle = createBuildGradle || (numberOfLines > 0 && numberOfLines <= project.getProperty('detectMinimalBuildGradleFile'))
	}

	// validate properties
	def isReady = !createSettingsGralde \
					&& !createGradleProperties \
					&& !createBuildGradle \
					&& project.hasProperty('projectGroupId') && project.hasProperty('projectComponentId') && project.hasProperty('projectRootPackageName') && project.hasProperty('projectDescription') \
					&& !createVersionFile 

	setCommonGradleProperty('IS_NEW', !isReady)

	def onlineCheckConnectionUrl = project.getProperty('onlineCheckConnectionUrl')
	def onlineCheckConnectionUrlTimeout = project.getProperty('onlineCheckConnectionUrlTimeout')
	setCommonGradleProperty('HAS_ONLINE_CONNECTION', isServerAvailable(onlineCheckConnectionUrl, onlineCheckConnectionUrlTimeout))

	if (project.hasProperty('projectRootPackageName') && !project.hasProperty('projectParentPackageName')) {
		def projectParentPackageName = "${projectRootPackageName}".toString()

		def numberOfElements = project.getProperty('projectParentPackageElements')
		def rootPackaNameSplit = projectParentPackageName.toString().split('\\.')

		if (rootPackaNameSplit!=null && numberOfElements>0 && rootPackaNameSplit.length>0) {
			projectParentPackageName = rootPackaNameSplit[0]
			for (int i = 1; (i<=numberOfElements && i<rootPackaNameSplit.length); i++) {
				projectParentPackageName = projectParentPackageName + "." + rootPackaNameSplit[i];
			}
		}
		setCommonGradleProperty('projectParentPackageName', projectParentPackageName)
	}

	// read and set common gradle build version
	def versionUrl = commonGradleBuildUrl;
	while (versionUrl.endsWith('/')) {
		versionUrl = versionUrl.substring(0, versionUrl.length() - 1)		
	}
	
	def usedVersion = readRemoteVersion(versionUrl.substring(0, versionUrl.length() - 'gradle'.length()) + "VERSION")
	if (usedVersion !=null && !usedVersion.isEmpty()) {
		project.ext.set('commonGradleBuildVersion', usedVersion)
	}

    def buildToolVersionStackMessageFormatted = "Gradle " + colorize(HIGHLITE_LEVEL, "${gradle.gradleVersion}")
    def buildToolVersionStackMessage = "Gradle ${gradle.gradleVersion}"

	if (project.hasProperty('initShowGroovy') && project.getProperty('initShowGroovy')) {
		buildToolVersionStackMessageFormatted += ", Groovy " + colorize(HIGHLITE_LEVEL, GroovySystem.getVersion())
		buildToolVersionStackMessage += ", Groovy " + GroovySystem.getVersion()
	}
	
    buildToolVersionStackMessageFormatted += ", Common Gradle Build " + colorize(HIGHLITE_LEVEL, "${commonGradleBuildVersion}")
    buildToolVersionStackMessage += ", Common Gradle Build ${commonGradleBuildVersion}"

    def cbVersion = System.env['CB_VERSION']
    if (cbVersion!=null && !cbVersion.isEmpty()) {
		buildToolVersionStackMessageFormatted += ", Common Build " + colorize(HIGHLITE_LEVEL, "${cbVersion}")
        buildToolVersionStackMessage += ", Common Build ${cbVersion}"
    }

	def cbCustomConfigVersion=ext.cbCustomConfigVersion
	if (cbCustomConfigVersion==null || cbCustomConfigVersion.trim().isEmpty()) {
		def cbCustomConfig = System.env['CB_CUSTOM_CONFIG']
		if (cbCustomConfig!=null && !cbCustomConfig.isEmpty()) {
			def cbEnvCustomConfigVersion = System.env['CB_CUSTOM_CONFIG_VERSION']
			if (cbEnvCustomConfigVersion!=null && !cbEnvCustomConfigVersion.isEmpty()) {
				cbCustomConfigVersion=cbEnvCustomConfigVersion
				ext.cbCustomConfigVersion=cbEnvCustomConfigVersion
			}
		}
	}
	
	if (cbCustomConfigVersion!=null && !cbCustomConfigVersion.isEmpty()) {
		buildToolVersionStackMessageFormatted += ", ${commonGradleBuildCustomConfigName} " + colorize(HIGHLITE_LEVEL, "${cbCustomConfigVersion}")
		buildToolVersionStackMessage += ", ${commonGradleBuildCustomConfigName} ${cbCustomConfigVersion}"
	}
	
    project.ext.set('buildToolVersionStackMessageFormatted', buildToolVersionStackMessageFormatted)
    project.ext.set('buildToolVersionStackMessage', buildToolVersionStackMessage)

	// guess start executable
    def startExecutable = "gradle"
    if (cbVersion!=null && !cbVersion.isEmpty()) {
        startExecutable = "cb"
    } else if (new File("$rootDirectory/gradlew").exists() || new File("$rootDirectory/gradlew.bat").exists()) {
        startExecutable = "gradlew"
    }
	setCommonGradleProperty('startExecutable', startExecutable)
	
	isReady = isReady \
					&& !createGraldeHomeProperties \
					&& !createChangelogFile \
					&& !createReadmeFile \
					&& !createLicenseFile \
					&& !createEditorConfigFile

	if (!isReady) {
		printLine(ERROR_LEVEL, true)

		if (createSettingsGralde) {
			printInfo("Set root project name to " + colorize(HIGHLITE_LEVEL, rootProject.name) + ", created file " + colorize(HIGHLITE_LEVEL, settingsGradleFile) + "...")
		}

		if (createGradleProperties) {
			printInfo("> Created file " + colorize(HIGHLITE_LEVEL, gradlePropertiesFile) + "...")
		}

		if (createBuildGradle) {
			printInfo("> Created file " + colorize(HIGHLITE_LEVEL, buildGradleFile) + "...")
		}

		if (!project.hasProperty('projectRootPackageName')) {
			def numberPattern = ~"\\d+"
			def packageNameSplit = "${rootProject.name}".replace('-', '.').replace('_', '.').split('\\.')
			def rootPackageName = ""
			for (String name : packageNameSplit) {
				if (rootPackageName!=null && !rootPackageName.isEmpty()) {
					rootPackageName += "."
				}

				if (name ==~ numberPattern) {
					rootPackageName += "_"
				}
				rootPackageName += name
			}

			setCommonGradleProperty('projectRootPackageName', rootPackageName)
			printInfo("> Set project root package name to " + colorize(HIGHLITE_LEVEL, projectRootPackageName) + ", please define it in the gradle.properties:")
			printInfo("  e.g. " + colorize(TITLE_LEVEL, 'projectRootPackageName') + " = $projectRootPackageName")

			if (!project.hasProperty('projectGroupId') || !project.hasProperty('projectComponentId') || !project.hasProperty('projectDescription') || createVersionFile || createReadmeFile || createLicenseFile || createChangelogFile || createEditorConfigFile || createGraldeHomeProperties)
				printNewline()
		}

		if (!project.hasProperty('projectGroupId')) {
			setCommonGradleProperty('projectGroupId', "${rootProject.name}".replace("-", ".").split("\\.")[0])
			printInfo("> Set projectGroupId to " + colorize(HIGHLITE_LEVEL, projectRootPackageName) + ", please define it in the gradle.properties:")
			printInfo("  e.g. " + colorize(TITLE_LEVEL, 'projectGroupId') + " = $projectGroupId")

			if (!project.hasProperty('projectComponentId') || !project.hasProperty('projectDescription') || createVersionFile || createReadmeFile || createLicenseFile || createChangelogFile || createEditorConfigFile || createGraldeHomeProperties)
				printNewline()
		}

		if (!project.hasProperty('projectComponentId')) {
			def projectComponentIdDefault = ''
			if (project.hasProperty('projectComponentIdIsPartOfProjectName') && project.getProperty('projectComponentIdIsPartOfProjectName')) {
				def projectComponentIdSeparator = "-"
				if (project.hasProperty('projectComponentIdSeparator')) {
					projectComponentIdSeparator = project.getProperty('projectComponentIdSeparator')
				}

				def nameSplit = "${rootProject.name}".split(projectComponentIdSeparator)
				if (nameSplit.length > 1) {
					projectComponentIdDefault = nameSplit[0]
				}
			}

			setCommonGradleProperty('projectComponentId', projectComponentIdDefault)
			printInfo("> Set projectComponentId to " + colorize(HIGHLITE_LEVEL, rootProject.name) + ", please define it in the gradle.properties:")
			printInfo("  e.g. " + colorize(TITLE_LEVEL, 'projectComponentId') + " = $projectComponentIdDefault")

			if (!project.hasProperty('projectDescription') || createVersionFile || createReadmeFile || createLicenseFile || createChangelogFile || createEditorConfigFile || createGraldeHomeProperties)
				printNewline()
		}

		if (!project.hasProperty('projectDescription')) {
			setCommonGradleProperty('description', rootProject.name)
			setCommonGradleProperty('projectDescription', rootProject.name)
			printInfo("> Set the description to " + colorize(HIGHLITE_LEVEL, projectRootPackageName) + ", please define it in the gradle.properties:")
			printInfo("  e.g. " + colorize(TITLE_LEVEL, 'projectDescription') + " = '...'")

			if (createVersionFile || createReadmeFile || createLicenseFile || createChangelogFile || createEditorConfigFile || createGraldeHomeProperties)
				printNewline()
		}

		if (createVersionFile) {
			printInfo("> Created file " + colorize(HIGHLITE_LEVEL, versionFile) + "...")
			updateVersion()
		}

		if (createReadmeFile) {
			logInfo("Write file " + colorize(HIGHLITE_LEVEL, readmeFile) + colorize(INFO_LEVEL, "..."))
			// https://gist.github.com/PurpleBooth/109311bb0361f32d87a2
			if (!createFileFromTemplate(readmeFile, getTemplateFile('README.template'))) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, readmeFile) + " with default values.")

				new File(readmeFile).withWriter { w ->
					w << "# Welcome to ${rootProject.name}" << NELINE \
					<< "${projectDescription}" << NELINE
				}
			}
		}

		if (createLicenseFile) {
			logInfo("Write file " + colorize(HIGHLITE_LEVEL, licenseFile) + colorize(INFO_LEVEL ,"..."))
			if (!createFileFromTemplate(licenseFile, getTemplateFile('LICENSE.template'))) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, licenseFile) + " with default values.")
				new File(licenseFile).withWriter { w ->
					w << "MIT License" << NELINE \
					<< "" << NELINE \
					<< "Copyright (c) ${YEAR} ${licenseOrganisation}" << NELINE \
					<< "" << NELINE \
					<< "Permission is hereby granted, free of charge, to any person obtaining a copy" << NELINE \
					<< "of this software and associated documentation files (the \"Software\"), to deal" << NELINE \
					<< "in the Software without restriction, including without limitation the rights" << NELINE \
					<< "to use, copy, modify, merge, publish, distribute, sublicense, and/or sell" << NELINE \
					<< "copies of the Software, and to permit persons to whom the Software is" << NELINE \
					<< "furnished to do so, subject to the following conditions:" << NELINE \
					<< "" << NELINE \
					<< "The above copyright notice and this permission notice shall be included in all" << NELINE \
					<< "copies or substantial portions of the Software." << NELINE \
					<< "" << NELINE \
					<< "THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR" << NELINE \
					<< "IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY," << NELINE \
					<< "FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE" << NELINE \
					<< "AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER" << NELINE \
					<< "LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM," << NELINE \
					<< "OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE" << NELINE \
					<< "SOFTWARE." << NELINE
				}
			}
		}

		if (createChangelogFile) {
			logInfo("Write file " + colorize(HIGHLITE_LEVEL, changelogFile) + colorize(INFO_LEVEL ,"..."))
			readVersion()
			if (!createFileFromTemplate(changelogFile, getTemplateFile('CHANGELOG.template'))) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, changelogFile) + " with default values.")
				new File(changelogFile).withWriter { w ->
					w << "# ${rootProject.name}" << NELINE \
					<< "" << NELINE \
					<< "All notable changes to this project will be documented in this file." << NELINE \
					<< "" << NELINE \
					<< "The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/)," << NELINE \
					<< "and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html)." << NELINE \
					<< "" << NELINE \
					<< "##  ${project.ext.majorVersionNumber}.${project.ext.minorVersionNumber}.${project.ext.revisionVersionNumber} - " + DATE << NELINE \
					<< "### Changed" << NELINE \
					<< "- " << NELINE \
					<< "" << NELINE
				}
			}
		}

		if (createEditorConfigFile) {
			logInfo("Write file " + colorize(HIGHLITE_LEVEL, editorConfigFile) + colorize(INFO_LEVEL ,"..."))
			if (!createFileFromTemplate(editorConfigFile, getTemplateFile('editorconfig.template'))) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, editorConfigFile) + " with default values.")
				new File(editorConfigFile).withWriter { w ->
					w << "# editor config: https://editorconfig.org" << NELINE \
					<< "root = true" << NELINE \
					<< "" << NELINE \
					<< "[*]" << NELINE \
					<< "charset = utf-8" << NELINE \
					<< "indent_style = space" << NELINE \
					<< "indent_size = 4" << NELINE \
					<< "end_of_line = lf" << NELINE \
					<< "insert_final_newline = true" << NELINE \
					<< "trim_trailing_whitespace = true" << NELINE \
					<< "" << NELINE \
					<< "[*.{js, json}]" << NELINE \
					<< "indent_size = 2" << NELINE \
					<< "" << NELINE \
					<< "[*.sh, Makefile]" << NELINE \
					<< "indent_style = tab" << NELINE \
					<< "" << NELINE \
					<< "[*.{bat, cmd, ps1}]" << NELINE \
					<< "end_of_line = crlf" << NELINE \
					<< "" << NELINE \
					<< "[*.md]" << NELINE \
					<< "insert_final_newline = false" << NELINE \
					<< "trim_trailing_whitespace = false" << NELINE \
					<< "" << NELINE
				}
			}
		}

		if (createGraldeHomeProperties) {
			logInfo("Write file " + colorize(HIGHLITE_LEVEL, gradleHomePropertiesFile) + colorize(INFO_LEVEL ,"..."))
			if (!createFileFromTemplate(gradleHomePropertiesFile, getTemplateFile('gradlehome.properties.template'))) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, gradleHomePropertiesFile) + " with default values.")
				new File(gradleHomePropertiesFile).withWriterAppend { w ->
					w << "/***************************************************************************************" << NELINE \
					<< " * Maven credentials" << NELINE \
					<< " ***************************************************************************************/" << NELINE \
					<< "mavenUsername =" << NELINE \
					<< "mavenPassword =" << NELINE \
					<< "" << NELINE \
					<< "" << NELINE \
					<< "/***************************************************************************************" << NELINE \
					<< " * Signing credentials" << NELINE \
					<< " ***************************************************************************************/" << NELINE \
					<< "signing.keyId =" << NELINE \
					<< "signing.password =" << NELINE \
					<< "signing.secretKeyRingFile =" << NELINE
				}
			}
		}

		// if it doesn't exist
		if (createSettingsGralde) {
			if (!createFileFromTemplate(settingsGradleFile, getTemplateFile('settings.gradle.template'))) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, settingsGradleFile) + " with default values.")
				new File(settingsGradleFile).withWriter { w ->
					w << "rootProject.name    = \'${rootProject.name}\'" << NELINE
				}
			}
		}

		if (createGradleProperties) {
			def checkstyleToolVersion
			if (!project.hasProperty('checkstyleToolVersion')) {
				checkstyleToolVersion = "8.27"
			} else {
				checkstyleToolVersion = project.getProperty('checkstyleToolVersion')
			}

			def testDependencyVersion
			if (!project.hasProperty('testDependencyVersion')) {
				testDependencyVersion = "5.6.2"
			} else {
				testDependencyVersion = project.getProperty('testDependencyVersion')
			}

			if (!createFileFromTemplate(gradlePropertiesFile, getTemplateFile('gradle.properties.template'))) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, gradlePropertiesFile) + " with default values.")
				new File(gradlePropertiesFile).withWriterAppend { w ->
					w << "# base information" << NELINE \
					<< "projectType              = ${projectType}" << NELINE \
					<< "projectRootPackageName   = ${projectRootPackageName}" << NELINE \
					<< "projectGroupId           = ${projectGroupId}" << NELINE \
					<< "projectComponentId       = ${projectComponentId}" << NELINE \
					<< "projectDescription       = ${projectDescription}" << NELINE \
					<< "projectUrl               = ${projectUrl}" << NELINE \
					<< "" << NELINE \
					<< "# tool information" << NELINE \
					<< "# checkstyleToolVersion = ${checkstyleToolVersion}" << NELINE \
					<< "# testDependencyVersion = ${testDependencyVersion}" << NELINE \
					<< "# sourceCompatibility   = ${sourceCompatibility}" << NELINE \
					<< "# targetCompatibility   = ${targetCompatibility}" << NELINE \
					<< "" << NELINE \
					<< "# jvm information" << NELINE \
					<< "org.gradle.jvmargs       = ${project.ext.gradlePropertiesJvmArgs}" << NELINE \
					<< "org.gradle.logging.level = ${project.ext.gradlePropertiesLogLevel}" << NELINE \
					<< "org.gradle.console       = ${project.ext.gradlePropertiesConsole}" << NELINE \
					<< "org.gradle.warning.mode  = ${project.ext.gradlePropertiesWarningMode}" << NELINE \
					<< "" << NELINE
				}
			}
		}

		if (createBuildGradle) {
			if (!createFileFromTemplate(buildGradleFile, getTemplateFile('build.gradle.template'))) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, buildGradleFile) + " with default values.")
				new File(buildGradleFile).withWriter { w ->
					w << "/*" << NELINE \
					<< " * build.gradle" << NELINE \
					<< " * " << NELINE \
					<< " * Copyright by ${licenseOrganisation}, all rights reserved." << NELINE \
					<< " * ${licenseText}" << NELINE \
					<< " */" << NELINE \
					<< "apply from: \"${defaultCommonGradleBuildUrl}\"" << NELINE \
					<< NELINE \
					<< NELINE \
					<< "/${STAR_LINE}" << NELINE \
					<< " * Define project dependencies" << NELINE \
					<< " ${STAR_LINE}/" << NELINE \
					<< "dependencies {" << NELINE \
					<< "\t// see https://docs.gradle.org/current/userguide/java_library_plugin.html" << NELINE \
					<< "\t// e.g.: implementation \"net.sf.jptools:jptools:$commonGradleJptoolsVersion\"" << NELINE \
					<< "}" << NELINE
				}
			}
		}

		printLine(ERROR_LEVEL, true)
		printNewline()
	}

	setCommonGradleProperty('IS_VALID_PROJECT', true)
}


/** 
 * Check if it is online or not
 */
ext.isOnline = { ->	
	if (!gradle.startParameter.isOffline()) {
		return project.hasProperty('HAS_ONLINE_CONNECTION') && project.getProperty('HAS_ONLINE_CONNECTION')
	}
	
	return false
}


/***************************************************************************************
 * Create the common gradle build source path
 ***************************************************************************************/
ext.createCommonGradleBuildSourcesPath = { ->
	if (project.hasProperty('generatedCommonGradleBuildSources') && !project.getProperty('generatedCommonGradleBuildSources').isEmpty()) {
		def generatedCommonGradleBuildSources = project.getProperty('generatedCommonGradleBuildSources');
		new File(generatedCommonGradleBuildSources).mkdirs()
		logInfo("Generate source directory is " + colorize(INFO_LEVEL, generatedCommonGradleBuildSources))
	}
}


/***************************************************************************************
 * Check if the project type has a different template
 ***************************************************************************************/
ext.getTemplateFile = { templateFilename, defaultProjectTypeTemplatePath='base' ->
	def projectTypeTemplatePath = defaultProjectTypeTemplatePath
	
    try {
		def theTemplatePath = project.getProperty('commonGradleTemplatePath')
		
        if (project.hasProperty('projectTypeTemplatePath')) {
			def projectSpecificSubPath = project.getProperty('projectTypeTemplatePath')
			if (new File(theTemplatePath+"/"+projectSpecificSubPath+"/"+templateFilename).exists()) {
				projectTypeTemplatePath = projectSpecificSubPath
			}
		}

		if (project.hasProperty('commonGradleBuildHome') ) {
			def commonGradleBuildHome = project.getProperty('commonGradleBuildHome')
			if (commonGradleBuildHome!=null && !"${commonGradleBuildHome}".isEmpty() && new File(commonGradleBuildHome).exists()) {
				def homeTemplatePath = commonGradleBuildHome + "/gradle/" + project.getProperty('commonGradleTemplatePathName')
				
				if (project.hasProperty('projectTypeTemplatePath')) {
					def projectSpecificSubPath = project.getProperty('projectTypeTemplatePath')
					if (new File(homeTemplatePath+"/"+projectSpecificSubPath+"/"+templateFilename).exists()) {
						projectTypeTemplatePath = projectSpecificSubPath
					}
				}
				
				if (new File(homeTemplatePath+"/"+projectTypeTemplatePath+"/"+templateFilename).exists()) {
					logDebug("Take from home project-type template path: " + projectTypeTemplatePath+"/"+templateFilename + "!")
					return projectTypeTemplatePath+"/"+templateFilename; // no home directory to return; will be handled in file.gradle
				}
			}
		}

        if (new File(theTemplatePath+"/"+projectTypeTemplatePath+"/"+templateFilename).exists()) {
			logDebug("Take from project-type template path: " + projectTypeTemplatePath+"/"+templateFilename + "!")
			return projectTypeTemplatePath+"/"+templateFilename;
        }
    } catch (Exception e) {
        printWarn("Could not read proper template: " + e.getMessage())
    }

    return projectTypeTemplatePath+"/"+templateFilename
}

