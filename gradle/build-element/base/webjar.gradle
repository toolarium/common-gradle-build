/*
 * webjar.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */


/***************************************************************************************
 * far webJar support
 ***************************************************************************************/
configurations {
	webJar
/*  
		withDependencies { DependencySet dependencies ->
			printInfo dependencies
		}
*/		
}
configurations.webJar {
	transitive = false

	attributes {
		attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_API))
	}
}


/****************************************************************************************
 * Build fat webJar
 ****************************************************************************************/
task buildFatWebJar {  ->
	onlyIf { return validBuild }

	doLast {
		def fatWebClassifierContext = ""
		if (project.hasProperty("fatWebClassifierContext") && !project.getProperty("fatWebClassifierContext").toString().isEmpty()) {
			fatWebClassifierContext = "-" + project.getProperty("fatWebClassifierContext")
		}

		def fatWebSubContext = ""
		if (project.hasProperty("fatWebSubContext") && !project.getProperty("fatWebSubContext").toString().isEmpty()) {
			fatWebSubContext = project.getProperty("fatWebSubContext")
		}

		def fatWebJarPathName = "web"
		if (project.hasProperty("fatWebJarPathName") && !project.getProperty("fatWebJarPathName").toString().isEmpty()) {
			fatWebJarPathName = project.getProperty("fatWebJarPathName")
		}

        def fatWebFilename = "${gradleBuildDirectory}/libs/${project.name}-${project.version}${fatWebClassifierContext}.jar"
		if (project.hasProperty('createFatJar') && project.getProperty('createFatJar').toString().trim().equalsIgnoreCase("true")) {
			printInfo("> Create web fat-jar " + colorize(HIGHLITE_LEVEL, "${fatWebFilename}".replace('\\', '/').replace("$gradleBuildDirectory/", "")) + "...")
			def distWebPath = "${gradleBuildDirectory}/$fatWebJarPathName"
            mkdir "$distWebPath"
            mkdir "$distWebPath/${commonGradleBuildDistName}"

            def sourceFilename = "";
			def sourceJarFilePath = "${gradleBuildDirectory}/libs";
            configurations.webJar.collect {
                if (it.getName().toString().startsWith("${webServerRunnerName}".toString())) {
                    printInfo("  -> Use lib dependency " + colorize(HIGHLITE_LEVEL, it.getName()) + "...")
                    copyFile(""+it, "$sourceJarFilePath/" + it.getName().toString(), true)
                    sourceFilename = it.getName().toString()
                }
            }

			def sourceJarFile = "$sourceJarFilePath/${sourceFilename}";
			if (sourceFilename!=null && new File(sourceJarFile).exists()) {
				if (new File("${commonGradleBuildDistPath}").exists()) {
					if (!"${fatWebSubContext}".toString().isBlank()) {
						mkdir "$distWebPath/${commonGradleBuildDistName}/${fatWebSubContext}"
						copy { from "${commonGradleBuildDistPath}" into "${distWebPath}/${commonGradleBuildDistName}/${fatWebSubContext}" }
					} else {
						copy { from "${commonGradleBuildDistPath}" into "${distWebPath}/${commonGradleBuildDistName}" }
					}
				}
				
				if (!"$dockerSubPathAccess".toString().equals("$fatWebSubContext".toString())) {
					printInfo("> Apply source files path from " + colorize(HIGHLITE_LEVEL, dockerSubPathAccess) + " -> " + colorize(HIGHLITE_LEVEL, fatWebSubContext) + " (in " + colorize(HIGHLITE_LEVEL, "${distWebPath}/${commonGradleBuildDistName}/") + ")...")
					def savedApiCalls = replaceFilesInPath("${project.rootDir}".replace('\\', '/') + "/${distWebPath}/${commonGradleBuildDistName}/".toString(), null, "api/${dockerSubPathAccess}", "__PROTECTED__") // save API calls					
					def filesReplaced = []
					if (project.getProperty("fatWebSubContext").toString().equals("/")) {
						filesReplaced += replaceFilesInPath("${project.rootDir}".replace('\\', '/') + "/${distWebPath}/${commonGradleBuildDistName}/".toString(), null, "/${dockerSubPathAccess}", "$fatWebSubContext")
					}
					filesReplaced += replaceFilesInPath("${project.rootDir}".replace('\\', '/') + "/${distWebPath}/${commonGradleBuildDistName}/".toString(), null, "$dockerSubPathAccess", "$fatWebSubContext")
					def restoredApiCalls = replaceFilesInPath("${project.rootDir}".replace('\\', '/') + "/${distWebPath}/${commonGradleBuildDistName}/".toString(), null, "__PROTECTED__", "api/${dockerSubPathAccess}") // restore API calls				
					logInfo("  -> Updated files " + colorize(HIGHLITE_LEVEL, "" + filesReplaced) + colorize(INFO_LEVEL, "."))
					printInfo("  -> Updated " + colorize(HIGHLITE_LEVEL, "" + filesReplaced.size()) + " file(s).")
					buildServiceProperties("${distWebPath}", "${servicePropertiesName}", "${fatWebSubContext}", "${gradlePropertiesFile}", "fatWebSubContext"); 
					
					setCommonGradleProperty("dockerSubPathAccessBackup", "$dockerSubPathAccess") // backup
					setCommonGradleProperty("dockerSubPathAccess", "$fatWebSubContext") // overwrite dockerSubPathAccess temporary
					createFileFromTemplate("${distWebPath}/${webServerRunnerPropertiesName}", getTemplateFile("${webServerRunnerPropertiesName}.template", 'base'), true /*overwrite*/, true /*print*/, true /*replace*/, NELINE /*only nl*/)
					setCommonGradleProperty("dockerSubPathAccess", "$dockerSubPathAccessBackup") // restore
				} else {
					buildServiceProperties("${distWebPath}", "${servicePropertiesName}", "${fatWebSubContext}", "${gradlePropertiesFile}", "dockerSubPathAccess"); 
					createFileFromTemplate("${distWebPath}/${webServerRunnerPropertiesName}", getTemplateFile("${webServerRunnerPropertiesName}.template", 'base'), true /*overwrite*/, true /*print*/, true /*replace*/, NELINE /*only nl*/)
				}
				
				buildFatJar("${distWebPath}", "${sourceJarFile}", "${fatWebFilename}", true)
			}
        } else {
			if (new File(fatWebFilename).exists()) {
				delete fatWebFilename
			}
        }
    }
}


if (!project.getProperty('IS_NEW')) {
	if (project.hasProperty('createFatJar') && project.getProperty('createFatJar').toString().trim().equalsIgnoreCase("true")) {
		logInfo("Enable build webserver fat jar.")
		
		dependencies {
			webJar "${webServerRunnerPackage}:${webServerRunnerName}:${webServerRunnerVersion}"
		}
	}
}
