/*
 * logger.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */

 
/** 
 * Print line
 */
ext.colorize = { color = HIGHLITE_LEVEL, message ->
	return "${STYLER[color](message)}"	
}


/** 
 * Log debug message
 */
ext.logDebug = { message ->
	logger.debug colorize(DEBUG_LEVEL, "${LOGPREFIX}${message}")
}


/** 
 * Log info message
 */
ext.logInfo = { message ->
	logger.info colorize(INFO_LEVEL, "${LOGPREFIX}${message}")
}


ext.numberOfMessages = 0
ext.newLogSection = {
	numberOfMessages = 0
}


/** 
 * Print warn message
 */
ext.printWarn = { message ->
	def msg = "${LOGPREFIX}${message}"
	println("${INDENT}" + colorize(WARN_LEVEL, msg))
	
	if (gradle.startParameter.getLogLevel() == org.gradle.api.logging.LogLevel.QUIET) {
		numberOfMessages++
	}
}


/** 
 * Print info message
 */
ext.printInfo = { message ->
	println("${INDENT}" + message)
	
	if (gradle.startParameter.getLogLevel() == org.gradle.api.logging.LogLevel.QUIET) {
		numberOfMessages++
	}
}


/** 
 * Print newline
 */
ext.printNewline = { ->
	println("")
}


/** 
 * Print line
 */
ext.printLine = { color = HIGHLITE_LEVEL, force = false, message = null ->

	if (force || numberOfMessages > 0) {
		def msg = LINE.toString()
		if (message != null) {
			if (message.length() < msg.length()) {
				msg = msg.substring(message.length()) + message
			} else {
				msg = message
			}
			msg
		}
		
		println(colorize(color, msg))	
	}
	
	newLogSection()
}
