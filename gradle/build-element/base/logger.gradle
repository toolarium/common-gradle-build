/*
 * logger.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */

 
/** 
 * Prepare colorized string
 */
ext.colorize = { color = HIGHLITE_LEVEL, message ->
    if (detectANSISupport()) {
	     return "${STYLER[color](message)}"	
	} else {
	     return message	
	}
}


/** 
 * Log debug message
 */
ext.logDebug = { message ->
	logger.debug colorize(DEBUG_LEVEL, "${LOGPREFIX}${message}")
}


/** 
 * Log info message
 */
ext.logInfo = { message ->
	logger.info colorize(INFO_LEVEL, "${LOGPREFIX}${message}")
}


ext.numberOfMessages = 0
ext.newLogSection = {
	numberOfMessages = 0
}


/** 
 * Print warn message
 */
ext.printWarn = { message ->
	def msg = "${LOGPREFIX}${message}"
	println("${INDENT}" + colorize(WARN_LEVEL, msg))
	
	if (gradle.startParameter.getLogLevel() == org.gradle.api.logging.LogLevel.QUIET) {
		numberOfMessages++
	}
}


/** 
 * Print info message
 */
ext.printInfo = { message ->
	println("${INDENT}" + message)
	
	if (gradle.startParameter.getLogLevel() == org.gradle.api.logging.LogLevel.QUIET) {
		numberOfMessages++
	}
}


/** 
 * Print newline
 */
ext.printNewline = { ->
	println("")
}


/** 
 * Print line
 */
ext.printLine = { color = HIGHLITE_LEVEL, force = false, message = null ->
	if (force || numberOfMessages > 0) {
		def msg = LINE.toString()
		if (message != null) {
			if (message.length() < msg.length()) {
				msg = msg.substring(message.length()) + message
			} else {
				msg = message
			}
			msg
		}
		
		println(colorize(color, msg))	
	}
	
	newLogSection()
}


/*  // gradle logger:
	import org.gradle.internal.logging.text.StyledTextOutput;
	import org.gradle.internal.logging.text.StyledTextOutputFactory;
	import static org.gradle.internal.logging.text.StyledTextOutput.Style;
	import org.gradle.internal.logging.console.DefaultAnsiFactory;

    // see https://newbedev.com/gradle-color-output
    //      https://github.com/gradle/gradle/blob/master/subprojects/logging/src/main/java/org/gradle/internal/logging/services/LoggingBackedStyledTextOutput.java
	//	  https://github.com/gradle/gradle/blob/master/subprojects/logging/src/main/java/org/gradle/internal/logging/text/StyledTextOutput.java

    def log = services.get(StyledTextOutputFactory).create("an-ouput")
    log.withStyle(Style.Error).println('text')
  
    def ansi = new DefaultAnsiFactory(false).create()
    ansi.isEnabled()
	ansi.isDetected()

    // sample: log.style(Style.Normal).text("Normal" + log.getClass().getName()).println('line')
    log.style(Style.Normal).text('Normal')
	    .style(Style.Header).text('Header')
	    .style(Style.UserInput).text('UserInput')
	    .style(Style.Identifier).text('Identifier')
	    .style(Style.Description).text('Description')
	    .style(Style.ProgressStatus).text('ProgressStatus')
	    .style(Style.Success).text('Success')
	    .style(Style.SuccessHeader).text('SuccessHeader')
	    .style(Style.Failure).text('Failure')
	    .style(Style.FailureHeader).text('FailureHeader')
	    .style(Style.Info).text('Info')
	    .style(Style.Error).text('Error').println('line')
	
	StyledTextOutput.Style.values().each {
        log.style(it).println("This line has the style $it")
    }
*/
