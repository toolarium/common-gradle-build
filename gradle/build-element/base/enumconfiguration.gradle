/*
 * enumconfiguration.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */
 
buildscript {
	repositories {
        if (Integer.valueOf(gradle.gradleVersion.toString().split('\\.')[0])<7) {
			jcenter()
		} else {
			mavenCentral()
			maven {
				url "https://mvnrepository.com/artifact"
				
			}
		}
	}
	dependencies {
		def toolariumEnumConfigurationVersion="1.2.0"
		if (project.hasProperty('toolariumEnumConfigurationVersion')) {
			toolariumEnumConfigurationVersion = project.getProperty('toolariumEnumConfigurationVersion')
		}
		logInfo("toolarium enum-configuration version: " + colorize(HIGHLITE_LEVEL, toolariumEnumConfigurationVersion) + colorize(INFO_LEVEL, ".")); 
		classpath "com.github.toolarium:toolarium-enum-configuration:${toolariumEnumConfigurationVersion}"
	}
}


/****************************************************************************************
 * Create an enum configuration index file
 ****************************************************************************************/
import com.github.toolarium.enumeration.configuration.resource.EnumConfigurationResourceFactory;
import com.github.toolarium.enumeration.configuration.dto.EnumConfigurations;
import com.github.toolarium.enumeration.configuration.dto.EnumConfiguration;
import com.github.toolarium.enumeration.configuration.dto.EnumKeyConfiguration;
import java.util.Set;

ext.createEnumConfigurationIndex = { inputPath, indexFilename ->

	def enumConfigurationIndexFile = new File(indexFilename)
	logInfo("> Create enum configuration " + colorize(HIGHLITE_LEVEL, "${enumConfigurationIndexFile}".replace('\\', '/').replace("$gradleBuildDirectory/", "")) + "...")
	enumConfigurationIndexFile.append(startJsonElement())
	enumConfigurationIndexFile.append(startJsonElement(1, 'enum-configuration-mapping', true))
		new File(inputPath).mkdirs()

	def counter = 0
	new File(inputPath).eachFileRecurse (groovy.io.FileType.FILES) { file ->
		def is = file.newInputStream()
		EnumConfigurations enumConfigurations = EnumConfigurationResourceFactory.getInstance().load(is)
		is.close()

		if (counter>0) {
			enumConfigurationIndexFile.append(endJsonElement(2))
			enumConfigurationIndexFile.append(',' + NELINE)
			enumConfigurationIndexFile.append(startJsonElement(2))
		}

		def enumConfigurationCounter = 0
		for (def enumConfiguration : enumConfigurations.getEnumConfigurationList()) {
			if (enumConfigurationCounter>0) {
				enumConfigurationIndexFile.append(endJsonElement(2))
				enumConfigurationIndexFile.append(',' + NELINE)
				enumConfigurationIndexFile.append(startJsonElement(2))
			}
					
			// add index
			//enumConfigurationIndexFile.append(createJsonKeyValueElement(3, "name", file.getName().replace(".json", "")) + ',' + NELINE)
			enumConfigurationIndexFile.append(createJsonKeyValueElement(3, "name", enumConfiguration.getName()) + ',' + NELINE)
			
			def separator = ""
			if ((enumConfiguration.getInterfaceList()!=null && !enumConfiguration.getInterfaceList().isEmpty()) || (enumConfiguration.getMarkerInterfaceList()!=null && !enumConfiguration.getMarkerInterfaceList().isEmpty())) {
				separator = ","
			}
			enumConfigurationIndexFile.append(createJsonKeyValueElement(3, "reference", file.getName().replace(".json", "")) + separator + NELINE)
			
			if (enumConfiguration.getInterfaceList()!=null && !enumConfiguration.getInterfaceList().isEmpty()) {
				separator = ""
				if (enumConfiguration.getInterfaceList()!=null && !enumConfiguration.getMarkerInterfaceList().isEmpty()) {
					separator = ","
				}
				
				enumConfigurationIndexFile.append(createJsonArray(3, "interfaceList", enumConfiguration.getInterfaceList()) + separator + NELINE)
			}
			
			if (enumConfiguration.getInterfaceList()!=null && !enumConfiguration.getMarkerInterfaceList().isEmpty()) {
				enumConfigurationIndexFile.append(createJsonArray(3, "markerInterfaceList", enumConfiguration.getMarkerInterfaceList()) + NELINE)
			}
			
			enumConfigurationCounter++
		}
		
		counter++
	}	
	
	enumConfigurationIndexFile.append(endJsonElement(1, true) + NELINE)
	enumConfigurationIndexFile.append(endJsonElement())
}


/****************************************************************************************
 * Validate enum conifguration
 ****************************************************************************************/
ext.validateEnumConfiguration = { inputPath ->
	if (!new File(inputPath).exists()) {
		return;
	}
	
	try {
		logInfo("> Validate enum-configuration " + colorize(HIGHLITE_LEVEL, "${inputPath}".replace('\\', '/').replace("$gradleBuildDirectory/", "")) + "...")
		def files=[]
		new File(inputPath).eachFileRecurse (groovy.io.FileType.FILES) { file ->
			files << file
		}

		def keyMap = [:]
		files.sort{a,b -> a.name <=> b.name}.each{ file ->
			logInfo("  -> Found enum-configuration " + colorize(HIGHLITE_LEVEL, file.getName()) + "...")
			def serviceName = file.getName().replace(".json", "")
			def is = file.newInputStream()
			EnumConfigurations enumConfigurations = EnumConfigurationResourceFactory.getInstance().load(is)
			is.close()

			Set<EnumConfiguration<? extends EnumKeyConfiguration>> set = enumConfigurations.getEnumConfigurationList();
			for (def e : set) {
				for (def keyElement : e.getKeyList()) {
					logInfo("    -> Verify enum-configuration " + colorize(HIGHLITE_LEVEL, serviceName) + ": " + colorize(HIGHLITE_LEVEL, e.getName() + "#" + keyElement.getKey()))
					def uniqueKey = "" + e.getName() + "#" + keyElement.getKey()
					if (!keyMap.containsKey(uniqueKey)) {
						keyMap[uniqueKey] = serviceName
						// e.getDescription();
						// e.isConfidential();
					} else {
						def failOnError = ("true".equalsIgnoreCase("" + project.getProperty('isReleaseVersion')) || (project.hasProperty("enumConfigurationFailOnSnapshotBuild") && project.getProperty("enumConfigurationFailOnSnapshotBuild")));
						printWarn("Duplicate enum-configuration key found " + colorize(HIGHLITE_LEVEL, keyElement.getKey()) + colorize(WARN_LEVEL, ". Defined in "
									+ colorize(HIGHLITE_LEVEL, keyMap[uniqueKey]) + colorize(WARN_LEVEL, " and "))  + colorize(HIGHLITE_LEVEL, serviceName) + colorize(WARN_LEVEL, "!")) 
						if (failOnError) {
							addError("Duplicate enum-configuration found: " + keyElement.getKey() + ".")
						}
					}
				}
			}
		}	
	} catch (FileNotFoundException en) {
	}
}


/****************************************************************************************
 * Create an enum configuration file with missing default value file
 ****************************************************************************************/
ext.createEnumConfigurationMandatoryWithMissingDefaultValue = { inputPath, fileName ->
	// prepare mandatory configuration without default values

	if (!new File(inputPath).exists()) {
		return;
	}
	
	def enumConfigurationMandatoryWithMissingDefaultValueFile = new File(fileName)
	logInfo("> Create enum-configuration " + colorize(HIGHLITE_LEVEL, "${fileName}".replace('\\', '/').replace("$gradleBuildDirectory/", "")) + "...")
	enumConfigurationMandatoryWithMissingDefaultValueFile.append(startJsonElement())
	enumConfigurationMandatoryWithMissingDefaultValueFile.append(startJsonElement(1, 'enum-configuration-to-initialize', true))

	def counter = 0
	try {
		def files=[]
		new File(inputPath).eachFileRecurse (groovy.io.FileType.FILES) { file ->
			files << file
		}

		files.sort{a,b -> a.name <=> b.name}.each{ file ->
			logInfo("  -> Found enum-configuration " + colorize(HIGHLITE_LEVEL, file.getName()) + "...")
			def is = file.newInputStream()
			EnumConfigurations enumConfigurations = EnumConfigurationResourceFactory.getInstance().load(is)
			is.close()

			Set<EnumConfiguration<? extends EnumKeyConfiguration>> set = enumConfigurations.selectMandatoryConfigurationListWithMissingDefaultValue();
			if (!set.isEmpty()) {
				if (counter>0) {
					enumConfigurationMandatoryWithMissingDefaultValueFile.append(endJsonElement(2))
					enumConfigurationMandatoryWithMissingDefaultValueFile.append(',' + NELINE)
					enumConfigurationMandatoryWithMissingDefaultValueFile.append(startJsonElement(2))
				}

				//enumConfigurationMandatoryWithMissingDefaultValueFile.append(createJsonKeyValueElement(3, "name", file.getName().replace(".json", "")) + ',' + NELINE)
				def serviceName = file.getName().replace(".json", "")
				enumConfigurationMandatoryWithMissingDefaultValueFile.append(createJsonKeyValueElement(3, "service-name", serviceName) + ',' + NELINE)
			
				def enumConfigurationCounter = 0
				enumConfigurationMandatoryWithMissingDefaultValueFile.append(startJsonElement(3, 'configurationList', true))
				for (def e : set) {
					if (enumConfigurationCounter>0) {
						enumConfigurationMandatoryWithMissingDefaultValueFile.append(endJsonElement(4))
						enumConfigurationMandatoryWithMissingDefaultValueFile.append(',' + NELINE)
						enumConfigurationMandatoryWithMissingDefaultValueFile.append(startJsonElement(4))
					}
					
					enumConfigurationMandatoryWithMissingDefaultValueFile.append(createJsonKeyValueElement(5, "name", e.getName()) + ',' + NELINE)

					def keyList = []
					for (def keyElement : e.getKeyList()) {
						logInfo("    -> Add mandatory configuration without default value: " + colorize(HIGHLITE_LEVEL, e.getName() + " -> " + keyElement.getKey()))
						keyList << keyElement.getKey()
					}
					enumConfigurationMandatoryWithMissingDefaultValueFile.append(createJsonArray(5, "keyList", keyList) + NELINE)
					enumConfigurationCounter++
				}
				enumConfigurationMandatoryWithMissingDefaultValueFile.append(endJsonElement(3, true) + NELINE)
				
				counter++
			}
		}	
	} catch (FileNotFoundException en) {
	}
	
	enumConfigurationMandatoryWithMissingDefaultValueFile.append(endJsonElement(1, true) + NELINE)
	enumConfigurationMandatoryWithMissingDefaultValueFile.append(endJsonElement())
}


/****************************************************************************************
 * Combine the enum configuration
 ****************************************************************************************/
task prepareEnumConfigurationIndex() {
	group = 'Build'
	description = 'Create enum configuration index'

	doLast {
		def toInitializeTempFile=getUniqueTempName("${rootProject.name}", "${kubernetesEnumConfigurationToInitialize}", null)
		new File("$kubernetesApplicationInformationPath").mkdirs()
		
		if (new File("$kubernetesApplicationInformationPath/${kubernetesEnumConfigurationPathname}").exists()) {
			validateEnumConfiguration("$kubernetesApplicationInformationPath/${kubernetesEnumConfigurationPathname}")
			createEnumConfigurationMandatoryWithMissingDefaultValue("$kubernetesApplicationInformationPath/${kubernetesEnumConfigurationPathname}", toInitializeTempFile)

			def mappingTempFile=getUniqueTempName("${rootProject.name}", "${kubernetesEnumConfigurationMapping}", null)
			createEnumConfigurationIndex("$kubernetesApplicationInformationPath/${kubernetesEnumConfigurationPathname}", mappingTempFile)

			copyFile(toInitializeTempFile, "$kubernetesApplicationInformationPath/$kubernetesEnumConfigurationPathname/${kubernetesEnumConfigurationToInitialize}", true)

			String mappingFileContent = new File(mappingTempFile).text
			int idx = mappingFileContent.lastIndexOf('}')
			if (idx>=0) {
				mappingFileContent = mappingFileContent.substring(0, idx - 1)
				mappingFileContent += "," + NELINE
				
				mappingFileContent += startJsonElement(1, 'to-initialize', true)
				mappingFileContent += createJsonKeyValueElement(3, "reference", kubernetesEnumConfigurationToInitialize.toString().replace(".json", "")) + NELINE
				mappingFileContent += endJsonElement(1, true) + NELINE
				mappingFileContent += endJsonElement()
				new File(mappingTempFile).write(mappingFileContent)
			}
			
			delete toInitializeTempFile
			copyFile(mappingTempFile, "$kubernetesApplicationInformationPath/$kubernetesEnumConfigurationPathname/${kubernetesEnumConfigurationMapping}", true)
			delete mappingTempFile
		}
	}
}
