/*
 * ansi-support.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */

 
/**
 * Detect ansi support
 */
ext.detectANSISupport = { ->
    if ((ext.has("org.gradle.console") && "plain".equalsIgnoreCase(ext.get("org.gradle.console").toString().trim())) || (project.hasProperty("org.gradle.console") && "plain".equalsIgnoreCase(project.getProperty("org.gradle.console").toString().trim()))) {
        project.ext.set("termColors", TermColors.NONE.toString())
    } else {
        if (!project.ext.has("termColors") || project.ext.get("termColors").toString().isEmpty()) {
            project.ext.set("termColors", selectTermColorsSupport().toString())
	    }
    }
	
    return !("NONE".equals(project.ext.get("termColors")));
}


/**
 * Defines term colors
 */
public enum TermColors { NONE, ANSI16, ANSI256, TRUECOLOR; }


/**
 * Returns the best guess at the current terminal's support for ANSI colors.
 * This will always return `NONE` if [isConsoleAvailable()] returns false.
 *
 * @param default The value to return if support can't be detected.
 * @see https://github.com/ajalt/mordant/blob/master/mordant/src/main/kotlin/com/github/ajalt/mordant/TerminalCapabilities.kt
 */
import org.gradle.internal.logging.text.StyledTextOutput;
import org.gradle.internal.logging.text.StyledTextOutputFactory;
import static org.gradle.internal.logging.text.StyledTextOutput.Style;
ext.selectTermColorsSupport = { ->
	// consoles built in to some IDEs/Editors support color, but always cause System.console() to return null
	if (isIntellijConsole()) {
		return TermColors.ANSI16
	}		
	
	if (isRunningInEclipe()) {
		return TermColors.NONE;
	}

	if (hasEnvironmentValueSet("TERM_PROGRAM", "vscode")) {
		return TermColors.ANSI256; // github.com/Microsoft/vscode/pull/30346
	}

	//if (!isConsoleAvailable()) {
	//	return TermColors.NONE;
	//}

	if (hasEnvironmentValueSet("COLORTERM", "24bit") || (hasEnvironmentValueSet("COLORTERM", "truecolor"))) {
		return TermColors.TRUECOLOR;
	}

	if (hasEnvironmentValueSet("TERM_PROGRAM", "hyper")) {
		return TermColors.TRUECOLOR; // stackoverflow.com/q/7052683
	}

	if (hasEnvironmentValueSet("TERM_PROGRAM", "apple_terminal")) {
		return TermColors.ANSI256;
	}

	if (hasEnvironmentValueSet("TERM_PROGRAM", "iterm.app")) {			
		def value = getEnvironmentValue("TERM_PROGRAM_VERSION");
		if (value!=null && !value.isEmpty()) {
			def ver = parseInteger(value)
			if (ver!=null && ver>=3) {
				return TermColors.TRUECOLOR;
			}				
			return TermColors.ANSI256;
		}
	}

	if (System.getProperty("os.name").toLowerCase().contains("windows")) {
		// new versions of windows 10 cmd.exe supports truecolor, and most other terminal emulators
		// like ConEmu and mintty support truecolor, although they might downsample it.
		return TermColors.TRUECOLOR;
	}
	
	def term = getEnvironmentValue("TERM");
	if (term==null || term.isEmpty()) {
		return TermColors.NONE;
	}
	
	if (term.endsWith("-256color") || term.endsWith("-256")) {
		return TermColors.ANSI256
	}

	if (term.equalsIgnoreCase("cygwin")) {
		return TermColors.ANSI256;
	}

	if (term.equalsIgnoreCase("xterm")
		|| term.equalsIgnoreCase("vt100")
		|| term.equalsIgnoreCase("screen")
		|| term.equalsIgnoreCase("ansi")
		|| term.equalsIgnoreCase("rxvt")) {
		return TermColors.ANSI16;			
	}

	if (term.equalsIgnoreCase("dumb")) {
		return TermColors.NONE;
	}
	
	return TermColors.NONE
}


// Although we really want to know if stdout is a tty regardless of stdin, this is the best the java gives
// us. We might want to add some JNI code to do that in the future.
/** Return true if stdout and stdin are both ttys. */
private boolean isConsoleAvailable() {
	return System.console() != null
}

private String getEnvironmentValue(String environmentVariableName) {
	def value = System.getenv(environmentVariableName);		
	if (value!=null && !value.isEmpty()) {
		return value.toString().toLowerCase();
	}		
	return "";
}

private boolean hasEnvironmentValueSet(String environmentVariableName, String value) {
	return getEnvironmentValue(environmentVariableName).equalsIgnoreCase(value);
}

private boolean isRunningInEclipe() {
    def eclipseVMArgs = System.getProperty("eclipse.vmargs");
    def eclipseCommands = System.getProperty("eclipse.commands");
	def eclipseBuildId = System.getProperty("eclipse.buildId");
    return (eclipseVMArgs!=null && !eclipseVMArgs.isEmpty()) || (eclipseCommands!=null && !eclipseCommands.isEmpty()) || (eclipseBuildId!=null && !eclipseBuildId.isEmpty())
}

private boolean isIntellijConsole() {
	if (java.lang.management.ManagementFactory.getRuntimeMXBean() != null) {
		try {
			def bean = java.lang.management.ManagementFactory.getRuntimeMXBean();
			def jvmArgs = bean.inputArguments;
			return jvmArgs.any { it.startsWith("-javaagent") && "idea_rt.jar" in it }
		} catch (SecurityException e) {
			return false;
		}
	}
	
	return false;
}
