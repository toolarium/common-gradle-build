/*
 * json.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */


buildscript {
	repositories {
		jcenter()
	}
	dependencies {
		def snakeYamlVersion="1.27"
		if (project.hasProperty('snakeYamlVersion')) {
			snakeYamlVersion = project.getProperty('snakeYamlVersion')
		}

	    logInfo("snale yaml version: ${snakeYamlVersion}")	
		classpath "org.yaml:snakeyaml:${snakeYamlVersion}"
	}
}


/** 
 * Prepare indention string
 */
ext.indentJsonString = { indention = 0, doubleIndention = true ->
	def result = ''
	
	if (indention<=0) {
		return result
	}
	
	for (int i = 0; i<indention; i++) {
		result += INDENT
	
		if(doubleIndention) {
			result += INDENT
		}
	}
	
	return result
}


/** 
 * Prepare json tag name
 */
ext.prepareJsonTagName = { inputTagName, boolean withQuotationMarks = true ->
	def result = inputTagName
	if (inputTagName!=null) {
		result = ''
		if (withQuotationMarks) {
			result += QUOTATION_MARKS
		}
		
		result += "${inputTagName}".replace(QUOTATION_MARKS, '').replace('\r','').replace('\t','').replace('\n', '').trim()
		
		if (withQuotationMarks) {
			result += QUOTATION_MARKS
		}
	}
	
	return result
}


/** 
 * Start JSON element
 */
ext.startJsonElement = { indention = 0, jsonTagName = null, isArray = false ->
	def result = indentJsonString(indention)
	if (jsonTagName!=null && !jsonTagName.toString().trim().isEmpty()) {
		result += prepareJsonTagName(jsonTagName) + ': '
	}
	
	if (isArray) {
		result += '['
		result += NELINE
		result += indentJsonString(indention + 1)
	} 
	
	result += BRACE_START
	result += NELINE
	return result
}


/** 
 * End JSON element
 */
ext.endJsonElement = { indention = 0, isArray = false ->
	def result = ''

	if (isArray) {
		result += indentJsonString(indention + 1)
		result += BRACE_END
		result += NELINE
		result += indentJsonString(indention)
		result += ']'
	} else {
		result += indentJsonString(indention)	
		result += BRACE_END
	}

	return result
}


/** 
 * Start JSON element
 */
ext.createJsonKeyValueElement = { indention = 0, key, value = '' ->
	def result = indentJsonString(indention)
	if (name!=null && !name.toString().trim().isEmpty()) {
		result += prepareJsonTagName(key) + ': ' + prepareJsonTagName(value)
	}

	return result
}


/** 
 * Start JSON element
 */
ext.createJsonArrayElement = { indention = 0, arrayName, arrayList = [] ->
	def result = startJsonElement(indention, arrayName, true)
	
	if (arrayList!=null && arrayList.size()>0) {
		for (int i = 0; i<arrayList.size(); i++) {
			result += indentJsonString(indention + 2) + arrayList[i]
			if (i<arrayList.size()-1) {
				result += ','
			}
			result += NELINE
		}
	}

	result += endJsonElement(indention, true)
	return result
}


/** 
 * Start JSON element
 */
ext.createJsonArray = { indention = 0, arrayName, arrayList = [] ->
	def result = indentJsonString(indention)
	if (arrayName!=null && !arrayName.toString().trim().isEmpty()) {
		result += prepareJsonTagName(arrayName) + ': '
	}
	
	result += '['
	result += NELINE

	if (arrayList!=null && arrayList.size()>0) {
		for (int i = 0; i<arrayList.size(); i++) {
			def value = '"' + arrayList[i] + '"'
			result += indentJsonString(indention + 1) + value
			if (i<arrayList.size()-1) {
				result += ','
			}
			result += NELINE
		}
	}

	result += indentJsonString(indention)
	result += ']'
	return result
}
