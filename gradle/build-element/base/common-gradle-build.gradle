/*
 * common-gradle-build.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */

 
/***************************************************************************************
 * Read the remote version
 ***************************************************************************************/
ext.readRemoteVersion = { inputUrl, gitUrl=null ->
	def hasOnlineConnection = project.hasProperty('HAS_ONLINE_CONNECTION') && project.getProperty('HAS_ONLINE_CONNECTION')
	if (!hasOnlineConnection) {
		return ""
	}
	
	def url = inputUrl
	if (url.startsWith('file/')) {
		url = 'file:/' + url.substring(4)
	} 
	if (url.startsWith('file://')) {
		url = 'file:/' + url.substring(7)
	} 

	def remoteVersion = null
	try {
		Properties props = new Properties();
		
		if (!url.startsWith('file') && !url.startsWith('http')) {
			props.load(new FileInputStream(new File(url)))
		} else {
			props.load(new URL(url).openStream())
		}

		def majorNumber = props.getProperty("major.number")
		def minorNumber = props.getProperty("minor.number")
		def revisionNumber = props.getProperty("revision.number")
		def qualifier = props.getProperty("qualifier")
		
		remoteVersion = majorNumber + "." + minorNumber;	
		if (revisionNumber!=null) {
			remoteVersion += "." + revisionNumber
		} else if (qualifier!=null) { 
			remoteVersion += "." + qualifier
		}
	} catch (Exception e) {
		if (gitUrl!=null) {
			def tempFolder=getUniqueTempName("cgb", "update", null)			
			logDebug("Create temp path " + colorize(HIGHLITE_LEVEL, tempFolder))			
			logDebug("> Get remote version of " + colorize(HIGHLITE_LEVEL, gitUrl) + " into " + colorize(HIGHLITE_LEVEL, tempFolder) + ".")
			gitClone(tempFolder, gitUrl)
				
			def tempVersion="${tempName}-VERSION"
			logDebug("Filter VERSION file " + colorize(HIGHLITE_LEVEL, tempVersion))
			copy { from "${tempFolder}" include "VERSION" into "${tempBaseFolder}" rename { String fileName -> fileName.replace("VERSION", tempVersion) } }
			logDebug("Delete folder " + colorize(HIGHLITE_LEVEL, tempFolder))
			delete tempFolder
			logDebug("Read temp VERSION file " + colorize(HIGHLITE_LEVEL, "$tempBaseFolder/$tempVersion"))
			remoteVersion=readRemoteVersion("file:/$tempBaseFolder/$tempVersion")
			logDebug("Delete file " + colorize(HIGHLITE_LEVEL, "$tempBaseFolder/$tempVersion"))
			delete "$tempBaseFolder/$tempVersion"
			logDebug("Read remote version: ${remoteVersion}")
		}
		
		if (remoteVersion==null) {
			printWarn("Could not read remote version [" + colorize(HIGHLITE_LEVEL, url) + colorize(WARN_LEVEL, "]: " +e.getMessage())) 
		}
	}
	
	return remoteVersion
}


/***************************************************************************************
 * Read last check
 ***************************************************************************************/
ext.readLastCheck = { filename ->
	def lastCheck = null		
	if (new File(filename).exists()) {
		InputStream stream = null
		try {
			stream = new FileInputStream(new File(filename))
			Properties prop = new Properties()
			prop.load(stream)
			def value = prop.getProperty("lastCheck")

			if (value!=null && !value.isEmpty()) {
				lastCheck = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").parse(value)
			}
		} catch (Exception ex) {
			printWarn("Could not read [" + colorize(HIGHLITE_LEVEL, filename) + colorize(WARN_LEVEL, "]: " + ex.getMessage())) 
		} finally {
			if (stream!=null) {
				try {
				 stream.close()
				} catch (Exception cex) {
				}
			}
		}		
	}
	
	return lastCheck
}


/***************************************************************************************
 * Read last version
 ***************************************************************************************/
ext.readLastVersion = { filename ->
	def lastVersion = null		
	if (new File(filename).exists()) {
		InputStream stream = null
	
		try {
			stream = new FileInputStream(new File(filename))
			Properties prop = new Properties()
			prop.load(stream)
			if (prop.getProperty("version")!=null && !prop.getProperty("version").toString().trim().isEmpty()) {
				lastVersion = prop.getProperty("version")
			}
		} catch (Exception ex) {
			printWarn("Could not read [" + colorize(HIGHLITE_LEVEL, filename) + colorize(WARN_LEVEL, "]: " + ex.getMessage())) 
		} finally {
			if (stream!=null) {
				try {
				 stream.close()
				} catch (Exception cex) {
				}
			}
		}
	}
	
	return lastVersion
}


/***************************************************************************************
 * Write last check
 ***************************************************************************************/
ext.writeLastCheck = { versionNumber, filename, lastCheck = BUILD_TIMESTAMP ->
	if (lastCheck==null) {
		return 
	}

	try {
		Properties prop = new Properties()
		prop.setProperty("lastCheck", lastCheck)
		
		if (versionNumber!=null) {
			prop.setProperty("version", versionNumber)
		}
		
		FileOutputStream stream = new FileOutputStream(filename)
		prop.store(stream, null)
		stream.close()
	} catch (Exception e) {
		printWarn("Could not write [" + colorize(HIGHLITE_LEVEL,filename) + colorize(WARN_LEVEL, "]: " +e.getMessage())) 
	}
}


/***************************************************************************************
 * Download common gradle build cache
 ***************************************************************************************/
ext.downloadCommonGradleBuildCache = { ->
	if (!project.hasProperty('commonGradleBuildCache') || !project.hasProperty('commonGradleBuildReleasesUrl') || !project.hasProperty('commonGradleBuildCacheLastCheckTimeout')) {
		return
	}
	
	def preRelease = false
	if (project.hasProperty('commonGradleBuildReleasesPreRelease')) {
		preRelease = project.getProperty('commonGradleBuildReleasesPreRelease')
	}

	def commonGradleBuildCache = project.getProperty('commonGradleBuildCache')
	if (commonGradleBuildCache==null || "${commonGradleBuildCache}".isEmpty()) {
		return
	}

	def commonGradleBuildReleasesUrl = project.getProperty('commonGradleBuildReleasesUrl')
	if (commonGradleBuildReleasesUrl==null || "${commonGradleBuildReleasesUrl}".isEmpty()) {
		return
	}

	if (!new File(gradleHome).exists()) {
		logWarn("Could not access gradle home: " + colorize(HIGHLITE_LEVEL, gradleHome))
		new File(gradleHome).mkdirs()			
	} 

	//  use per default the newest version, in case commonGradleBuildReleaseVersion is null or empty
	def releaseName = null
	if (project.hasProperty('commonGradleBuildReleaseVersion')) {		
		if (!project.getProperty('commonGradleBuildReleaseVersion').toString().trim().isEmpty()) {
			releaseName = project.getProperty('commonGradleBuildReleaseVersion').toString().trim()
		}
	}

	bootStraplogInfo("  > Check common-gradle-build if update is needed of ${commonGradleBuildReleasesUrl}.")
	getGithubRelease(commonGradleBuildCache, commonGradleBuildReleasesUrl, preRelease, project.getProperty('commonGradleBuildCacheLastCheckTimeout'), releaseName)
}


/***************************************************************************************
 * Download common gradle build home
 ***************************************************************************************/
ext.downloadCommonGradleBuildHome = { ->
	if (!project.hasProperty('commonGradleBuildHomeBase') || !project.hasProperty('commonGradleBuildHomeGitUrl') || !project.hasProperty('commonGradleBuildHomeVersionFileUrl') || !project.hasProperty('commonGradleBuildCacheLastCheckTimeout')) {
		return false
	}

	def commonGradleBuildHomeBase = project.getProperty('commonGradleBuildHomeBase')
	if (commonGradleBuildHomeBase==null || "${commonGradleBuildHomeBase}".isEmpty()) {
		return false
	}

	def commonGradleBuildHomeGitUrl = project.getProperty('commonGradleBuildHomeGitUrl')
	if (commonGradleBuildHomeGitUrl==null || "${commonGradleBuildHomeGitUrl}".isEmpty()) {
		return false
	}

	def commonGradleBuildHomeVersionFileUrl=project.getProperty('commonGradleBuildHomeVersionFileUrl')
	if (commonGradleBuildHomeVersionFileUrl==null || "${commonGradleBuildHomeVersionFileUrl}".isEmpty()) {	
		def GITHUB_URL="https://github.com/"
		def GITHUB_RAWURL="https://raw.githubusercontent.com/"
		if ("${commonGradleBuildHomeGitUrl}".startsWith(GITHUB_URL)) {
			// exchange https://github.com/ with https://raw.githubusercontent.com/
			commonGradleBuildHomeVersionFileUrl="$GITHUB_RAWURL" + commonGradleBuildHomeGitUrl.substring(GITHUB_URL.length())
			if ("$commonGradleBuildHomeVersionFileUrl".endsWith(".git")) {
				// .git -> /master/VERSION
				commonGradleBuildHomeVersionFileUrl=commonGradleBuildHomeVersionFileUrl.substring(0, commonGradleBuildHomeVersionFileUrl.length() - 4) + "/master/VERSION"
			}
		} else if ("$commonGradleBuildHomeGitUrl".endsWith(".git")) {
			// .git -> /raw/branch/master/VERSION
			commonGradleBuildHomeVersionFileUrl=commonGradleBuildHomeGitUrl.substring(0, commonGradleBuildHomeGitUrl.length() - 4) + "/raw/branch/master/VERSION"
		}
		
		if (commonGradleBuildHomeVersionFileUrl==null || "${commonGradleBuildHomeVersionFileUrl}".isEmpty()) {	
			return false
		} else {
			bootStraplogLifecycle("  > Remote verison url: ${commonGradleBuildHomeGitUrl} -> ${commonGradleBuildHomeVersionFileUrl}")
		}
	}

	def commonGradleBuildHomeFile = new File(commonGradleBuildHomeBase)
	if (!commonGradleBuildHomeFile.exists()) {
		bootStraplogLifecycle("  > Create path: ${commonGradleBuildHomeBase}.")
		commonGradleBuildHomeFile.mkdirs()			
	} 

	bootStraplogInfo("  > Check common-gradle-build home if update is needed of ${commonGradleBuildHomeGitUrl}.")
	def result = cloneGitProject(commonGradleBuildHomeBase, commonGradleBuildHomeGitUrl, commonGradleBuildHomeVersionFileUrl, project.getProperty('commonGradleBuildCacheLastCheckTimeout'))
	if (result) {
		//def checkstyleFile = ".checkstyle"
		//if (new File(checkstyleFile).exists()) {
		//	new File(checkstyleFile).delete()
		//}
		
		def files = new FileNameFinder().getFileNames(commonGradleBuildHomeBase, '*.tsp')
		if (files!=null) {
			logInfo("Removes file to force common build to use newest version: " + files)
			files.each { new File(it).delete()}
		}
	}
	
	return result
}


/***************************************************************************************
 * Clone git project
 ***************************************************************************************/
ext.cloneGitProject = {localDirectory, gitUrl, remoteVersionFileUrl, lastCheckTimeout ->

	if (gitUrl==null || "${gitUrl}".isEmpty() || remoteVersionFileUrl==null || "${remoteVersionFileUrl}".isEmpty()) {
		logDebug("Invalid git url or remote version file url.")
		return false
	}

	if (localDirectory==null || "${localDirectory}".isEmpty()) {
		logDebug("Invalid local directory.")
		return false
	}
	
	if (!new File(localDirectory).exists()) {
		logInfo("Create directory $localDirectory")
		new File(localDirectory).mkdirs()
	}
	
    def lastCheckFile = "${localDirectory}/lastCheck.properties"
	def timeout = 0
	def lastCheck = readLastCheck(lastCheckFile)
	if (lastCheck != null) {
		timeout = new Date().getTime() - lastCheck.getTime()
	}

	def result = false
	if ((lastCheck == null) || (lastCheckTimeout==null) || (timeout > lastCheckTimeout)) {
		def remoteVersion = readRemoteVersion(remoteVersionFileUrl, gitUrl)		

		if (remoteVersion!=null && !remoteVersion.isEmpty()) {
			def localDirectoryRemoteVersion = "${localDirectory}/${remoteVersion}"
			
			logInfo("Remote version: " + colorize(HIGHLITE_LEVEL, remoteVersion) + colorize(HIGHLITE_LEVEL, " of $gitUrl in $localDirectoryRemoteVersion"))			
			if (!new File(localDirectoryRemoteVersion).exists()) {
				printInfo("> Download version " + colorize(HIGHLITE_LEVEL, remoteVersion) + " of " + colorize(HIGHLITE_LEVEL, gitUrl) + " into " + colorize(HIGHLITE_LEVEL, localDirectoryRemoteVersion) + ".")
				result = gitClone(localDirectoryRemoteVersion, gitUrl)			
			}
			
			writeLastCheck(remoteVersion, lastCheckFile)
		}			
	} else {
		logInfo("Don't check it's inside time range (" + colorize(HIGHLITE_LEVEL, timeout) + colorize(INFO_LEVEL, "), next check: ") + colorize(HIGHLITE_LEVEL, lastCheck))
	}	
	
	return result
}


/***************************************************************************************
 * Get github release
 ***************************************************************************************/
ext.getGithubRelease = {localDirectory, commonGradleBuildReleasesUrl, preRelease, lastCheckTimeout, releaseName = null ->
	if (commonGradleBuildReleasesUrl==null || "${commonGradleBuildReleasesUrl}".isEmpty()) {
		logDebug("Invalid git url or remote version file url.")
		return
	}

	if (localDirectory==null || "${localDirectory}".isEmpty()) {
		logDebug("Invalid local directory.")
		return
	}
	
	if (!new File(localDirectory).exists()) {
		logInfo("Create directory $localDirectory")
		new File(localDirectory).mkdirs()
	}
	
    def lastCheckFile = "${localDirectory}/lastCheck.properties"
	def timeout = 0
	def lastCheck = readLastCheck(lastCheckFile)
	if (lastCheck != null) {
		timeout = new Date().getTime() - lastCheck.getTime()
	}

	if ((lastCheck == null) || (lastCheckTimeout==null) || (timeout > lastCheckTimeout)) {
		def expectedReleaseExist = false
		if (releaseName!=null && !"${releaseName}".toString().trim().isEmpty()) {
			expectedReleaseExist = (new File("${localDirectory}/${releaseName}").exists())
		}
	
		def remoteVersion = null
		if (!expectedReleaseExist) {
			remoteVersion = readGithubReleaseVersion(commonGradleBuildReleasesUrl, preRelease, releaseName)
			if (remoteVersion!=null && !remoteVersion.isEmpty()) {
				def localDirectoryRemoteVersion = "${localDirectory}/${remoteVersion}"				
				logInfo("Remote version: " + colorize(HIGHLITE_LEVEL, remoteVersion) + colorize(INFO_LEVEL, " of [")  + colorize(HIGHLITE_LEVEL, commonGradleBuildReleasesUrl) + colorize(INFO_LEVEL, "] in [") + colorize(HIGHLITE_LEVEL, localDirectoryRemoteVersion) + colorize(INFO_LEVEL, "]."))
				if (!new File(localDirectoryRemoteVersion).exists()) {
					logInfo("Download version " + colorize(HIGHLITE_LEVEL, remoteVersion) + colorize(INFO_LEVEL, " of [") + colorize(HIGHLITE_LEVEL, commonGradleBuildReleasesUrl) + colorize(INFO_LEVEL, "] into [") + colorize(HIGHLITE_LEVEL, localDirectoryRemoteVersion) + colorize(INFO_LEVEL, "]."))
					downloadAndUnzipGithubRelease(commonGradleBuildReleasesUrl, preRelease, localDirectory, releaseName)
				} else {
					logInfo("Remote version: " + colorize(HIGHLITE_LEVEL, remoteVersion) + colorize(INFO_LEVEL, " already exist in [") + colorize(HIGHLITE_LEVEL,localDirectoryRemoteVersion) + colorize(INFO_LEVEL, "]."))
				}
			}
		} else {
			remoteVersion = releaseName
			logInfo("Version: " + colorize(HIGHLITE_LEVEL, remoteVersion) + colorize(INFO_LEVEL, " already exist in [") + colorize(HIGHLITE_LEVEL, "${localDirectory}/${remoteVersion}") + colorize(INFO_LEVEL, "]."))
		}		
		
		writeLastCheck(remoteVersion, lastCheckFile)
	} else {
		logInfo("Don't check it's inside time range (" + colorize(HIGHLITE_LEVEL, timeout) + colorize(INFO_LEVEL, "), next check: ") + colorize(HIGHLITE_LEVEL, lastCheck))
	}	
}
