/*
 * common-gradle-build-version.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */


/***************************************************************************************
 * Read the remote version
 ***************************************************************************************/
ext.readRemoteVersion = { inputUrl ->

	if (!HAS_ONLINE_CONNECTION) {
		return ""
	}
	
	def url = inputUrl
	if (url.startsWith('file/')) {
		url = 'file:/' + url.substring(4)
	}
	
	def remoteVersion = null
	try {
		Properties props = new Properties();
		//if (url.startsWith('file:')) {
			props.load(new FileInputStream(new File(url)))
		//} else {
			props.load(new URL(url).openStream())
		//}

		def majorNumber = props.getProperty("major.number")
		def minorNumber = props.getProperty("minor.number")
		def microNumber = props.getProperty("micro.number")
		def qualifier = props.getProperty("qualifier")
		
		remoteVersion = majorNumber + "." + minorNumber;	
		if (microNumber!=null) {
			remoteVersion += "." + microNumber
		} else if (qualifier!=null) { 
			remoteVersion += "." + qualifier
		}
	} catch (Exception e) {
		printWarn("Could not read remote version [" + colorize(HIGHLITE_LEVEL, url) + colorize(WARN_LEVEL, "]: " +e.getMessage())) 
	}
	
	return remoteVersion
}


/***************************************************************************************
 * Read last check
 ***************************************************************************************/
ext.readLastCheck = { ->
	def lastCheck = null		
	if (new File(commonGradleBuildCacheLastCheckFile).exists()) {
		try {
			Properties prop = new Properties()
			prop.load(new FileInputStream(new File(commonGradleBuildCacheLastCheckFile)))
			def value = prop.getProperty("lastCheck")

			if (value!=null && !value.isEmpty()) {
				lastCheck = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").parse(value)
			}
		} catch (Exception ex) {
			printWarn("Could not read [" + colorize(HIGHLITE_LEVEL, commonGradleBuildCacheLastCheckFile) + colorize(WARN_LEVEL, "]: " + ex.getMessage())) 
		}
	}
	
	return lastCheck
}


/***************************************************************************************
 * Write last check
 ***************************************************************************************/
ext.writeLastCheck = { versionNumber = null, lastCheck = BUILD_TIMESTAMP ->

	if (lastCheck==null) {
		return 
	}

	try {
		Properties prop = new Properties()
		prop.setProperty("lastCheck", lastCheck)
		
		if (versionNumber!=null) {
			prop.setProperty("version", versionNumber)
		}
		
		FileOutputStream stream = new FileOutputStream(commonGradleBuildCacheLastCheckFile)
		prop.store(stream, null)
		stream.close()
	} catch (Exception e) {
		printWarn("Could not write [" + colorize(HIGHLITE_LEVEL,commonGradleBuildCacheLastCheckFile) + colorize(WARN_LEVEL, "]: " +e.getMessage())) 
	}
}


/***************************************************************************************
 * Download common gradle build
 ***************************************************************************************/
ext.downloadCommonGradleBuild = { ->
	if (!new File(gradleHome).exists()) {
		logWarn("Could not access gradle home: " + colorize(HIGHLITE_LEVEL, gradleHome))
		new File(gradleHome).mkdirs()			
	} 

	def timeout = 0
	def lastCheck = readLastCheck()

	if (lastCheck != null) {
		timeout = new Date().getTime() - lastCheck.getTime()
	}

	if ((lastCheck == null) || (timeout > project.getProperty('commonGradleBuildCacheLastCheckTimeout'))) {
		def remoteVersion = readRemoteVersion(commonGradleBuildCacheVersionFileUrl)		

		if (remoteVersion!=null && !remoteVersion.isEmpty()) {
			logInfo("Remote version: " + colorize(HIGHLITE_LEVEL, remoteVersion))
			
			def commonGradleVersionCache = "${commonGradleBuildCache}/${remoteVersion}"
			if (!new File(commonGradleVersionCache).exists()) {
				printInfo("> Download version " + colorize(HIGHLITE_LEVEL, remoteVersion) + " of the common-gradle-build (will be used in next build)!")
				gitClone(commonGradleVersionCache, commonGradleBuildGitUrl)			
			}
		}
			
		writeLastCheck(remoteVersion)
	} else {
		logInfo("Don't check it's inside time range: " + colorize(HIGHLITE_LEVEL, timeout))
	}	
}
