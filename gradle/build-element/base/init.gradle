/*
 * init.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */


/***************************************************************************************
 * Init
 ***************************************************************************************/
init {
	// initialize the project mandatory settings and environment
	projectInitialisation()

	def hostname = getHostName()
	def header = "Project " + colorize(TITLE_LEVEL, rootProject.name)
	def headerLength = INDENT.length() + 11 + rootProject.name.length()
	if (project.hasProperty('projectGroupId')) {
	    headerLength += projectGroupId.length()
	}
	
	def length = MAX_LINELENGTH - headerLength - INDENT.length()
	if (length > 0 && project.hasProperty('projectDescription')) {
		if (project.hasProperty('projectGroupId') && projectGroupId.length() > 0) {
			header = header + " ($projectGroupId)"
		}
		
		def printDescription = projectDescription
		if (printDescription.length() > length)
			printDescription = printDescription.substring(0, length - 5) + "..."

		header += ": " + printDescription
	}

	def isUnlimitedJurisdictionMsg = ""
	if (!isUnlimitedJurisdiction()) {
	    isUnlimitedJurisdictionMsg = colorize(ERROR_LEVEL, '*')
	}

	// TODO: why encoding don't corresponds to
	def encoding = fileEncoding
	if (encoding==null || encoding.isEmpty()) {
	    encoding = System.properties['file.encoding']
	}

	def pid = getProcessNumber()
	def processNumber = ""
	if (pid!=null && !pid.isEmpty()) {
		processNumber = "PID: " + pid
	}

	def vendorName = System.properties['java.vendor'].replace(" Corporation", "")

	def userInfo = ""
	def javaInfo = ""
	if (initShowJava) {
		userInfo = "(${System.properties['user.name']}, $encoding, ${System.properties['user.language']}, ${TimeZone.getDefault().getID()})"
		javaInfo = "Java " + colorize(HIGHLITE_LEVEL, System.properties['java.version']) + "${isUnlimitedJurisdictionMsg}, target " + colorize(HIGHLITE_LEVEL, targetCompatibility) + " (${vendorName}-${System.properties['java.vm.version']}), "
	}

		def osInfo = "${System.properties['os.name']} (${System.properties['os.arch']}) on ${hostname}"

	// read the version
	readVersion()

	printLine(HIGHLITE_LEVEL, true)

	printInfo("${header}")
	printInfo("Version " + colorize(HIGHLITE_LEVEL, project.version) + ", ${BUILD_TIMESTAMP_SIMPLE} ${userInfo}")
	printInfo("${javaInfo}${osInfo}")

	if (initShowJava) {
		printInfo("Java home: ${System.properties['java.home'].replace('\\', '/')}")
	}

	if (initShowGradle) {
		printInfo(buildToolVersionStackMessage)
	}

	if (initShowRuntime) {
		def runtimeMemory = Runtime.getRuntime().maxMemory()
		def memory = Math.round(runtimeMemory / 1024 / 1024 / 1024 * 100 ) / 100
		printInfo("${processNumber}, Max memory: ${memory}G")
	}

	if (initShowPath) {
		def projectInfo = "Project: ${cbProjectRootDir}"
		def homeDirInfo = "Home: ${userHomeDirectory.replace('\\', '/')}"
		def restLength = MAX_LINELENGTH - projectInfo.length() - INDENT.length()
		if (homeDirInfo.length() < (restLength-3) ) { 
			printInfo("${projectInfo}, ${homeDirInfo}")
		} else {
			printInfo("${projectInfo}")
			printInfo("${homeDirInfo}")
		}
	}

	if (initShowTempPath) {
		printInfo("Temp: ${System.properties['java.io.tmpdir'].replace('\\', '/')}")
	}

	//printLine(HIGHLITE_LEVEL, "[" + projectType + "]")
	printLine(HIGHLITE_LEVEL, true)
}


/***************************************************************************************
 * Show buildscript configuration classpath
 ***************************************************************************************/
task showClasspath {
	group = 'Verification'
	description = 'Show the buildscript configuration classpath'
    doLast {
        buildscript.configurations.classpath.each { println it.name }
    }
}


/***************************************************************************************
 * Project validation
 ***************************************************************************************/
task projectValidation {
	group = 'Verification'
	description = 'Project validation'
}
