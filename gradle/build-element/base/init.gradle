/*
 * init.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */

apply from: "${commonGradleBuildElementPath}/base/initialisation.gradle"


/***************************************************************************************
 * Init
 ***************************************************************************************/
init {
	// initialize the project mandatory settings and environment
	projectInitialisation()
	
	def hostname = getHostName()	
	def headerLength = INDENT.length() + 11 + rootProject.name.length() + rootGroupId.length()
	def header = "Project " + colorize(TITLE_LEVEL, rootProject.name)
	def length = MAX_LINELENGTH - headerLength - INDENT.length()
	if (length > 0 && project.hasProperty('rootDescription')) {
		header = header + " ($rootGroupId)"
		def printDescription = rootDescription
		if (printDescription.length() > length) 
			printDescription = printDescription.substring(0, length - 5) + "..."		
		
		header += ": " + printDescription
	}

	def isUnlimitedJurisdictionMsg = ""
	if (!isUnlimitedJurisdiction()) {
	    isUnlimitedJurisdictionMsg = colorize(ERROR_LEVEL, '*')
	}
	
	// TODO: why encoding don't corresponds to 
	def encoding = ENCODING
	if (encoding==null || encoding.isEmpty()) {
	    System.properties['file.encoding']
	}
	
	def pid = getProcessNumber()
	def processNumber = ""
	if (pid!=null && !pid.isEmpty()) {
		processNumber = ", PID: " + pid
	} 
	
	def vendorName = System.properties['java.vendor'].replace(" Corporation", "")

	def userInfo = ""
	def javaInfo = ""
	if (INIT_SHOW_JAVA) {
		userInfo = "(${System.properties['user.name']}, $encoding, ${System.properties['user.language']}, ${TimeZone.getDefault().getID()})"
		javaInfo = "Java v" + colorize(HIGHLITE_LEVEL, System.properties['java.version']) + "${isUnlimitedJurisdictionMsg}, target " + colorize(HIGHLITE_LEVEL, targetCompatibility) + " (${vendorName}-${System.properties['java.vm.version']}), "
	}
	
		def osInfo = "${System.properties['os.name']} (${System.properties['os.arch']}) on ${hostname}"

	// read the version
	readVersion()

	printLine()
	
	printInfo("${header}")	
	printInfo("Version " + colorize(HIGHLITE_LEVEL, project.version) + ", ${BUILD_TIMESTAMP_SHORT} ${userInfo}")
	printInfo("${javaInfo}${osInfo}")
	
	if (INIT_SHOW_JAVA) {
		printInfo("Java home: ${System.properties['java.home'].replace('\\', '/')}")
	}

	if (INIT_SHOW_RUNTIME) {
		def runtimeMemory = Runtime.getRuntime().maxMemory()
		def memory = Math.round(runtimeMemory / 1024 / 1024 / 1024 * 100 ) / 100
		printInfo("PID: ${processNumber}, Max memory: ${memory}G")
	}
	
	if (INIT_SHOW_PATH) {
		printInfo("Path: ${System.properties['user.dir'].replace('\\', '/')}, Home: ${userHomeDirectory.replace('\\', '/')}")
	}
	
	if (INIT_SHOW_TEMP) {		
		printInfo("Temp: ${System.properties['java.io.tmpdir'].replace('\\', '/')}")
	}

	if (INIT_SHOW_GRADLE) {
		printInfo("Gradle: ${gradle.gradleVersion}")
	}

	printLine()
}


/***************************************************************************************
 * Project validation
 ***************************************************************************************/
task projectValidation { 
	group = 'Verification'
	description = 'Project validation'

	doFirst {
		logInfo("Project validation....")
		downloadCommonGradleBuild()
	}
}
