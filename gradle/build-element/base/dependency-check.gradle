/*
 * dependency-check.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
    repositories {
        if (Integer.valueOf(gradle.gradleVersion.toString().split('\\.')[0])<7) {
			jcenter()
		} else {
			mavenCentral()
			maven {
				url "https://mvnrepository.com/artifact"
			}
			maven { url("https://oss.sonatype.org/content/repositories/snapshots") }
			gradlePluginPortal()
		}
    }
    dependencies {
		def toolariumDependencyCheckVersion="12.0.1"
		if (project.hasProperty('toolariumDependencyCheckVersion')) {
			toolariumDependencyCheckVersion = project.getProperty('toolariumDependencyCheckVersion')
		}
	
		logInfo("toolarium dependency-check version: " + colorize(HIGHLITE_LEVEL, toolariumDependencyCheckVersion) + colorize(INFO_LEVEL, ".")); 
        classpath "org.owasp:dependency-check-gradle:${toolariumDependencyCheckVersion}"
		
		def toolariumDependencyCheckUtilVersion="1.0.2"
		if (project.hasProperty('toolariumDependencyCheckUtilVersion')) {
			toolariumDependencyCheckUtilVersion = project.getProperty('toolariumDependencyCheckUtilVersion')
		}
		logInfo("toolarium-dependency-check-util version: " + colorize(HIGHLITE_LEVEL, toolariumDependencyCheckUtilVersion) + colorize(INFO_LEVEL, ".")); 
		classpath "com.github.toolarium:toolarium-dependency-check-util:${toolariumDependencyCheckUtilVersion}"
    }
}

import org.owasp.dependencycheck.gradle.DependencyCheckPlugin;
org.owasp.dependencycheck.gradle.DependencyCheckPlugin p = new org.owasp.dependencycheck.gradle.DependencyCheckPlugin()
p.apply(project);

dependencyCheck {
    autoUpdate = project.getProperty('dependencyCheckAutoUpdate') // true
    formats = ['HTML', 'JSON'] // , 'CSV
	//format='ALL'
	outputDirectory = "$dependencyCheckReportPath"
    //junitFailOnCVSS = 0
	failBuildOnCVSS = project.getProperty('dependencyCheckFailBuildOnCVSS') // default 11	
    failOnError = project.getProperty('dependencyCheckFailOnError') // true
	skipConfigurations = ['checkstyle', 'jacocoAnt']
	
	analyzers {
	    assemblyEnabled = false
	}
	
	hostedSuppressions {
        validForHours = project.getProperty('dependencyCheckCveValidForHours') // 12
	}
	nvd {
        validForHours = project.getProperty('dependencyCheckCveValidForHours') // 12
	}
    //suppressionFile
}


/***************************************************************************************
 * Get dependencyCheck
 ***************************************************************************************/
import com.github.toolarium.ansi.AnsiColor;
import com.github.toolarium.ansi.color.BackgroundColor;
import com.github.toolarium.ansi.color.ForegroundColor;
import com.github.toolarium.common.util.EnumUtil;
import com.github.toolarium.dependency.check.DependencyCheckUtil;
import com.github.toolarium.dependency.check.model.DependecyCheckResult;
import com.github.toolarium.dependency.check.report.format.VulnerabilityReportFormatterFactory;
import com.github.toolarium.dependency.check.report.format.impl.AnsiStringVulnerabilityReportFormatter
import com.github.toolarium.dependency.check.report.VulnerabilityReport;
import com.github.toolarium.dependency.check.report.Vulnerability;


dependencyCheckAnalyze {
	//logging.captureStandardOutput LogLevel.INFO
	//logging.captureStandardError LogLevel.INFO

	AnsiColor ansiColor = AnsiColor.AUTO;
	if (detectANSISupport()) {
		ansiColor = AnsiColor.ON;
	} else {
		ansiColor = AnsiColor.OFF;
	}
	
	AnsiStringVulnerabilityReportFormatter f = VulnerabilityReportFormatterFactory.getInstance().getStringFormatter(ansiColor);
	f.setEnableReason(Boolean.parseBoolean("${dependencyCheckReportEnableReason}"));
	//f.setEnableDependencyUrl(Boolean.parseBoolean("${dependencyCheckReportEnableUrl}"));
	f.setEnableVulnerabilityUrl(Boolean.parseBoolean("${dependencyCheckReportEnableUrl}"));
	f.setEnableConfidence(Boolean.parseBoolean("${dependencyCheckReportEnableConfidence}"));
	f.setMaxTextLen(Integer.parseInt("${dependencyCheckReportMaxTextLen}")); //72
	f.setArtifactColor("${dependencyCheckReportArtifactColor}".toString() /*ForegroundColor.CYAN.name()*/, "${dependencyCheckReportArtifactBgColor}");
	f.setConfigurationColor("${dependencyCheckReportConfigurationColor}".toString() /*ForegroundColor.YELLOW.name()*/, "{dependencyCheckReportConfigurationBgColor}");
	f.setConfidenceColor("${dependencyCheckConfidenceColor}".toString() /*ForegroundColor.LIGHT_RED.name()*/, "${dependencyCheckConfidenceBgColor}");
	f.setSeverityColor("${dependencyCheckReportSeverityColor}".toString() /*ForegroundColor.LIGHT_RED.name()*/, "${dependencyCheckReportSeverityBgColor}");
	f.setCveColor("${dependencyCheckReportCveColor}".toString() /*ForegroundColor.WHITE.name()*/, "${dependencyCheckReportCveBgColor}" /*BackgroundColor.RED.name()*/);
	f.setIncludedByColor("${dependencyCheckReportIncludedByColor}".toString() /*ForegroundColor.LIGHT_YELLOW.name()*/, "${dependencyCheckReportIncludedByBgColor}");
	f.setEndExcludingVersionColor("${dependencyCheckReportEndExcludingVersionColor}".toString() /*ForegroundColor.WHITE.name()*/, "${dependencyCheckReportEndExcludingVersionBgColor}");
	f.setReasonColor("${dependencyCheckReportReasonColor}".toString() /*ForegroundColor.LIGHT_GREEN.name()*/, "${dependencyCheckReportReasonBgColor}");
	f.setUrlColor("${dependencyCheckReportUrlColor}".toString() /*ForegroundColor.LIGHT_GRAY.name()*/, "${dependencyCheckReportUrlBgColor}");
	f.setConfigurationStart(" " + "${LOGPREFIX}".toString().trim());
	//f.setEntryStart("+");

	// in case of snapshot print all necessary information
	if (project.ext.isSnapshotVersion) {
		f.setEnableReason(true);
		//f.setEnableDependencyUrl(true);
		f.setEnableVulnerabilityUrl(true);
		f.setEnableConfidence(true);
	}

    doFirst {
	     printInfo("> Check dependency vulnerabilities...")
		 new File("$dependencyCheckReportPath").mkdirs()
	}

	doLast {
		File file = new File("$dependencyCheckReportPath/dependency-check-report.html")
		if (file.exists()) {
 		    file.renameTo(new java.io.File(dependencyCheckReportPath, "index.html"))
		}

		File fileJson = new File("$dependencyCheckReportPath/dependency-check-report.json")
		if (fileJson.exists()) {
			String[] filter = null;
			if (project.hasProperty('dependencyCheckReportFilter')) {
				filter = "${dependencyCheckReportFilter}".split(",");
				for (int i = 0; i<filter.length; i++) {
					filter[i] = filter[i].trim();
				}
			}
		
			try {
				DependecyCheckResult dependecyCheckResult = DependencyCheckUtil.getInstance().readFile(fileJson);
				DependecyCheckResult simplifiedDependecyCheckResult = DependencyCheckUtil.getInstance().filter(DependencyCheckUtil.getInstance().simplify(dependecyCheckResult));
				VulnerabilityReport vulnerabilityReport = DependencyCheckUtil.getInstance().toVulnerabilityReport(simplifiedDependecyCheckResult);
				String result = "";
				for (String s : DependencyCheckUtil.getInstance().formatVulneabilityReport(vulnerabilityReport, f, filter /*"api", "implementation", "runtimeOnly", "runtimeClasspath"*/)) {
					result += s;
				}
				
				if (result!=null && !result.isEmpty()) {
					printInfo(NELINE + result);
					
					/*
					// TODO: fail if max level is reached
					Vulnerability mostCrititcalVulnerability = vulnerabilityReport.getMostCrititcalVulnerability();
					mostCrititcalVulnerability.getScore();
					mostCrititcalVulnerability.getCve();
					mostCrititcalVulnerability.getConfidence();
					mostCrititcalVulnerability.getSeverity();
					mostCrititcalVulnerability.getSource();
					*/
					
					addError("Vulnerability in dependency found!");
				}
			} catch (Exception ex) {
				ex.printStackTrace();
				printWarn("Could not validate dependencies: " + ex.getMessage()); 
				//addError("Could not validate dependencies!");
			}
		}
	}
}


/***************************************************************************************
 * Update dependencyCheck
 ***************************************************************************************
setCommonGradleProperty('dependencyCheckIsReadyToUpdate', false)
if (!new File("$gradleHome/dependency-check-data").exists()) {
	def fileZip = new File("${dependencyCheckPreparedDatabaseArchiveFile}")
	if (!fileZip.exists()) {
		def hasOnlineConnection = project.hasProperty('HAS_ONLINE_CONNECTION') && project.getProperty('HAS_ONLINE_CONNECTION')
		if (hasOnlineConnection && (!"$dependencyCheckPreparedDatabaseArchiveUrl".toString().trim().isEmpty())) {
			logInfo("Download release " + colorize(HIGHLITE_LEVEL, "$dependencyCheckPreparedDatabaseArchiveFile") + " in " + colorize(HIGHLITE_LEVEL, "${gradleHome}") + ".")
			printInfo("> Download release " + colorize(HIGHLITE_LEVEL, getFilename("$dependencyCheckPreparedDatabaseArchiveFile")) + ".")
			new URL("$dependencyCheckPreparedDatabaseArchiveUrl").withInputStream { i -> fileZip.withOutputStream { it << i } }
			setCommonGradleProperty('dependencyCheckIsReadyToUpdate', true)
		} else {
			logInfo("Ignore dependency-check..."); 
			dependencyCheckUpdate.enabled = false
		}
	}
	
	if (fileZip.exists()) {
		printInfo("> Unzip " + colorize(HIGHLITE_LEVEL, getFilename("$dependencyCheckPreparedDatabaseArchiveFile")) + "....")
		unzip(fileZip, "$gradleHome", null)
	}
}
*/


/***************************************************************************************
 * define project dependency
 ***************************************************************************************/
if (!project.getProperty('IS_NEW') && project.hasProperty("dependencyCheckEnabled") && "true".toString().equalsIgnoreCase(project.getProperty("dependencyCheckEnabled").toString())) {
	projectValidation.finalizedBy("dependencyCheckAnalyze")	
	dependencyCheckAnalyze.mustRunAfter("build")

	if (project.tasks.findByName('release')) {
		project.tasks["release"].dependsOn(dependencyCheckAnalyze)
	}
}
