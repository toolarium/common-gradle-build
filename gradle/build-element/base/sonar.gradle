/*
 * sonar.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */
 
 /* Short description:
   1) start server: nerdctl run -d --name sonarqube -p 9000:9000 -p 9092:9092 sonarqube
   2) browser http://127.0.0.1:9000
   2) create a token
   3) execute scan: cb "-PsonarEnabled=true" "-Dsonar.host.url=http://127.0.0.1:9000" "-Dsonar.token=sqa_..." sonar

   set config to gradle.properties in the home directory windows: %USERPROFILE%\.gradle\gradle.properties, linux %HOME/.gradle/gradle.properties
   sonar.host.url=http://127.0.0.1:9000
   sonar.token=sqa_...
 
   restart:
   >nerdctl stop sonarqube
   >nerdctl start sonarqube
   >cb sonar
*/
 
buildscript {
	repositories {
        gradlePluginPortal()
	}
	dependencies {
		def sonarVersion="4.4.1.3373" //"3.5.0.2730" --> version from https://plugins.gradle.org/plugin/org.sonarqube
		if (project.hasProperty('sonarVersion')) {
			sonarVersion = project.getProperty('sonarVersion')
		}
	
		logInfo("sonar version: " + colorize(HIGHLITE_LEVEL, sonarVersion) + colorize(INFO_LEVEL, ".")); 
		classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:${sonarVersion}" // https://repo.maven.apache.org/maven2/org/sonarsource/scanner/gradle/sonarqube-gradle-plugin/3.3/
	}
}


/***************************************************************************************
 * sonar configuration
 ***************************************************************************************/
if (!project.getProperty('IS_NEW') && project.hasProperty("sonarEnabled") && "true".toString().equalsIgnoreCase(project.getProperty("sonarEnabled").toString())) {

	// Init plugin
	org.sonarqube.gradle.SonarQubePlugin p = new org.sonarqube.gradle.SonarQubePlugin()
	p.apply(project);
	sonar {
		properties {
			if (project.hasProperty('sonarHostUrl') && !project.getProperty('sonarHostUrl').toString().trim().isEmpty()) {
				property "sonar.host.url", project.getProperty('sonarHostUrl').toString().trim()
			}
			if (project.hasProperty('sonarToken') && !project.getProperty('sonarToken').toString().trim().isEmpty()) {
				property "sonar.token", project.getProperty('sonarToken').toString().trim()
			}
			
			property "sonar.sourceEncoding", "${fileEncoding}"
			property "sonar.dependencyCheck.htmlReportPath", "${dependencyCheckReportHtmlFile}"
			property "sonar.dependencyCheck.jsonReportPath", "${dependencyCheckReportFile}"
			property "sonar.java.coveragePlugin", "jacoco"
			property "sonar.jacoco.reportPath", "${jacocoReportPath}"
			property "sonar.junit.reportPath", "${junitReportPath}" //"${gradleBuildDirectory}/test-results/test"
		}
	}


	/***************************************************************************************
	 * Pritn sonar info
	 ***************************************************************************************/
	task sonarInfo {
		group = 'Build'
		description = 'Call sonar.'

		doFirst {
			if (project.hasProperty('sonarHostUrl') && !project.getProperty('sonarHostUrl').toString().trim().isEmpty()) {
				printInfo("> Call Sonar " + colorize(HIGHLITE_LEVEL, sonarHostUrl) + "..."); 
			} else {
				printInfo("> Call Sonar...")
			}
		}
	}
	project.tasks["sonar"].dependsOn(sonarInfo)
	
	
	/***************************************************************************************
	 * define project dependency
	 ***************************************************************************************/
	projectValidation.finalizedBy("sonar")	

	if (project.hasProperty("dependencyCheckEnabled") && "true".toString().equalsIgnoreCase(project.getProperty("dependencyCheckEnabled").toString())) {
		project.tasks["sonar"].mustRunAfter("dependencyCheckAnalyze")
	} else {
		project.tasks["sonar"].mustRunAfter("build")
	}
	project.tasks["sonar"].mustRunAfter("build")

	if (project.tasks.findByName('release')) {
		project.tasks["release"].dependsOn("sonar")
	}
}