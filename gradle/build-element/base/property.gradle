/*
 * property.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */
 // see https://docs.gradle.org/current/dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html
 // see https://stackoverflow.com/questions/27777591/how-to-define-and-call-custom-methods-in-build-gradle/38032000

 
/** 
 * Add common gradle build property list
 */
ext.addCommonGradlePropertyList = { propertyName, propertyValue, logValue = true ->

	if (!project.hasProperty(propertyName)) {
		setCommonGradleDefaultPropertyIfNull(propertyName, propertyValue, logValue)
	} else {
		def value = project.getProperty(propertyName)
		
		if (!(value instanceof String)) {
			value = value.toString()
		}
		
		if (value!=null && !value.isEmpty()) {
			value += ", "
		}
		
		value += propertyValue.toString()
		setCommonGradleProperty(propertyName, value, logValue)
	}
}


/** 
 * Set common gradle property default value if it is null
 */
ext.setCommonGradleDefaultPropertyIfNull = { propertyName, propertyDefaultValue, logValue = true ->
	if (!project.hasProperty(propertyName)) {
		project.ext.set(propertyName, propertyDefaultValue)

		def type = propertyDefaultValue.getClass()
		def message = "Set [" + colorize(HIGHLITE_LEVEL, propertyName) + colorize(INFO_LEVEL, '] ')
		if (logValue) {
			message += colorize(INFO_LEVEL, 'to: [') + colorize(HIGHLITE_LEVEL, project.getProperty(propertyName)) + colorize(INFO_LEVEL, '] as ') + colorize(INFO_LEVEL, type)
		} else {
			message += colorize(INFO_LEVEL, 'as ') + colorize(INFO_LEVEL, type)
		}
		
		logInfo(message)
	}
}


/** 
 * Set common gradle property value
 */
ext.setCommonGradleProperty = { propertyName, propertytValue, propertyDefaultValue = '', logValue = true ->
	def value = propertytValue;
	if (propertytValue == null) {
		value = propertyDefaultValue
	}
	
	project.ext.set(propertyName, value)

	def type = value.getClass()
	def message = "Set [" + colorize(HIGHLITE_LEVEL, propertyName) + colorize(INFO_LEVEL, '] ')
	if (logValue) {
		message += colorize(INFO_LEVEL, 'to: [') + colorize(HIGHLITE_LEVEL, project.getProperty(propertyName)) + colorize(INFO_LEVEL, '] as ') + colorize(INFO_LEVEL, type)
	} else {
		message += colorize(INFO_LEVEL, 'as ') + colorize(INFO_LEVEL, type)
	}
	
	logInfo(message)
}


/** 
 * Set gradle property value
 */
ext.setGradleProperty = { propertyName, propertytValue, propertyDefaultValue = '', logValue = true ->
	def value = propertytValue;
	if (propertytValue == null) {
		value = propertyDefaultValue
	}
	
	project.set(propertyName, value)

	def type = value.getClass()
	def message = "Set [" + colorize(HIGHLITE_LEVEL, propertyName) + colorize(INFO_LEVEL, '] ')
	if (logValue) {
		message += colorize(INFO_LEVEL, 'to: [') + colorize(HIGHLITE_LEVEL, project.getProperty(propertyName)) + colorize(INFO_LEVEL, '] as ') + colorize(INFO_LEVEL, type)
	} else {
		message += colorize(INFO_LEVEL, 'as ') + colorize(INFO_LEVEL, type)
	}
	
	logInfo(message)
}
