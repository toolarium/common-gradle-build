/*
 * docker.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */


/***************************************************************************************
 * Check if docker installation is ready to use
 ***************************************************************************************/
ext.dockerInstallationValidated=false
ext.dockerInstallationCommandAvailable=false
ext.dockerInstallationAvailable=false
ext.checkDockerInstallation = { ->
	if (!dockerInstallationValidated) {
		dockerInstallationValidated=true
		def cmdCall="docker --version".toString()
		def sout = new StringBuilder(), serr = new StringBuilder()
		def existStatus = execOSCommand([ cmdCall ], [ 'cmd', '/c', cmdCall ], -1, sout, serr)
		dockerInstallationCommandAvailable=(existStatus==0)
		
		if (dockerInstallationCommandAvailable) {
			logInfo("Docker installation is available.")

			cmdCall="docker info".toString()
			sout = new StringBuilder()
			serr = new StringBuilder()
			existStatus = execOSCommand([ cmdCall ], [ 'cmd', '/c', cmdCall ], -1, sout, serr)
			dockerInstallationAvailable=(existStatus==0)

			if (dockerInstallationAvailable) {
				logInfo("Docker installation is ready.")
			} else {
				ext.validBuild=false
				ext.errorMessagePrefix=""
				ext.validBuildMessage = "Docker installation is not ready:\n" + sout.toString()
			}
		} else {
			ext.validBuild=false
			ext.errorMessagePrefix=""
			ext.validBuildMessage = "Missing docker installation.";
		}
	}
	
	return dockerInstallationAvailable
} 


/***************************************************************************************
 * docker build task
 ***************************************************************************************/
task dockerBuild {
	group = 'Build'
	description = 'Create a docker image.'

	if (!project.getProperty('IS_NEW') && checkDockerInstallation()) {
		doLast {
			def dockerBuildName="${rootProject.name}:${project.version}"
			if( project.hasProperty("dockerName") && !project.getProperty("dockerName").toString().isEmpty() ) {
				dockerBuildName="$dockerName"
			}
			
			def dockerfileName="$dockerFile"
			if (dockerfileName.startsWith("./")) {
				dockerfileName = cbProjectRootDir + "/" + dockerfileName.substring(2)
			}
				
			printInfo("> Create docker image " +colorize(HIGHLITE_LEVEL,  dockerBuildName) + ".")
			def cmdCall="docker build -t $dockerBuildName -f $dockerfileName $cbProjectRootDir".toString()
			logInfo("Execute: [" + colorize(HIGHLITE_LEVEL, cmdCall) + colorize(HIGHLITE_LEVEL, "]."))
			def args = [ cmdCall ]
			def windowsArgs = [ 'cmd', '/c', cmdCall ]
			def sout = new StringBuilder(), serr = new StringBuilder()
			def existStatus = execOSCommand(args, windowsArgs, -1, sout, serr)
			
			if (existStatus!=0) {
				ext.validBuild=false
				ext.errorMessagePrefix=""				
				ext.validBuildMessage = "Docker installation is not ready"
				if (sout!=null && !sout.toString().isEmpty()) {
					ext.validBuildMessage = "${validBuildMessage}:\n" + sout.toString()
				}
				if (serr!=null && !serr.toString().isEmpty()) {
					ext.validBuildMessage = "${validBuildMessage}:\n" + serr.toString()
				}
			} else {
				if (sout!=null && !sout.toString().isEmpty()) {
					logInfo(sout)
				}
				if (serr!=null && !serr.toString().isEmpty()) {
					logInfo(serr)
				}
			}
		}
	} 
}

dockerBuild.dependsOn build

if (!project.getProperty('IS_NEW')) {
	def buildAlwaysDockerImageEnv=System.getenv('CB_BUILD_ALWAYS_DOCKER_IMAGE')
	def buildAlwaysDockerImageSwitchEnabled=((project.hasProperty("buildAlwaysDockerImage") && "true".toString().equalsIgnoreCase(project.getProperty("buildAlwaysDockerImage").toString()))
												|| (buildAlwaysDockerImageEnv!=null && !buildAlwaysDockerImageEnv.toString().trim().isEmpty() && "true".equalsIgnoreCase(buildAlwaysDockerImageEnv.toString().trim())));

	if (buildAlwaysDockerImageSwitchEnabled && checkDockerInstallation()) {
		logInfo("Enable build always docker image.")
		build.finalizedBy(dockerBuild)
	}
}


/***************************************************************************************
 * docker build task
 ***************************************************************************************/
task dockerRun {
	group = 'Build'
	description = 'Run a docker image.'

	if (!project.getProperty('IS_NEW') && checkDockerInstallation()) {
		doLast {
			def dockerBuildName="${rootProject.name}:${project.version}"
			if( project.hasProperty("dockerName") && !project.getProperty("dockerName").toString().isEmpty() ) {
				dockerBuildName="$dockerName"
			}
			
			printInfo("> Run docker image " +colorize(HIGHLITE_LEVEL,  dockerBuildName) + ".")
			def cmdCall="docker run $dockerBuildName --rm".toString()
			logInfo("Execute: [" + colorize(HIGHLITE_LEVEL, cmdCall) + colorize(HIGHLITE_LEVEL, "]."))
			def args = [ cmdCall ]
			def windowsArgs = [ 'cmd', '/c', cmdCall ]
			def sout = System.out, serr = System.err
			
			printLine()
			def existStatus = execOSCommand(args, windowsArgs, -1, sout, serr)
			sout.flush()
			serr.flush()
			
			logInfo("Ended with status code: " +colorize(HIGHLITE_LEVEL, existStatus) + ".")
			printLine(HIGHLITE_LEVEL, true, " exit " + existStatus + "")
		}
	} 
}


/***************************************************************************************
 * project java validation
 ***************************************************************************************/
projectValidation {
	doLast {
		//if (!project.getProperty('IS_NEW')) {
			if (!new File("$dockerFile").exists()) {
				if (!createFileFromTemplate("$dockerFile", getTemplateFile('Dockerfile.template'))) {
					printInfo("> Create " + colorize(HIGHLITE_LEVEL, "$dockerFile") + " with default values.")
				}
			}
		//}
	}
}