/*
 * release.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */
 


/* Release process description:
	1) clean, sets release settings and prepare release versioning -> releasePrepare
	2) create release branch, update version file, merge to master / build, tag and delete release branch (see below) -> releaseVerification
		# create git release branch
		git checkout –b release/v1.0.0 master
		update VERSION
		git add VERSION
		git commit
				
		# finalize release
		git checkout master
		git merge --no-ff release/v1.0.0
		git tag [-s] –m „Release v1.0.0“ v1.0.0
		
		# delete release-branch 
		git branch -d release/v1.0.0

		# push
		git push
		git push --tags

	3) publish release and prepare development version -> release
		
		# preapre version file for further development
		update VERSION
		git add VERSION
		git commit
		git push
		
 */


/**
 * Prepare the release version number
 */ 
ext.prepareReleaseVersion = {
	// prepare version number
	project.version = project.getProperty('majorVersionNumber') + "." + project.getProperty('minorVersionNumber') + "." + project.getProperty('revisionVersionNumber')
	def qualifierVersionNumber = project.getProperty('qualifierVersionNumber')
	if ((qualifierVersionNumber !=null && !qualifierVersionNumber.isEmpty()) || !project.ext.isReleaseVersion) {
		qualifierVersionNumber=qualifierVersionNumber.replace(SNAPSHOT_TAG_NAME, "")
		if (qualifierVersionNumber !=null && !qualifierVersionNumber.isEmpty()) {
			project.version = project.version + "-" +  qualifierVersionNumber
		}

		setCommonGradleProperty("qualifierVersionNumber", "$qualifierVersionNumber")
		setCommonGradleProperty("isReleaseVersion", true)
		setCommonGradleProperty('isSnapshotVersion', !project.getProperty('isReleaseVersion'))
	}
	logInfo("Prepared version number: " + project.version)
	
	return project.version;
}


/**
 * Prepare snashot release version number
 */ 
ext.prepareSnapReleaseVersion = {
	// prepare version number
	project.version = project.getProperty('majorVersionNumber') + "." + project.getProperty('minorVersionNumber') + "." + project.getProperty('revisionVersionNumber')
	def qualifierVersionNumber = project.getProperty('qualifierVersionNumber')
	if (qualifierVersionNumber==null || qualifierVersionNumber.isEmpty() || qualifierVersionNumber.endsWith(SNAPSHOT_TAG_NAME)) {
		qualifierVersionNumber=SNAPSHOT_TAG_NAME
		setCommonGradleProperty("qualifierVersionNumber", "$qualifierVersionNumber")
		project.version = project.version + "-" +  qualifierVersionNumber
		setCommonGradleProperty("isReleaseVersion", false)
		setCommonGradleProperty('isSnapshotVersion', !project.getProperty('isReleaseVersion'))
	}
	logInfo("Prepared version number: " + project.version)
	
	return project.version;
}


/**
 * Get the release artefact info file
 */ 
ext.getReleaseArtefactInfoFile = { isSnapshotArtefact = false ->
	if (project.hasProperty("releaseInfoFile")) {
		return project.getProperty("releaseInfoFile")
	}
	
	def currentReleaseBaseDirectory;
	if (!project.hasProperty("releaseBaseDirectory")) {
		def userHomeDirectory = System.properties['user.home'].replace('\\', '/')
		def commonGradleHomeDirectory = userHomeDirectory + "/.gradle"
		currentReleaseBaseDirectory="$commonGradleHomeDirectory/common-gradle-build-releases"
		currentReleaseBaseDirectory="$currentReleaseBaseDirectory"
		setCommonGradleDefaultPropertyIfNull("releaseBaseDirectory", "$currentReleaseBaseDirectory")
	} else {
		currentReleaseBaseDirectory = project.getProperty("releaseBaseDirectory")
	}

	def releaseInfoDirectoryBase = "$currentReleaseBaseDirectory"
	if (project.hasProperty("releaseAddComponentIdIntoReleasePath")
		&& project.getProperty("releaseAddComponentIdIntoReleasePath")
		&& projectComponentId!=null
		&& !projectComponentId.toString().trim().isEmpty()) {
		releaseInfoDirectoryBase = "$releaseInfoDirectoryBase/$projectComponentId"	
	}
	releaseInfoDirectoryBase = "$releaseInfoDirectoryBase/${rootProject.name}"
	
	if (isSnapshotArtefact) {
		setCommonGradleDefaultPropertyIfNull("releaseInfoDirectory", "$releaseInfoDirectoryBase/snapshot")
	} else {
		setCommonGradleDefaultPropertyIfNull("releaseInfoDirectory", "$releaseInfoDirectoryBase/" + project.version)
	}
	
	setCommonGradleDefaultPropertyIfNull("releaseInfoFile", "$releaseInfoDirectory/build.txt")
	return project.getProperty("releaseInfoFile")
}


/**
 * Validate release artefact
 */ 
ext.validateReleaseArtefact = {
	def releaseInfoFile=getReleaseArtefactInfoFile()
	if (releaseInfoFile!=null && !releaseInfoFile.toString().trim().isEmpty() && new File(releaseInfoFile).exists()) {
		def errorMessage="The release version " + project.version + " already exist for project ${rootProject.name}!"
		addError("$errorMessage")
		throw new GradleException(errorMessage)		
	}
}


/**
 * Update release artefact
 */ 
ext.updateReleaseArtefact = { isSnapshotArtefact = false ->
	def releaseInfoFile=getReleaseArtefactInfoFile(isSnapshotArtefact)
	if (releaseInfoFile==null || releaseInfoFile.toString().trim().isEmpty()) {
		return
	}

	printInfo("> Copy build information.")	
	def releaseInfoDirectory = project.getProperty("releaseInfoDirectory")
	if (isSnapshotArtefact) {
		delete releaseInfoDirectory
	}
	
	if (!new File("$releaseInfoDirectory").exists()) {
		new File("$releaseInfoDirectory").mkdirs()
	}

	logInfo("Write file " + colorize(HIGHLITE_LEVEL, releaseInfoFile) + colorize(INFO_LEVEL ,"..."))
	if (!createFileFromTemplate(releaseInfoFile, getTemplateFile('releaseinfo.template'))) {
		logInfo("> Create " + colorize(HIGHLITE_LEVEL, releaseInfoFile.replace("$releaseInfoDirectory", "")) + " with default values.")
		new File(releaseInfoFile).withWriter { w ->
			w << "Name            : " << rootProject.name << NELINE \
			  << "Version         : " << project.version << NELINE \
			  << "SCM-Version     : " << project.ext.scmVersionNumber << NELINE \
			  << "Created-By      : " << project.ext.buildToolVersionStackMessage << NELINE \
			  << "Built-By        : " << publishingUsername << NELINE \
			  << "Build-Timestamp : " << BUILD_TIMESTAMP << NELINE \
			  << "Build-JDK       : " << "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})" << NELINE \
			  << "Build-OS        : " << "${System.properties['os.name']} (${System.properties['os.version']}), ${System.properties['os.arch']}" << NELINE \
			  << "" << NELINE
		}
	}

	if (project.hasProperty("copyReleaseArtefactInformation") && project.getProperty("copyReleaseArtefactInformation")) {
		copy { from "$rootDirectory" include "build.gradle" into "${releaseInfoDirectory}" } 
		copy { from "$rootDirectory" include "settings.gradle" into "${releaseInfoDirectory}" } 
		copy { from "$rootDirectory" include "*.properties" into "${releaseInfoDirectory}" } 
		copy { from "$rootDirectory" include "VERSION" into "${releaseInfoDirectory}" } 

		if (new File("$rootDirectory/build/docs/javadoc").exists()) {
			new File("${releaseInfoDirectory}/javadoc").mkdirs()
			copy { from "$rootDirectory/build/docs/javadoc" include '**/*.*' into "${releaseInfoDirectory}/javadoc" } 
		}

		if (new File("$rootDirectory/build/reports/checkstyle").exists()) {
			new File("${releaseInfoDirectory}/checkstyle").mkdirs()
			copy { from "$rootDirectory/build/reports/checkstyle" include '**/*.*'into "${releaseInfoDirectory}/checkstyle" } 
		}

		if (new File("$rootDirectory/build/reports/testcoverage").exists()) {
			new File("${releaseInfoDirectory}/testcoverage").mkdirs()
			copy { from "$rootDirectory/build/reports/testcoverage" include '**/*.*' into "${releaseInfoDirectory}/testcoverage" } 
		}

		if (new File("$rootDirectory/build/reports/tests/test").exists()) {
			new File("${releaseInfoDirectory}/tests/test").mkdirs()
			copy { from "$rootDirectory/build/reports/tests/test" include '**/*.*' into "${releaseInfoDirectory}/tests" } 
		}
		
		if (new File("$rootDirectory/tsconfig.json").exists()) {
			copy { from "$rootDirectory" include "tsconfig.json" into "${releaseInfoDirectory}" } 
		}
		if (new File("$rootDirectory/package.json").exists()) {
			copy { from "$rootDirectory" include "package.json" into "${releaseInfoDirectory}" } 
		}
		
		def libFolder="$rootDirectory/build/lib"
		if (new File(libFolder).exists()) {
			def files = fileTree(libFolder).filter { it.isFile() }.files.name
			new File("$releaseInfoDirectory/lib-files.txt").withWriter { w -> w << "$files".replace(", ", "\n").replace("[", "").replace("]", "") }
		}
		
		def commonGradleConfigResourcebundlePath = project.getProperty("commonGradleConfigResourcebundlePath")
		if (new File(commonGradleConfigResourcebundlePath).exists()) {
			def releaseInfoResourceDirectory = "${releaseInfoDirectory}/resourcebundle"
			new File(releaseInfoResourceDirectory).mkdirs()
			copyFile(commonGradleConfigResourcebundlePath, releaseInfoResourceDirectory)
			copy { from "${commonGradleResourcebundleOutputPath}" include "*.json" into "${releaseInfoResourceDirectory}" } 
			copy { from "${commonGradleResourcebundleOutputPath}" include "*.properties" into "${releaseInfoResourceDirectory}" } 
		}
	}
}


/**
 * Validate release branch name
 */ 
ext.validateReleaseBranchName = {
	def branchName = getGitBranchName()

	if (project.hasProperty("commonGradleBuildReleaseBranchName") && !project.getProperty("commonGradleBuildReleaseBranchName").toString().isEmpty()) {
		def expectedBranchName = project.getProperty("commonGradleBuildReleaseBranchName")
		if (!expectedBranchName.toString().equals(branchName.toString())) {
			def errorMessage="Current branch ${branchName} don't match to the expected branch $expectedBranchName!"
			addError("$errorMessage")
			throw new GradleException(errorMessage)		
		}
	}
	
	return branchName
}


/** 
 * Update the local project
 */
ext.updateProject = {
	def git = null
	try {
		git = openGit()
	} catch (Exception e) {
		def errorMessage="Could not open Repository!"
		addError("$errorMessage")
		throw new GradleException(errorMessage)		
	}

	// update local repository
	logInfo("Update repository...")
	git.pull(rebase: true)
	closeGit(git)
}


/***************************************************************************************
 * release prepare
 ***************************************************************************************/
task checkReleaseCredentials(dependsOn: ['clean']) {
	group = 'Release'
	description = 'Check release credentials.'
	
	doFirst {
		def grgitUser = System.env['GRGIT_USER']
		if (grgitUser==null || grgitUser.isEmpty()) {
			def errorMessage = "Missing GRGIT_USER environment variable!"
			throw new GradleException(errorMessage)		
		}
		grgitUser = null
		def grgitPass = System.env['GRGIT_PASS']
		if (grgitPass==null || grgitPass.isEmpty()) {
			def errorMessage = "Missing GRGIT_PASS environment variable!"
			throw new GradleException(errorMessage)		
		}
		grgitPass = null
	}
}


/***************************************************************************************
 * release prepare
 ***************************************************************************************/
task checkValidReleaseEnvironment(dependsOn: ['clean']) {
	group = 'Release'
	description = 'Check release environment.'

	doFirst {
		if (project.hasProperty("cbBuildUpdate") && "true".toString().equalsIgnoreCase(project.getProperty("cbBuildUpdate").toString()) 
			|| project.hasProperty("hasExpectedWrapperVersion") && !"true".toString().equalsIgnoreCase(project.getProperty("hasExpectedWrapperVersion").toString())) {
			def errorMessage="An implicit update of the build environment blocks the release"
			if (project.hasProperty("hasExpectedWrapperVersion") && !"true".toString().equalsIgnoreCase(project.getProperty("hasExpectedWrapperVersion").toString())) { 
				errorMessage="${errorMessage} (gradle wrapper update)!"
			} else {
				errorMessage="${errorMessage} (common build, cb)!"
			}
			
			if (project.hasProperty('isReleaseUpdateVersion') && "true".equalsIgnoreCase("" + project.getProperty('isReleaseUpdateVersion'))) {
				printInfo("> Implicit update of the build environment, don't block for the release update.")
			} else {
				throw new GradleException("- ${errorMessage}")
			}
		}
	}
}


/***************************************************************************************
 * release prepare
 ***************************************************************************************/
task releasePrepare(dependsOn: ['checkValidReleaseEnvironment', 'checkReleaseCredentials']) {
	group = 'Release'
	description = 'Prepare release.'

	doFirst {
		if (!isGitAvailable()) {
			def errorMessage="Repository is not ready!"
			addError("$errorMessage")
			throw new GradleException(errorMessage)		
		}

		// prepare version number
		if (project.hasProperty("commonGradleBuildSupportSnapshotHandling") && project.getProperty("commonGradleBuildSupportSnapshotHandling")) {
			prepareReleaseVersion()
		}

		// validate the release artefact
		if (project.hasProperty("commonGradleBuildValidateReleaseArtefact") && project.getProperty("commonGradleBuildValidateReleaseArtefact")) {
			validateReleaseArtefact()
		}

		// mandatory release settings
		setCommonGradleProperty("buildAlwaysDockerImage", true)
		setCommonGradleProperty("dockerCleanupAfterBuild", false)
		setCommonGradleProperty("dockerCleanupAfterPublish", true)

		def releaseName="v" + project.version
		setCommonGradleProperty("releaseName", releaseName)
		printInfo("> Build release " + colorize(HIGHLITE_LEVEL, project.version) + ".")
		
		if (project.hasProperty("commonGradleBuildVersionFileChanged") && project.getProperty("commonGradleBuildVersionFileChanged")) {
			printInfo("> Update version file " + colorize(HIGHLITE_LEVEL, "${versionFile}") + ".")
			updateVersion()
		}
	}
}
releasePrepare.finalizedBy('build')


/***************************************************************************************
 * release snashot prepare
 ***************************************************************************************/
task releasePrepareSnapshot(dependsOn: ['checkValidReleaseEnvironment', 'clean']) {
	group = 'Release'
	description = 'Prepare snapshot release.'
	
	doFirst {
		if (!isGitAvailable()) {
			def errorMessage="Repository is not ready!"
			addError("$errorMessage")
			throw new GradleException(errorMessage)		
		} else {
			//updateProject
		}

		// validate the branch name
		def branchName = validateReleaseBranchName()

		// prepare version number
		if (project.hasProperty("commonGradleBuildSupportSnapshotHandling") && project.getProperty("commonGradleBuildSupportSnapshotHandling")) {
			prepareSnapReleaseVersion()		
		}

		// mandatory release settings
		setCommonGradleProperty("buildAlwaysDockerImage", true)
		setCommonGradleProperty("dockerCleanupAfterBuild", false)
		setCommonGradleProperty("dockerCleanupAfterPublish", true)

		def releaseName="v" + project.version
		setCommonGradleProperty("releaseName", releaseName)
		printInfo("> Build snapshot release " + colorize(HIGHLITE_LEVEL, project.version) + ".")
		
		if (project.hasProperty("commonGradleBuildVersionFileChanged") && project.getProperty("commonGradleBuildVersionFileChanged")) {
			printInfo("> Update version file " + colorize(HIGHLITE_LEVEL, "${versionFile}") + ".")
			updateVersion()
		}
	}
}
releasePrepareSnapshot.finalizedBy('build')


/***************************************************************************************
 * release verification
 ***************************************************************************************/
task releaseVerification(dependsOn: ['releasePrepare']) {
	group = 'Release'
	description = 'Release verification.'
	onlyIf { return project.hasProperty('validBuild') && project.getProperty('validBuild') }

	doFirst {
		def changedFileSetList = null;
		if (project.hasProperty('changedFileSet')) {
			changedFileSetList = new ArrayList(Arrays.asList(changedFileSet.split(", ")))
		}
		
		def tagAndUpdate = false
		def noTagReason = "(disabled)"
		if (project.hasProperty('isReleaseVersion') && "true".equalsIgnoreCase("" + project.getProperty('isReleaseVersion')) && project.hasProperty('tagReleaseVersion') && "true".equalsIgnoreCase("" + project.getProperty('tagReleaseVersion'))) {
			if (project.hasProperty('isReleaseUpdateVersion') && "true".equalsIgnoreCase("" + project.getProperty('isReleaseUpdateVersion'))) {
				noTagReason = "on release update (disabled)"
				tagAndUpdate = (project.hasProperty('tagReleaseUpdateVersion') && "true".equalsIgnoreCase("" + project.getProperty('tagReleaseUpdateVersion')))

				// don't tag in case there are not enough changed files (exclude version and changelog)
				if (tagAndUpdate && project.hasProperty('tagIgnoreReleaseUpdateVersionIfNoFilesChanged') && "true".equalsIgnoreCase("" + project.getProperty('tagIgnoreReleaseUpdateVersionIfNoFilesChanged'))) {
					noTagReason = "on release update (no files to tag)"
					if (changedFileSetList==null || changedFileSetList.isEmpty()) {
						tagAndUpdate = false
					} else {
						tagAndUpdate = false
						
						// check if some common names are included which don't count as change
						for (String changeFileName : changedFileSetList) {
							if (changeFileName!=null && !changeFileName.trim().isEmpty() && new File(changeFileName).exists()) {
								def filename = changeFileName.replace("${rootDirectory}/", "")
								if (!tagAndUpdate && !filename.startsWith("${changelogFilename}") && !filename.startsWith("${versionFilename}")) {
									tagAndUpdate = true
									break;
								}
							}
						}
					}	
				}
			} else {
			    tagAndUpdate = true
			}
		}

		if (!tagAndUpdate) {
			printInfo("> Ignore set tag " + noTagReason + ".")
		} else {
			// validate the branch name
			def branchName = validateReleaseBranchName()
			
			setCommonGradleProperty("releaseBranchName", "release/$releaseName")
			printInfo("> Prepare release branch, " + colorize(HIGHLITE_LEVEL, "$releaseBranchName") + ".")

			/* create git release branch;
				git checkout –b release/v1.0.0 master
				update VERSION
				git add VERSION
				git commit
			 */
			def git = checkout("$releaseBranchName", true)
			updateVersion()	
			logInfo("Update version file " + colorize(HIGHLITE_LEVEL, "$versionFilename") + ".")
			git.add(patterns: ["$versionFilename"])
			
			if (project.hasProperty('changedFileSet')) {
				for (String changeFileName : changedFileSetList) {
					if (changeFileName!=null && !changeFileName.trim().isEmpty() && new File(changeFileName).exists()) {
						def fileName = changeFileName.replace("${rootDirectory}/", "") 
						logInfo("Update " + colorize(HIGHLITE_LEVEL, fileName) + ".")
						git.add(patterns: [ "$fileName" ])
					}
				}
			}
			
			git.commit(message: "Release $releaseName")

			/* checkout branch to merge:
				git checkout master
				git merge --no-ff release/v1.0.0
				git tag –m „Release v1.0.0“ v1.0.0
			 */
			printInfo("> Merge release branch " + colorize(HIGHLITE_LEVEL, "$releaseBranchName") + " into " + colorize(HIGHLITE_LEVEL, "$branchName") + ".")
			git.checkout(branch: "$branchName")
			git.merge(head: "$releaseBranchName", mode: "CREATE_COMMIT", message: "Merge $releaseBranchName into $branchName")
		
			def commitHashId = git.head().id;
			if (commitHashId!=null && commitHashId.length() > 9) {
				commitHashId = commitHashId.substring(0, 9)
			}
		
			printInfo("> Set tag " + colorize(HIGHLITE_LEVEL, "$releaseName") + " based on " + colorize(HIGHLITE_LEVEL, "$commitHashId") + ".")
			git.tag.add(name: "$releaseName", message: "Release $releaseName", force: true)
		
			printInfo("> Delete release branch " + colorize(HIGHLITE_LEVEL, "$releaseBranchName") + ".")
			git.branch.remove(names: [ releaseBranchName ], force: true)
			git.push()
			git.push(tags: true, force: true)
			/* delete release-branch
				git branch -d release/v1.0.0
				git push
				git push --tags
			*/
		
			closeGit(git)
		
			// update hash
			project.setProperty('scmVersionNumber', getGitCommitHash())
		}
	}
}	


/***************************************************************************************
 * publishRelease 
 ***************************************************************************************/
task publishRelease() {
	group = 'Release'
	description = 'Publish release.'
	onlyIf { return project.hasProperty('validBuild') && project.getProperty('validBuild') }

	doLast {
		if (project.hasProperty("commonGradleBuildReleasePublish") && project.getProperty("commonGradleBuildReleasePublish")) {
			def deployUrl = project.getProperty('mavenPublishUrl')
			if (project.ext.isSnapshotVersion) {
				deployUrl = project.getProperty('mavenSnapshotPublishUrl')
			}
			printInfo("> Publish release version " + colorize(HIGHLITE_LEVEL, "${project.version}") + " to " + colorize(HIGHLITE_LEVEL, deployUrl) + ".")
		}
	}
}
if (project.hasProperty("commonGradleBuildReleasePublish") && project.getProperty("commonGradleBuildReleasePublish")) {
	publishRelease.finalizedBy('publish')
}


/***************************************************************************************
 * release 
 ***************************************************************************************/
// setCommonGradleProperty('isSnapshotVersion', !project.getProperty('isReleaseVersion'))
setCommonGradleProperty("cbBuildUpdate", System.getenv('CB_BUILD_UPDATE'))
if (project.hasProperty('isSnapshotVersion') && project.getProperty('isSnapshotVersion')) {
	task release(dependsOn: ['releasePrepareSnapshot']) {
		group = 'Release'
		description = 'Release the current version as snapshot.'
		onlyIf { return project.hasProperty('validBuild') && project.getProperty('validBuild') }

		doFirst {
			updateReleaseArtefact(true)
		}
	}
	
	if (project.hasProperty('taskNameBeforeReleaseArtefacts')) {
		release.mustRunAfter("${taskNameBeforeReleaseArtefacts}") // e.g.: build or dockerBuild
	}
	release.finalizedBy('publishRelease')
} else { 
	task release(dependsOn: ['releaseVerification']) {
		group = 'Release'
		description = 'Release the current version.'
		onlyIf { return project.hasProperty('validBuild') && project.getProperty('validBuild') }

		doFirst {
			updateReleaseArtefact()

			if (project.hasProperty('isReleaseUpdateVersion') && "true".equalsIgnoreCase("" + project.getProperty('isReleaseUpdateVersion')))  {
				// don't do anything on repository
				logInfo("Keep current status on repository: " + colorize(HIGHLITE_LEVEL, project.version))
				prepareSnapReleaseVersion()
			} else {
				// update version file
				if (project.hasProperty("commonGradleBuildSupportSnapshotHandling") && project.getProperty("commonGradleBuildSupportSnapshotHandling")) {
					setCommonGradleProperty("qualifierVersionNumber", SNAPSHOT_TAG_NAME)
				}			
				
				def git = openGit()
				def previousReleaseVersionNumber = "${project.ext.majorVersionNumber}.${project.ext.minorVersionNumber}.${project.ext.revisionVersionNumber}"
				prepareSnapReleaseVersion()
				increaseRevisionVersion()
				def newReleaseVersionNumber = "${project.ext.majorVersionNumber}.${project.ext.minorVersionNumber}.${project.ext.revisionVersionNumber}"			
				printInfo("> Prepare development " + colorize(HIGHLITE_LEVEL, "${project.version}") + ".")
				git.add(patterns: ["$versionFilename"])

				// in case of changelog			
				if (project.hasProperty('changelogUpdateFileAfterRelease') && project.getProperty('changelogUpdateFileAfterRelease')) {
					if (project.hasProperty('createChangelogFile') && project.getProperty('createChangelogFile')) {
						def defaultChangelogType = ""
						if (project.hasProperty('changelogDefaultType') && !project.getProperty('changelogDefaultType').toString().isEmpty()) {
							defaultChangelogType = "${changelogDefaultType}";
						}
						
						def defaultChangelogComment = ""
						if (project.hasProperty('changelogDefaultComment') && !project.getProperty('changelogDefaultComment').toString().isEmpty()) {
							defaultChangelogComment = "${changelogDefaultComment}";
						}
					
						updateChangelog(defaultChangelogType, defaultChangelogComment)
						git.add(patterns: ["$changelogFilename"])
					}
				}
				
				// in case of api spec
				if (project.hasProperty('openapiUpdateFileAfterRelease') && project.getProperty('openapiUpdateFileAfterRelease')) {
					def filesReplaced = replaceFile(srcMainApiSpecDirectory, ".yaml", previousReleaseVersionNumber, newReleaseVersionNumber, "${openapiVersionContentLineRegExp}")
					for (File file: filesReplaced) {
						def specFileName = "${srcMainApiSpecDirectory}/" + file.getName()
						if (specFileName.toString().startsWith("./")) {
							specFileName = specFileName.toString().substring(2)
						}

						printInfo("> Updated successful api-spec file " + colorize(HIGHLITE_LEVEL, file.getName()) + "."); 
						git.add(patterns: [ "" + specFileName ])
					}
				}
				
				git.commit(message: "Prepare development v" + project.version)
				git.push()
				
				closeGit(git)

				project.setProperty('scmVersionNumber', getGitCommitHash())
			}
		}
	}

	if (project.hasProperty('taskNameBeforeReleaseArtefacts')) {
		releaseVerification.mustRunAfter("${taskNameBeforeReleaseArtefacts}") // e.g.: build or dockerBuild
	}
    releaseVerification.finalizedBy('publishRelease')
}
