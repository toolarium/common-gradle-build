/*
 * changelog.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */

buildscript {
	repositories {
        if (Integer.valueOf(gradle.gradleVersion.toString().split('\\.')[0])<7) {
			jcenter()
		} else {
			mavenCentral()
		}
        
		//maven { url("https://oss.sonatype.org/content/repositories/snapshots") }
	}
	dependencies {
		def toolariumChangelogParserVersion="0.9.1"
		if (project.hasProperty('toolariumChangelogParserVersion')) {
			toolariumChangelogParserVersion = project.getProperty('toolariumChangelogParserVersion')
		}
	
		logInfo("toolarium changelog parser version: " + colorize(HIGHLITE_LEVEL, toolariumChangelogParserVersion) + colorize(INFO_LEVEL, ".")); 
		classpath "com.github.toolarium:toolarium-changelog-parser:${toolariumChangelogParserVersion}"
	}
}


/** 
 * Parse a semver compliant version
 */
import com.github.toolarium.changelog.dto.ChangelogReleaseVersion;
import com.github.toolarium.changelog.dto.ChangelogChangeType;
import com.github.toolarium.changelog.ChangelogFactory;
import com.github.toolarium.changelog.config.ChangelogConfig;
import com.github.toolarium.changelog.parser.ChangelogParseResult;
import com.github.toolarium.changelog.validator.ValidationException;

import java.nio.file.Paths;
ext.parseReleaseVersion = { inputVersion ->
	ChangelogReleaseVersion releaseVersion = ChangelogFactory.getInstance().createChangelogParser().parseVersion("" + inputVersion);
	return releaseVersion;
}


/** 
 * Create the changelog config based on settings
 */
ext.createChangelogConfig = { inputChangelogConfig = null ->
	ChangelogConfig changelogConfig = inputChangelogConfig;
	if (changelogConfig == null) {
		changelogConfig = new ChangelogConfig();		
		if (project.hasProperty("changelogHeaderSeparator")) {
			changelogConfig.setHeaderSeparator(project.getProperty("changelogHeaderSeparator").charAt(0));
		}
			
		if (project.hasProperty("changelogItemSeparator")) {
			changelogConfig.setItemSeparator(project.getProperty("changelogItemSeparator").charAt(0));
		}

		if (project.hasProperty("changelogSupportUnreleased")) {
			changelogConfig.setSupportUnreleased(project.getProperty("changelogSupportUnreleased"));
		}

		if (project.hasProperty("changelogSupportEmptySection")) {
			changelogConfig.setSupportEmptySection(project.getProperty("changelogSupportEmptySection"));
		}

		if (project.hasProperty("changelogSupportBracketsAroundVersion")) {
			changelogConfig.setSupportBracketsAroundVersion(project.getProperty("changelogSupportBracketsAroundVersion"));
		}

		if (project.hasProperty("changelogSupportReleaseLink")) {
			changelogConfig.setSupportReleaseLink(project.getProperty("changelogSupportReleaseLink"));
		}

		if (project.hasProperty("changelogSupportReleaseInfo")) {
			changelogConfig.setSupportReleaseInfo(project.getProperty("changelogSupportReleaseInfo"));
		}

		if (project.hasProperty("changelogSupportLinkInDescription")) {
			changelogConfig.setSupportLinkInDescription(project.getProperty("changelogSupportLinkInDescription"));
		}

		if (project.hasProperty("changelogSupportIdListOnEndOfTheComment")) {
			changelogConfig.setSupportIdListOnEndOfTheComment(project.getProperty("changelogSupportIdListOnEndOfTheComment"));
		}
	}
	
	logInfo("Changelog config: $changelogConfig")	
	return changelogConfig;
}


/** 
 * Validate a changelog file
 */
ext.validateChangelog = { inputChangelogConfig = null ->
	def failOnError = ("true".equalsIgnoreCase("" + project.getProperty('isReleaseVersion')) 
		                 || (project.hasProperty("changelogFailOnSnapshotBuild") && project.getProperty("changelogFailOnSnapshotBuild")));
	try {
		def versionSection = "${project.ext.majorVersionNumber}.${project.ext.minorVersionNumber}.${project.ext.revisionVersionNumber}";
		ChangelogFactory.getInstance().validate(createChangelogConfig(inputChangelogConfig), Paths.get("${changelogFile}"), "${rootProject.name}", "${changelogDescription}", "${versionSection}");
		logInfo("Validated successful changelog file [" + colorize(HIGHLITE_LEVEL, changelogFile) + colorize(INFO_LEVEL, ".")); 
	} catch (IOException e) {
		printWarn("Could not validate changelog file [" + colorize(HIGHLITE_LEVEL, changelogFile) + colorize(WARN_LEVEL, "]: " +e.getMessage())) 
		
		if (failOnError) {
			addError("Could not validate changelog file ${changelogFile}: " + e.getMessage())
		}
	} catch (ValidationException ve) {
		if (ve.getValidationErrorList() != null) {
			printWarn("Invalid changelog file [" + colorize(HIGHLITE_LEVEL, changelogFile) + colorize(WARN_LEVEL, "]: " + NELINE + ve.getValidationErrorList().prepareString("    ")))
		} else {
			printWarn("Invalid changelog file [" + colorize(HIGHLITE_LEVEL, changelogFile) + colorize(WARN_LEVEL, "]: " + ve.getMessage())) 
		}
		
		if (failOnError) {
			addError("Invalid format in changelog: ${changelogFile}!")
		}
	}
}


/** 
 * Update the changelog
 */
ext.updateChangelog = { inputChangelogConfig = null ->
	try {
		def changelog = ChangelogFactory.getInstance().parse(Paths.get("${changelogFile}")).getChangelog();
		logInfo("Parsed successful changelog file [" + colorize(HIGHLITE_LEVEL, changelogFile) + colorize(INFO_LEVEL, ".")); 
		
		def versionSection = "${project.ext.majorVersionNumber}.${project.ext.minorVersionNumber}.${project.ext.revisionVersionNumber}";
		if (changelog.getEntry(versionSection)==null) {
			changelog.addEntry(versionSection, null);//.addSection(ChangelogChangeType.CHANGED); //.add("");

			def content = ChangelogFactory.getInstance().format(createChangelogConfig(inputChangelogConfig), changelog);
			if (content!=null && !content.toString().isBlank()) {
				new File("${changelogFile}").write(content)	
			}

			printInfo("> Updated successful changelog file " + colorize(HIGHLITE_LEVEL, changelogFile) + "."); 
		}
	} catch (IOException e) {
		printWarn("Could not parse changelog file [" + colorize(HIGHLITE_LEVEL, changelogFile) + colorize(WARN_LEVEL, "]: " +e.getMessage())) 
	}	
}


/***************************************************************************************
 * Project validation
 ***************************************************************************************/
projectValidation {
	if (new File(changelogFile).exists() && (project.hasProperty('validateChangelogFile') && project.getProperty('validateChangelogFile'))) {
		validateChangelog()
	}
}
