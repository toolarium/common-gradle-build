/*
 * supported-repositories.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */

 
/***************************************************************************************
 * Defines supported repositories
 ***************************************************************************************/
repositories {
	if (project.hasProperty('allowMavenCentralRepository') && project.getProperty('allowMavenCentralRepository')) {
		logInfo("Allow maven central repository")
		mavenCentral()
	}
	
	if (project.hasProperty('allowGoogleRepository') && project.getProperty('allowGoogleRepository')) {
		logInfo("Allow google repository")
		google()
	}

	if (project.hasProperty('allowJCenterRepository') && project.getProperty('allowJCenterRepository')) {
		logInfo("Allow jcenter repository")
		jcenter()
	}

	if (project.hasProperty('allowMavenCenterRepository') && project.getProperty('allowMavenCenterRepository')) {
		logInfo("Allow mavenCenter repository")
		mavenCentral()
		maven {
			url "https://mvnrepository.com/artifact"
			
		}
	}

	if (project.hasProperty('allowMavenSnapshotRepository') && project.getProperty('allowMavenSnapshotRepository') && project.hasProperty('mavenSnapshotRepositoryUrl')) {
		def mavenSnapshotRepositoryUrl = project.getProperty('mavenSnapshotRepositoryUrl')
		if (mavenSnapshotRepositoryUrl!=null && !mavenSnapshotRepositoryUrl.isEmpty()) {	
			logInfo("Allow maven snapshot repository " + colorize(HIGHLITE_LEVEL, mavenSnapshotRepositoryUrl))
			maven { url mavenSnapshotRepositoryUrl }
		}
	}

	if (project.hasProperty('allowMavenStagingRepository') && project.getProperty('allowMavenStagingRepository') && project.hasProperty('mavenStagingRepositoryUrl')) {
		def mavenStagingRepositoryUrl = project.getProperty('mavenStagingRepositoryUrl')
		if (mavenStagingRepositoryUrl!=null && !mavenStagingRepositoryUrl.isEmpty()) {	
			logInfo("Allow maven staging repository " + colorize(HIGHLITE_LEVEL, mavenStagingRepositoryUrl))
			maven { url mavenStagingRepositoryUrl }
		}
	}

	if (project.hasProperty('allowMavenRepository') && project.getProperty('allowMavenRepository') && project.hasProperty('mavenRepositoryUrl')) {
		def mavenRepositoryUrl = project.getProperty('mavenRepositoryUrl')
		if (mavenRepositoryUrl!=null && !mavenRepositoryUrl.isEmpty()) {	
			logInfo("Allow maven repository " + colorize(HIGHLITE_LEVEL, mavenRepositoryUrl))
			maven { url mavenRepositoryUrl }
		}
	}
}
