/*
 * publication.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */
 
 
apply plugin: 'maven-publish'
apply from: "${commonGradleBuildElementPath}/scm/git.gradle"


/***************************************************************************************
 * Repository publishing
 ***************************************************************************************/
publishing {
	publications {
        mavenJava(MavenPublication) {
            artifactId = "${rootProject.name}"
			groupId= "${projectGroupId}"

			if (project.hasProperty('createJar') && project.getProperty('createJar')) {
				from components.java
			}
			
			if (project.hasProperty('createSourceJar') && project.getProperty('createSourceJar')) {
				artifact sourcesJar
			}
			
			if (project.hasProperty('createJavadocJar') && project.getProperty('createJavadocJar')) {
				artifact javadocJar
			}
			
			if (project.hasProperty('kubernetesSupport') && project.getProperty('kubernetesSupport')) {
				artifact kubernetesJar
			}

			if (project.hasProperty('createCustomJar') && project.getProperty('createCustomJar')) {
				artifact customJar
			}
			
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
			
			// after staging go to -> https://oss.sonatype.org/#stagingRepositories -> close
            pom {
                name = "${rootProject.name}"
                description = "${projectDescription}"
                url = "${projectUrl}"
				
                licenses {
                    license {
                        name = "${licenseText}"
                        url = "${licenseUrl}"
                    }
                }
		
				def publishingUsername = project.getProperty('publishingUsername')
				def publishingMail = publishingUsername
				if (project.hasProperty('publishingMail')) {
					publishingMail = project.getProperty('publishingMail')
				}
			
				developers {
					developer {
						id = "${mavenUsername}"
						
						if (publishingUsername!=null && !publishingUsername.isEmpty()) {
							name = "${publishingUsername}"
						}
						
						if (publishingMail!=null && !publishingMail.isEmpty()) {
							email = "${publishingMail}"
						}
					}
				}
				
				def scmConnection
				if (project.hasProperty('scmConnection')) {
					scmConnection = project.getProperty('scmConnection')
				} else {
					def urlList = getRemoteGit()
					if (urlList!=null && !urlList.isEmpty() && urlList[0]!=null && urlList[0].url!=null) {
						scmConnection = 'scm:git:' + urlList[0].url
					}
				}
				
				def scmDeveloperConnection = scmConnection
				if (project.hasProperty('scmDeveloperConnection')) {
					scmDeveloperConnection = project.getProperty('scmDeveloperConnection')
				}

				if (scmConnection!=null || scmDeveloperConnection!=null) {
					scm {
						connection = "${scmConnection}"
						developerConnection = "${scmDeveloperConnection}"
						url = "${projectUrl}"
					}
				}
            }
        }
	}
	
	repositories {
		def deployUrl = project.getProperty('mavenPublishUrl')
		if (project.ext.isSnapshotVersion) {
			deployUrl = project.getProperty('mavenSnapshotPublishUrl')
		}
		
		if (!deployUrl.endsWith('/')) {
			deployUrl += '/'
		}		
		
        maven {
            url deployUrl

			def mvnUsername = ''
			if (project.hasProperty('mavenUsername')) {
				mvnUsername = project.getProperty('mavenUsername')
			}

			def mvnPassword = ''
			if (project.hasProperty('mavenPassword')) {
				mvnPassword = project.getProperty('mavenPassword')
			}
			
            credentials {
                    username "${mvnUsername}"
                    password "${mvnPassword}"
            }
        }
    }
}
