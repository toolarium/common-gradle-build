/*
 * checkstyle.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */

 
/***************************************************************************************
 * Checkstyle configuraiton
 ***************************************************************************************/
if (project.hasProperty('initCheckstyle') && project.getProperty('initCheckstyle')) {
	def runtimeCheckstyleConfigurationPath = null

	// in case we have a global configuration and we only reference we don't have a local copy in the project
	if ((!project.hasProperty('projectIndividualCheckstyleConfiguration') || !project.getProperty('projectIndividualCheckstyleConfiguration'))
		&& project.hasProperty('commonGradleBuildHome') && project.hasProperty('commonGradleConfigPathName')) {
		def homeCheckstyleConfigurationPath = project.getProperty('commonGradleBuildHome') + "/" + project.getProperty('commonGradleConfigPathName') + "/checkstyle"
		
		if (new File(homeCheckstyleConfigurationPath).exists()) {
			setCommonGradleProperty("doCreateCheckstyleConfiguration", false)
			runtimeCheckstyleConfigurationPath = homeCheckstyleConfigurationPath
			setCommonGradleProperty("runtimeCheckstyleConfigurationPath", runtimeCheckstyleConfigurationPath)
			logInfo("Use reference checkstyle configuration " + colorize(HIGHLITE_LEVEL, runtimeCheckstyleConfigurationPath) + ".")
		}
	}	

	if (runtimeCheckstyleConfigurationPath==null) {
		setCommonGradleProperty("doCreateCheckstyleConfiguration", true)
		// work around: set the checkstyle as absolute path
		runtimeCheckstyleConfigurationPath = project.getProperty('checkstyleConfigurationPath')
		if (runtimeCheckstyleConfigurationPath.startsWith("./")) {
			runtimeCheckstyleConfigurationPath = cbProjectRootDir + "/" + checkstyleConfigurationPath.substring(2)
		}
		
		setCommonGradleProperty("runtimeCheckstyleConfigurationPath", runtimeCheckstyleConfigurationPath)
	}
	
	if (runtimeCheckstyleConfigurationPath!=null && !runtimeCheckstyleConfigurationPath.isEmpty() && new File("${runtimeCheckstyleConfigurationPath}/${checkstyleConfigurationFilename}").exists()) {
		apply plugin: 'checkstyle'
		
		checkstyleMain.dependsOn("jar")
		checkstyle {
			maxWarnings = project.getProperty('checkstyleMaxWarnings')
			
			if (project.hasProperty('checkstyleToolVersion') && project.getProperty('checkstyleToolVersion')!=null && !project.getProperty('checkstyleToolVersion').isEmpty()) {
				toolVersion = project.getProperty('checkstyleToolVersion')
			}
			
			configProperties = [
					'samedir': runtimeCheckstyleConfigurationPath
				]
				
			logInfo("Checkstyle file " + colorize(HIGHLITE_LEVEL, "${runtimeCheckstyleConfigurationPath}/${checkstyleConfigurationFilename}") + ".")
			configFile file("${runtimeCheckstyleConfigurationPath}/${checkstyleConfigurationFilename}")
		}
		
		tasks.withType(Checkstyle) {
			reports {
				if (Integer.valueOf(gradle.gradleVersion.toString().split('\\.')[0])<7) {
					if (project.hasProperty('checkstyleXMLReport')) {
						xml.enabled = project.getProperty('checkstyleXMLReport')
					} else {
						xml.enabled = false
					}
					
					if (project.hasProperty('checkstyleHTMLReport')) {
						html.enabled = project.getProperty('checkstyleHTMLReport')
					} else {
						html.enabled = true
					}
				} else {
					if (project.hasProperty('checkstyleXMLReport')) {
						xml.required = project.getProperty('checkstyleXMLReport')
					} else {
						xml.required = false
					}
					
					if (project.hasProperty('checkstyleHTMLReport')) {
						html.required = project.getProperty('checkstyleHTMLReport')
					} else {
						html.required = true
					}
				}
				
				if (project.hasProperty('checkstyleCustomStylesheet')) {
					html.stylesheet resources.text.fromFile(project.getProperty('checkstyleCustomStylesheet'))
				}
			}
		}

		// define main directory
		checkstyleMain {
			source = project.getProperty('srcMainDirectory')
		}


		// define test directory
		checkstyleTest {
			source = project.getProperty('srcTestDirectory')
		}
	} else if (!project.getProperty('IS_NEW')) {
		printWarn("Could not load checkstyle configuration (${runtimeCheckstyleConfigurationPath})!")
	}
}


/***************************************************************************************
 * Project validation
 ***************************************************************************************/
projectValidation {
	doFirst {
		if (project.hasProperty('initCheckstyle') && project.getProperty('initCheckstyle')) {
			if (project.hasProperty('doCreateCheckstyleConfiguration') && project.getProperty('doCreateCheckstyleConfiguration')) {
				createCheckstyleConfiguration()
			}
		}
	}
}


/***************************************************************************************
 * Create checkstyle configuraiton
 ***************************************************************************************/
ext.createCheckstyleConfiguration = { overwrite = false ->
	def checkstyleFile = project.getProperty('checkstyleConfigurationFilename')
	if (overwrite || !new File("$checkstyleConfigurationPath/${checkstyleFile}").exists()) {
		def checkstyleConfigurationPath = project.getProperty('checkstyleConfigurationPath')	
		if (new File(checkstyleConfigurationPath).mkdirs()) {
			printInfo("> Created path " + colorize(HIGHLITE_LEVEL, checkstyleConfigurationPath) + ".")
		}
		
		if (!createFileFromTemplate("$checkstyleConfigurationPath/$checkstyleFile", getTemplateFile('checkstyle.xml.template', 'checkstyle'))) {
			printInfo("> No checkstyle configuration file found, ignore checkstyle.")
		} else if (!createFileFromTemplate("$checkstyleConfigurationPath/checkstyle-file-header.txt", getTemplateFile('checkstyle-file-header.txt.template', 'checkstyle'))) {
			printInfo("> No checkstyle configuration file found, ignore checkstyle.")
		} else  if (!createFileFromTemplate("$checkstyleConfigurationPath/checkstyle-suppressions.xml", getTemplateFile('checkstyle-suppressions.xml.template', 'checkstyle'))) {
			printInfo("> No checkstyle configuration file found, ignore checkstyle.")
		}
	}
}

