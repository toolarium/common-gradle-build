/*
 * checkstyle.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */
 

/***************************************************************************************
 * Project validation
 ***************************************************************************************/
projectValidation {
	doLast {
		if (project.hasProperty('INIT_CHECKSTYLE') && project.getProperty('INIT_CHECKSTYLE')) {
			createCheckstyleConfiguration()
		}	
	}
}


/***************************************************************************************
 * Checkstyle configuraiton
 ***************************************************************************************/
if (project.hasProperty('INIT_CHECKSTYLE') && project.getProperty('INIT_CHECKSTYLE')) {
	apply plugin: 'checkstyle'
	checkstyle {
		maxWarnings = project.getProperty('checkstyleMaxWarnings')
		
		if (project.hasProperty('checkstyleToolVersion') && project.getProperty('checkstyleToolVersion')!=null && !project.getProperty('checkstyleToolVersion').isEmpty()) {
			toolVersion = project.getProperty('checkstyleToolVersion')
		}
		
		configFile file(project.getProperty('checkstyleConfiguration'))
	}

	tasks.withType(Checkstyle) {
		reports {
			if (project.hasProperty('checkstyleXMLReport')) {
				xml.enabled project.getProperty('checkstyleXMLReport')
			} else {
				xml.enabled false
			}

			if (project.hasProperty('checkstyleHTMLReport')) {
				html.enabled project.getProperty('checkstyleHTMLReport')
			} else {
				html.enabled true
			}
			
			if (project.hasProperty('checkstyleCustomStylesheet')) {
				html.stylesheet resources.text.fromFile(project.getProperty('checkstyleCustomStylesheet'))
			}
		}
	}

	// define main directory
	checkstyleMain {
		source = project.getProperty('srcMainDirectory')
	}


	// define test directory
	checkstyleTest {
		source = project.getProperty('srcTestDirectory')
	}
}


/***************************************************************************************
 * Create checkstyle configuraiton
 ***************************************************************************************/
ext.createCheckstyleConfiguration = { overwrite = false ->
	def configDirectory = project.getProperty('configDirectory')
	def checkstylePath = "$configDirectory/checkstyle/"
	def checkstyleFile = "checkstyle.xml"
	
	if (overwrite || !new File("${checkstylePath}", "${checkstyleFile}").exists()) {
		new File(configDirectory).mkdirs()
		if (new File(checkstylePath).mkdirs()) {
			printInfo("> Created path " + colorize(HIGHLITE_LEVEL, checkstylePath) + ".")
		}
		
		def commonGradleTemplateJavaPath= project.getProperty('commonGradleTemplateJavaPath')
		logInfo("Write file " + colorize(HIGHLITE_LEVEL, checkstylePath + "/" + checkstyleFile) + colorize(INFO_LEVEL, "..."))
		def checkstyleTemplate = 'checkstyle.xml.template'
		def srcMainDirectoryName = project.getProperty('srcMainDirectoryName')
		def srcTestDirectoryName = project.getProperty('srcTestDirectoryName')
		def srcMainDirectory = project.getProperty('srcMainDirectory')
		def srcTestDirectory = project.getProperty('srcTestDirectory')
		
		if (new File("${commonGradleTemplateJavaPath}", "${checkstyleTemplate}").exists()) {
			printInfo("> Create " + colorize(HIGHLITE_LEVEL, checkstyleFile) + " from template ${checkstyleTemplate}.")
			copy {
				from "${commonGradleTemplateJavaPath}"
				include "${checkstyleTemplate}"
				into "${checkstylePath}"
				rename { String fileName -> fileName.replace(checkstyleTemplate, checkstyleFile) }
				filter { line -> line.replaceAll('@@rootProject.name@@', "${rootProject.name }".toString()) }					
				filter { line -> line.replaceAll('@@PROJECT_NAME@@', "${rootProject.name}".toString()) }
				filter { line -> line.replaceAll('@@GROUP_ID@@', "${project.ext.rootGroupId}".toString()) }
				filter { line -> line.replaceAll('@@COMPONENT_ID@@', "${project.ext.rootComponent}".toString()) }
				filter { line -> line.replaceAll('@@PACKAGE@@', "${project.ext.rootPackageName}".toString()) }
				filter { line -> line.replaceAll('@@DESCRIPTION@@', "${project.ext.rootDescription}".toString()) }
				filter { line -> line.replaceAll('@@URL@@', "${project.ext.rootUrl}".toString()) }
				filter { line -> line.replaceAll('@@LICENSE@@', "${project.ext.LICENSE}".toString()) }
				filter { line -> line.replaceAll('@@MAJOR_NUMBER@@', "${project.ext.majorVersionNumber}".toString()) }
				filter { line -> line.replaceAll('@@MINOR_NUMBER@@', "${project.ext.minorVersionNumber}".toString()) }
				filter { line -> line.replaceAll('@@REVISION_NUMBER@@', "${project.ext.revisionVersionNumber}".toString()) }
				filter { line -> line.replaceAll('@@BUILD_NUMBER@@', "${project.ext.buildVersionNumber}".toString()) }
				filter { line -> line.replaceAll('@@SCM_NUMBER@@', "${project.ext.scmVersionNumber}".toString()) }
				filter { line -> line.replaceAll('@@BUILD_TIMESTAMP@@', "${project.ext.BUILD_TIMESTAMP}".toString()) }
				filter { line -> line.replaceAll('@@IS_RELEASE_VERSION@@', "${project.ext.isReleaseVersion}".toString()) }
				filter { line -> line.replaceAll('@@VERSION@@', "${project.version}".toString()) }
			}

			def checkstyleFileHeader = "checkstyle-file-header.txt"
			def checkstyleFileHeaderTemplate = 'checkstyle-file-header.txt.template'
			printInfo("> Create " + colorize(HIGHLITE_LEVEL, checkstyleFileHeader) + " from template ${checkstyleFileHeaderTemplate}.")
			copy {
				from "${commonGradleTemplateJavaPath}"
				include "${checkstyleFileHeaderTemplate}"
				into "${checkstylePath}"
				rename { String fileName -> fileName.replace(checkstyleFileHeaderTemplate, checkstyleFileHeader) }
				filter { line -> line.replaceAll('@@rootProject.name@@', "${rootProject.name }".toString()) }					
				filter { line -> line.replaceAll('@@PROJECT_NAME@@', "${rootProject.name}".toString()) }
				filter { line -> line.replaceAll('@@GROUP_ID@@', "${project.ext.rootGroupId}".toString()) }
				filter { line -> line.replaceAll('@@COMPONENT_ID@@', "${project.ext.rootComponent}".toString()) }
				filter { line -> line.replaceAll('@@PACKAGE@@', "${project.ext.rootPackageName}".toString()) }
				filter { line -> line.replaceAll('@@DESCRIPTION@@', "${project.ext.rootDescription}".toString()) }
				filter { line -> line.replaceAll('@@URL@@', "${project.ext.rootUrl}".toString()) }
				filter { line -> line.replaceAll('@@LICENSE@@', "${project.ext.LICENSE}".toString()) }
				filter { line -> line.replaceAll('@@MAJOR_NUMBER@@', "${project.ext.majorVersionNumber}".toString()) }
				filter { line -> line.replaceAll('@@MINOR_NUMBER@@', "${project.ext.minorVersionNumber}".toString()) }
				filter { line -> line.replaceAll('@@REVISION_NUMBER@@', "${project.ext.revisionVersionNumber}".toString()) }
				filter { line -> line.replaceAll('@@BUILD_NUMBER@@', "${project.ext.buildVersionNumber}".toString()) }
				filter { line -> line.replaceAll('@@SCM_NUMBER@@', "${project.ext.scmVersionNumber}".toString()) }
				filter { line -> line.replaceAll('@@BUILD_TIMESTAMP@@', "${project.ext.BUILD_TIMESTAMP}".toString()) }
				filter { line -> line.replaceAll('@@IS_RELEASE_VERSION@@', "${project.ext.isReleaseVersion}".toString()) }
				filter { line -> line.replaceAll('@@VERSION@@', "${project.version}".toString()) }
			}
		} else if (HAS_ONLINE_CONNECTION) {
			def checkstyleDefaultConfigurationUrl = project.getProperty('checkstyleDefaultConfigurationUrl')
			if (checkstyleDefaultConfigurationUrl!=null && !checkstyleDefaultConfigurationUrl.isEmpty()) {
				printInfo("> Get " + colorize(HIGHLITE_LEVEL, checkstyleFile) + " from " + colorize(HIGHLITE_LEVEL, checkstyleDefaultConfigurationUrl) + ".")
			
				// download
				def f = new File(checkstylePath + "/" + checkstyleFile)
				new URL(checkstyleDefaultConfigurationUrl).withInputStream { i -> f.withOutputStream { it << i } }			
			}
		} else {
			def errorMessage = " Could not find checkstyle configuration (no template nor online connection)!"
			printInfo(colorize(ERROR_LEVEL, 'ERROR') + ":" +errorMessage)
			throw new GradleException("ERROR:" + errorMessage)
		}
	}
}
