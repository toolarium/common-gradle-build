/*
 * javaversion.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */


/***************************************************************************************
 * Create version file 
 ***************************************************************************************/
ext.createJavaVersion = { ->
	def generatedCommonGradleBuildJavaSourcPath = project.getProperty('generatedCommonGradleBuildJavaSourcPath');
	def javaVersionFile = "Version.java"
	logInfo("Write file " + colorize(HIGHLITE_LEVEL, generatedCommonGradleBuildJavaSourcPath + "/" + javaVersionFile) + colorize(INFO_LEVEL, "..."))
	def javaVersionTemplate = 'JavaVersion.template'
	if (new File("${commonGradleTemplatePath}", "${javaVersionTemplate}").exists()) {
		logInfo("Create " + colorize(HIGHLITE_LEVEL, javaVersionFile) + colorize(INFO_LEVEL, " from template ${javaVersionTemplate}."))
		copy {
			from "${commonGradleTemplatePath}"
			include "${javaVersionTemplate}"
			into "${generatedCommonGradleBuildJavaSourcPath}"
			rename { String fileName -> fileName.replace(javaVersionTemplate, javaVersionFile) }
			filter { line -> line.replaceAll('@@PROJECT_NAME@@', "${rootProject.name}".toString()) }
			filter { line -> line.replaceAll('@@PROJECT_TYPE@@', "${project.ext.projectType}".toString()) }
			filter { line -> line.replaceAll('@@GROUP_ID@@', "${project.ext.projectGroupId}".toString()) }
			filter { line -> line.replaceAll('@@COMPONENT_ID@@', "${project.ext.projectComponent}".toString()) }
			filter { line -> line.replaceAll('@@PACKAGE@@', "${project.ext.projectRootPackageName}".toString()) }
			filter { line -> line.replaceAll('@@DESCRIPTION@@', "${project.ext.projectDescription}".toString()) }
			filter { line -> line.replaceAll('@@URL@@', "${project.ext.projectUrl}".toString()) }
			filter { line -> line.replaceAll('@@LICENSE@@', "${project.ext.licenseText}".toString()) }
			filter { line -> line.replaceAll('@@MAJOR_NUMBER@@', "${project.ext.majorVersionNumber}".toString()) }
			filter { line -> line.replaceAll('@@MINOR_NUMBER@@', "${project.ext.minorVersionNumber}".toString()) }
			filter { line -> line.replaceAll('@@MICRO_NUMBER@@', "${project.ext.microVersionNumber}".toString()) }
			filter { line -> line.replaceAll('@@QUALIFIER@@', "${project.ext.qualifierVersionNumber}".toString()) }
			filter { line -> line.replaceAll('@@SCM_NUMBER@@', "${project.ext.scmVersionNumber}".toString()) }
			filter { line -> line.replaceAll('@@BUILD_TIMESTAMP@@', "${project.ext.BUILD_TIMESTAMP}".toString()) }
			filter { line -> line.replaceAll('@@IS_RELEASE_VERSION@@', "${project.ext.isReleaseVersion}".toString()) }
			filter { line -> line.replaceAll('@@VERSION@@', "${project.version}".toString()) }
		}
	} else {
		logInfo("Create " + colorize(HIGHLITE_LEVEL, javaVersionFile) + colorize(INFO_LEVEL, " with default values."))
		new File(generatedCommonGradleBuildJavaSourcPath, javaVersionFile).withWriter { w ->
			w << "package ${projectRootPackageName};" << NELINE \
				<< "" << NELINE \
				<< "public class Version {" << NELINE \
				<< "	public static final String PROJECT_NAME        = \"${rootProject.name}\";" << NELINE \
				<< "	public static final String GROUP_ID            = \"${project.ext.projectGroupId}\";" << NELINE \
				<< "	public static final String COMPONENT_ID        = \"${project.ext.projectComponentId}\";" << NELINE \
				<< "	public static final String PROJECT_TYPE        = \"${project.ext.projectType}\";" << NELINE \
				<< "	public static final String PACKAGE             = \"${project.ext.projectRootPackageName}\";" << NELINE \
				<< "	public static final String DESCRIPTION         = \"${project.ext.projectDescription}\";" << NELINE \
				<< "	public static final String URL                 = \"${project.ext.projectUrl}\";" << NELINE \
				<< "	public static final String LICENSE             = \"${project.ext.licenseText}\";" << NELINE \
				<< "	public static final int MAJOR_NUMBER           = ${project.ext.majorVersionNumber};" << NELINE \
				<< "	public static final int MINOR_NUMBER           = ${project.ext.minorVersionNumber};" << NELINE \
				<< "	public static final int MICRO_NUMBER           = ${project.ext.microVersionNumber};" << NELINE \
				<< "	public static final String QUALIFIER           = \"${project.ext.qualifierVersionNumber}\";" << NELINE \
				<< "	public static final String SCM_NUMBER          = \"${project.ext.scmVersionNumber}\";" << NELINE \
				<< "	public static final String BUILD_TIMESTAMP     = \"${project.ext.BUILD_TIMESTAMP}\";" << NELINE \
				<< "	public static final boolean IS_RELEASE_VERSION = ${project.ext.isReleaseVersion};" << NELINE \
				<< "	public static final String VERSION             = \"${project.version}\";" << NELINE \
				<< "" << NELINE \
				<< "	public static void main(String[] args) {" << NELINE \
				<< "		System.out.println(\"project-name       : \" + PROJECT_NAME);" << NELINE \
				<< "		System.out.println(\"group-id           : \" + GROUP_ID);" << NELINE \
				<< "		System.out.println(\"component-id       : \" + COMPONENT_ID);" << NELINE \
				<< "		System.out.println(\"project-type       : \" + PROJECT_TYPE);" << NELINE \
				<< "		System.out.println(\"package            : \" + PACKAGE);" << NELINE \
				<< "		System.out.println(\"description        : \" + DESCRIPTION);" << NELINE \
				<< "		System.out.println(\"url                : \" + URL);" << NELINE \
				<< "		System.out.println(\"license            : \" + LICENSE);" << NELINE \
				<< "		System.out.println(\"version            : \" + VERSION);" << NELINE \
				<< "		System.out.println(\"is-release-version : \" + IS_RELEASE_VERSION);" << NELINE \
				<< "		System.out.println(\"build-timestamp    : \" + BUILD_TIMESTAMP);" << NELINE \
				<< "	}" << NELINE \
				<< "" << NELINE \
				<< "	public static String getVersion() {" << NELINE \
				<< "		return VERSION;" << NELINE \
				<< "	}" << NELINE \
				<< "}" << NELINE \
				<< "" << NELINE 
		}			
	}
}
