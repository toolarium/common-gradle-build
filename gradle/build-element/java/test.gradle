/*
 * test.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */

 
test.outputs.upToDateWhen {false}
import org.gradle.api.tasks.testing.logging.TestExceptionFormat
compileTestJava.dependsOn("jar")


/***************************************************************************************
 * Test
 ***************************************************************************************/
test {
	environment.remove("GRGIT_USER")
	environment.remove("GRGIT_PASS")
	
	if (useJUnit) {
		useJUnitPlatform()
	}

    reports {
		if (useJUnit) {		
			junitXml {
				//outputPerTestCase = true // defaults to false
				//mergeReruns = true // defaults to false
				outputLocation = new File("${junitReportPath}".toString())
			}		
		}
    }
	
	if (initTesting) {
		systemProperty "file.encoding", "${fileEncoding}"
		
		testLogging {
			//events("passed", "skipped", "failed")
			events("failed")
			showStandardStreams = project.getProperty('showStandardStreams')
			showStackTraces = true
			minGranularity = 3
			exceptionFormat = TestExceptionFormat.FULL
			//stackTraceFilters(org.gradle.api.tasks.testing.logging.TestStackTraceFilter.ENTRY_POINT)
			
			// set heap size for the test JVM(s)
			minHeapSize = "$testMinHeapSize"
			maxHeapSize = "$testMaxHeapSize"
 
			// set options for log level DEBUG
			debug {
				events "started", "skipped", "failed"
				exceptionFormat "full"
			}		

			info.events = ["failed", "skipped"]			
			
			quiet {
				events "failed"
				exceptionFormat "full"				
				showStackTraces true
			}
		}
		
		doFirst {
			if (initTesting) {
			//	printLine()
			}
		}
	}
	
	if (testEnableDynamicAgentLoading) {
		jvmArgs(['-XX:+EnableDynamicAgentLoading', '-Xshare:off'])		
	}	
}


/***************************************************************************************
 * Defines the dependencies
 ***************************************************************************************/
dependencies {
	if (initTesting) {
		if (project.hasProperty('testImplementationDependency') && !testImplementationDependency.isEmpty()) {		
			testImplementation "${testImplementationDependency}"
		}
		
		if (project.hasProperty('testRuntimeOnlyDependency') && !testRuntimeOnlyDependency.isEmpty()) {		
			testRuntimeOnly "${testRuntimeOnlyDependency}"
		}
		
		if (project.hasProperty('testRuntimeOnlyPlatformLauncher') && !testRuntimeOnlyPlatformLauncher.isEmpty()) {		
			testRuntimeOnly "${testRuntimeOnlyPlatformLauncher}"
		}
	}
}
