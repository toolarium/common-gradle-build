/*
 * test.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */

 
test.outputs.upToDateWhen {false}
import org.gradle.api.tasks.testing.logging.TestExceptionFormat


/***************************************************************************************
 * Test
 ***************************************************************************************/
test {
	if (useJUnit) {
		useJUnitPlatform()
	}

	if (initTesting) {
		systemProperty "file.encoding", "${fileEncoding}"
		
		testLogging {
			//events("passed", "skipped", "failed")
			events("failed")
			showStandardStreams = project.getProperty('showStandardStreams')
			showStackTraces = true
			minGranularity = 3
			exceptionFormat = TestExceptionFormat.FULL
			//stackTraceFilters(org.gradle.api.tasks.testing.logging.TestStackTraceFilter.ENTRY_POINT)
			
			// set options for log level DEBUG
			debug {
				events "started", "skipped", "failed"
				exceptionFormat "full"
			}		

			info.events = ["failed", "skipped"]			
			
			quiet {
				events "failed"
				exceptionFormat "full"				
				showStackTraces true
			}
		}
		
		doFirst {
			if (initTesting) {
			//	printLine()
			}
		}
	}
}


/***************************************************************************************
 * Defines the dependencies
 ***************************************************************************************/
dependencies {
	if (initTesting) {
		if (project.hasProperty('testImplementationDependency') && !testImplementationDependency.isEmpty()) {		
			testImplementation "${testImplementationDependency}"
		}
		
		if (project.hasProperty('testRuntimeOnlyDependency') && !testRuntimeOnlyDependency.isEmpty()) {		
			testRuntimeOnly "${testRuntimeOnlyDependency}"
		}
	}
}
