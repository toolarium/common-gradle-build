/*
 * java.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */


apply plugin: 'java'


/***************************************************************************************
 * Java cache strategy
 ***************************************************************************************/
configurations.all {
	resolutionStrategy {
		// fail eagerly on version conflict (includes transitive dependencies)
		// e.g. multiple different versions of the same dependency (group and name are equal)
		//failOnVersionConflict()

		// prefer modules that are part of this build (multi-project or composite build) over external modules
		//preferProjectModules()

		cacheDynamicVersionsFor commonGradleCacheDynamicDuration, 'seconds'
		cacheChangingModulesFor commonGradleCacheChangingModulesDuration, 'seconds'
	}
}


/***************************************************************************************
 * Compile
 ***************************************************************************************/
ext.compileTimestamp = null
tasks.withType(JavaCompile) { compile ->

	compileTimestamp = new Date()
	options.encoding = "${fileEncoding}"
	options.compilerArgs << '-Xlint:unchecked'
	options.compilerArgs << '-parameters'	
    //options.compilerArgs << '-Aenumconfiguration.validate.strict=true'	

	options.deprecation = true
	sourceCompatibility = project.getProperty('sourceCompatibility')
    targetCompatibility = project.getProperty('targetCompatibility')

	// set fork process
	if (project.hasProperty('compileJavaFork')) {
		compile.options.fork = project.getProperty('compileJavaFork')
	}

	// set compiler path
	if (project.hasProperty('compileJavaHome') && project.getProperty('compileJavaHome')!=null) {
		def compileJavaHome = project.getProperty('compileJavaHome')
		if (!compileJavaHome.trim().isEmpty()) {
			compile.options.forkOptions.javaHome = new File(compileJavaHome)
		}
	}

	// print source and target compatibility
	if (sourceCompatibility!=null && !sourceCompatibility.toString().isEmpty() && targetCompatibility!=null && !targetCompatibility.toString().isEmpty()) {
		def sourceVersion = parseVersion(sourceCompatibility)
		def targetVersion = parseVersion(targetCompatibility)
		if (sourceVersion!=null && targetVersion!=null && !targetVersion.isCompatibleWith(sourceVersion)) {
			logInfo("The target (" + colorize(HIGHLITE_LEVEL, targetCompatibility) + colorize(INFO_LEVEL, ") is not compatible with the source (" ) + colorize(HIGHLITE_LEVEL, sourceCompatibility) + colorize(INFO_LEVEL, ") compatibility!"))
		}
	}

	def compileType = 'main'
	if (compile.name.contains('Test')) {
		compileType = 'test'
	}

	logInfo("Java compiler (${compileType}): sourceCompatibility: " + colorize(HIGHLITE_LEVEL, sourceCompatibility) \
			+ colorize(INFO_LEVEL, ", targetCompatibility: ") + colorize(HIGHLITE_LEVEL, targetCompatibility) \
			+ colorize(INFO_LEVEL, ", encoding: ") + colorize(HIGHLITE_LEVEL, options.encoding) \
			+ colorize(INFO_LEVEL, ", deprecation: ") + colorize(HIGHLITE_LEVEL, options.deprecation) \
			+ colorize(INFO_LEVEL, ", fork: ") + colorize(HIGHLITE_LEVEL, options.fork) \
			+ colorize(INFO_LEVEL, ", jdk: ") + colorize(HIGHLITE_LEVEL, options.forkOptions.javaHome) \
			+ colorize(INFO_LEVEL, ", args: ") + colorize(HIGHLITE_LEVEL, options.allCompilerArgs))
}


/***************************************************************************************
 * Build jar file
 ***************************************************************************************/
jar { jar ->
	onlyIf { return project.compileTimestamp != null }

	logInfo("Set project root package name to [" + colorize(HIGHLITE_LEVEL, projectRootPackageName) + colorize(INFO_LEVEL, "]  -> ") + colorize(HIGHLITE_LEVEL, sourceSets.main.allJava.srcDirs))

	// include readme, license and version files
	into 'META-INF', {
		if (project.getProperty('includeReadmeFile')) {
			from "${readmeFile}"
		}

		if (project.getProperty('includeLicenseFile')) {
			from "${licenseFile}"
		}

		if (project.getProperty('includeVersionFile')) {
			from "${versionFile}"
		}

		if (project.getProperty('includeChangelogFile')) {
			from "${changelogFile}"
		}
		
		if (project.getProperty('includeGeneratedMetaInfFiles') && project.hasProperty('commonGradleResourcebundleOutputPath') && !project.getProperty('commonGradleResourcebundleOutputPath').toString().trim().isEmpty()) {
			from ("${commonGradleResourcebundleOutputPath}/META-INF") 
		}
	}

	// define proper manifest
	manifest {
		attributes 	'Specification-Title'   : rootProject.name,
					'Specification-Version' : project.version,
					'Implementation-Title'  : rootProject.name,
					'Implementation-Version': project.version + project.ext.scmVersionNumber,
					'Created-By'		   	: project.ext.buildToolVersionStackMessage,
					'Built-By'			   	: publishingUsername,
					'Build-Timestamp'	   	: BUILD_TIMESTAMP,
					'Build-JDK'			   	: "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
					'Build-OS'			   	: "${System.properties['os.name']} (${System.properties['os.version']}), ${System.properties['os.arch']}",
					'Source-Compatibility'  : project.sourceCompatibility,
					'Target-Compatibility'  : project.targetCompatibility
					//'Main-Class'			: rootMainClass
					//'Class-Path'			: configurations.runtimeClasspath.files.collect { it.getName() }.join(' ')
	}

	doLast {
		if (project.hasProperty('showCreatedArtefacts') && project.getProperty('showCreatedArtefacts')) {
			// jar.archiveFileName
			def filename = prepareFilename(jar.archivePath.getPath())
			printInfo("> Created package " + colorize(HIGHLITE_LEVEL, filename) + ".")
		}
	}
}


/***************************************************************************************
 * Prepare META-INF data
 ***************************************************************************************/
task createMeateInfFiles() {
	group = 'Build'
	description = 'Prepares additional files for META-INF jar folder.'
	onlyIf { return project.compileTimestamp != null }
	
	doFirst {
		new File("$commonGradleResourcebundleOutputPath/META-INF").mkdirs()
	}
}
jar.dependsOn(createMeateInfFiles)


/***************************************************************************************
 * Build sources jar file
 ***************************************************************************************/
task sourcesJar(type: Jar, dependsOn: classes) { jar ->
	group = 'Build'
	description = 'Assembles the sources into a jar file'
	onlyIf { return project.compileTimestamp != null }

	def configDirectoryName = project.getProperty("configDirectoryName")
	def configDirectory = project.getProperty("configDirectory")
	def docsDirectoryName = project.getProperty("docsDirectoryName")
	def docsDirectory = project.getProperty("docsDirectory")
	def srcDirectory = project.getProperty("srcDirectory")
	def srcDirectoryName = project.getProperty("srcDirectoryName")

	/*
	def jarSourceIncludePath;
	if (project.hasProperty('jarSourceIncludePath')) {
		jarSourceIncludePath = project.getProperty('jarSourceIncludePath')
	} else {
		jarSourceIncludePath = projectRootPackageName.replace('.', '/')
	}

	from sourceSets.main.allJava, {
		include "${jarSourceIncludePath}/**"
	}
	*/

	into "${configDirectoryName}", {
		from "${configDirectory}"
	}

	if (project.getProperty('includeDocsDirectoryInSource')) {
        into "${docsDirectoryName}", {
            from "${docsDirectory}"
        }
	}

	into 'gradle', {
		from 'gradle'
	}

	into "${srcDirectoryName}", {
		from "${srcDirectory}"
	}

	from '.checkstyle'
	from '.classpath'
	from '.editorconfig'
	from '.java-version'
	from '.project'
	from '.settings'
	from 'build.gradle'
	from 'gradle.properties'
	from 'gradlew'
	from 'gradlew.bat'
	from 'settings.gradle'

	if (project.getProperty('includeLicenseFile')) {
		from "${licenseFile}"
	}

	if (project.getProperty('includeReadmeFile')) {
		from "${readmeFile}"
	}

	if (project.getProperty('includeVersionFile')) {
		from "${versionFile}"
	}

	if (project.getProperty('includeChangelogFile')) {
		from "${changelogFile}"
	}

	logInfo("Set project root package name to [" + colorize(HIGHLITE_LEVEL, projectRootPackageName) + colorize(INFO_LEVEL, "]  -> ") + colorize(HIGHLITE_LEVEL, sourceSets.main.allJava.srcDirs))

	// include readme, license and version files
	into 'META-INF', {
		if (project.getProperty('includeReadmeFile')) {
			from "${readmeFile}"
		}

		if (project.getProperty('includeLicenseFile')) {
			from "${licenseFile}"
		}

		if (project.getProperty('includeVersionFile')) {
			from "${versionFile}"
		}

		if (project.getProperty('includeChangelogFile')) {
			from "${changelogFile}"
		}
	}

	archiveClassifier = 'sources'
	//archiveAppendix = 'sources'

	// define proper manifest
	manifest {
		attributes 	'Specification-Title'   : rootProject.name,
					'Specification-Version' : project.version,
					'Implementation-Title'  : rootProject.name,
					'Implementation-Version': project.version + project.ext.scmVersionNumber,
					'Created-By'		   	: project.ext.buildToolVersionStackMessage,
					'Built-By'			   	: publishingUsername,
					'Build-Timestamp'	   	: BUILD_TIMESTAMP,
					'Build-JDK'			   	: "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
					'Build-OS'			   	: "${System.properties['os.name']} (${System.properties['os.version']}), ${System.properties['os.arch']}",
					'Source-Compatibility'  : project.sourceCompatibility,
					'Target-Compatibility'  : project.targetCompatibility
	}

	doLast {
		if (project.hasProperty('showCreatedArtefacts') && project.getProperty('showCreatedArtefacts')) {
			// jar.archiveFileName
			def filename = prepareFilename(jar.archivePath.getPath())
			printInfo("> Created package " + colorize(HIGHLITE_LEVEL, filename) + ".")
		}
	}
}
