/*
 * eclipse.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */
 

apply plugin: 'eclipse'
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/.classpath")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/.project")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/.checkstyle")
addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/.settings")
addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/bin")


/***************************************************************************************
 * Project validation
 ***************************************************************************************/
projectValidation {
	doFirst {
		if (project.hasProperty('initEclipse') && project.getProperty('initEclipse')) {
			createEclipseFiles()
		}
	}
}


/***************************************************************************************
 * Properly synch eclipse .classpath file
 ***************************************************************************************/
/*
eclipse {
	//if you want parts of paths in resulting file to be replaced by variables (files):
	//pathVariables 'GRADLE_HOME': file('c:/devtools/current/gradle')

	classpath {
		defaultOutputDir = file('bin/default')
		
		file {
			whenMerged {
				// use default Output for all source-folders. see also defaultOutputDir per project
				entries.each { source ->
								if (source.kind == 'src' && !source.path.startsWith('/')) {
									// only Source-folders in the project starting with '/' are project-references
									source.output = null
								}
				}
			}
		}
	}
}
*/

/***************************************************************************************
 * Create eclipse file 
 ***************************************************************************************/
ext.createEclipseFiles = { overwrite = false ->
	def rootDirectory = project.getProperty('rootDirectory');
	def classpathFile = ".classpath"
	
	if (overwrite || !new File("${rootDirectory}", "${classpathFile}").exists()) {
		def commonGradleTemplateJavaPath= project.getProperty('commonGradleTemplateJavaPath')
		logInfo("Write file " + colorize(HIGHLITE_LEVEL, rootDirectory + "/" + classpathFile) + colorize(INFO_LEVEL, "..."))
		def eclipseClasspathTemplateName = 'eclipse-classpath.template'
		def srcMainDirectoryName = project.getProperty('srcMainDirectoryName')
		def srcTestDirectoryName = project.getProperty('srcTestDirectoryName')
		def srcMainDirectory = project.getProperty('srcMainDirectory')
		def srcTestDirectory = project.getProperty('srcTestDirectory')
		def generatedCommonGradleBuildJavaSources = project.getProperty('generatedCommonGradleBuildJavaSources')
		def generatedCommonGradleBuildResourcesSources = project.getProperty('generatedCommonGradleBuildResourcesSources')

		if (!createFileFromTemplate(rootDirectory + "/" + classpathFile, getTemplateFile(eclipseClasspathTemplateName, 'eclipse'))) {
			printInfo("> Create " + colorize(HIGHLITE_LEVEL, classpathFile) + " with default values.")
			new File(rootDirectory, classpathFile).withWriter { w ->
				w << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" << NELINE \
					<< "<classpath>" << NELINE \
					<< "	<classpathentry kind=\"src\" output=\"bin/${srcMainDirectoryName}\" path=\"${srcMainDirectory}/java\">" << NELINE \
					<< "		<attributes>" << NELINE \
					<< "			<attribute name=\"gradle_scope\" value=\"${srcMainDirectoryName}\"/>" << NELINE \
					<< "			<attribute name=\"gradle_used_by_scope\" value=\"${srcMainDirectoryName},${srcTestDirectoryName}\"/>" << NELINE \
					<< "		</attributes>" << NELINE \
					<< "	</classpathentry>" << NELINE \
					<< "	<classpathentry kind=\"src\" output=\"bin/${srcMainDirectoryName}\" path=\"${srcMainDirectory}/resources\">" << NELINE \
					<< "		<attributes>" << NELINE \
					<< "			<attribute name=\"gradle_scope\" value=\"${srcMainDirectoryName}\"/>" << NELINE \
					<< "			<attribute name=\"gradle_used_by_scope\" value=\"${srcMainDirectoryName},${srcTestDirectoryName}\"/>" << NELINE \
					<< "		</attributes>" << NELINE \
					<< "	</classpathentry>" << NELINE \
					<< "	<classpathentry kind=\"src\" output=\"bin/${srcMainDirectoryName}\" path=\"${generatedCommonGradleBuildJavaSources}\">" << NELINE \
					<< "		<attributes>" << NELINE \
					<< "			<attribute name=\"gradle_scope\" value=\"${srcMainDirectoryName}\"/>" << NELINE \
					<< "			<attribute name=\"gradle_used_by_scope\" value=\"${srcMainDirectoryName},${srcTestDirectoryName}\"/>" << NELINE \
					<< "		</attributes>" << NELINE \
					<< "	</classpathentry>" << NELINE \
					<< "	<classpathentry kind=\"src\" output=\"bin/${srcMainDirectoryName}\" path=\"${generatedCommonGradleBuildResourcesSources}\">" << NELINE \
					<< "		<attributes>" << NELINE \
					<< "			<attribute name=\"gradle_scope\" value=\"${srcMainDirectoryName}\"/>" << NELINE \
					<< "			<attribute name=\"gradle_used_by_scope\" value=\"${srcMainDirectoryName},${srcTestDirectoryName}\"/>" << NELINE \
					<< "		</attributes>" << NELINE \
					<< "	</classpathentry>" << NELINE \
					<< "	<classpathentry kind=\"src\" output=\"bin/${srcTestDirectoryName}\" path=\"${srcTestDirectory}/java\">" << NELINE \
					<< "		<attributes>" << NELINE \
					<< "			<attribute name=\"gradle_scope\" value=\"${srcTestDirectoryName}\"/>" << NELINE \
					<< "			<attribute name=\"gradle_used_by_scope\" value=\"${srcTestDirectoryName}\"/>" << NELINE \
					<< "			<attribute name=\"test\" value=\"true\"/>" << NELINE \
					<< "		</attributes>" << NELINE \
					<< "	</classpathentry>" << NELINE \
					<< "	<classpathentry kind=\"src\" output=\"bin/${srcTestDirectoryName}\" path=\"${srcTestDirectory}/resources\">" << NELINE \
					<< "		<attributes>" << NELINE \
					<< "			<attribute name=\"gradle_scope\" value=\"${srcTestDirectoryName}\"/>" << NELINE \
					<< "			<attribute name=\"gradle_used_by_scope\" value=\"${srcTestDirectoryName}\"/>" << NELINE \
					<< "			<attribute name=\"test\" value=\"true\"/>" << NELINE \
					<< "		</attributes>" << NELINE \
					<< "	</classpathentry>" << NELINE \
					<< "	<!-- <classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8/\"/> -->" << NELINE \
					<< "	<classpathentry kind=\"con\" path=\"org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-11/\">" << NELINE \
					<< "		<attributes>" << NELINE \
					<< "			<attribute name=\"module\" value=\"true\"/>" << NELINE \
					<< "		</attributes>" << NELINE \
					<< "	</classpathentry>" << NELINE \
					<< "	<classpathentry kind=\"con\" path=\"org.eclipse.buildship.core.gradleclasspathcontainer\"/>" << NELINE \
					<< "	<classpathentry kind=\"con\" path=\"org.eclipse.jdt.junit.JUNIT_CONTAINER/5\"/>" << NELINE \
					<< "	<classpathentry kind=\"output\" path=\"build\"/>" << NELINE \
					<< "</classpath>" << NELINE
			}			
		}
	}
	
	def projectFile = ".project"
	if (overwrite || !new File("${rootDirectory}", "${projectFile}").exists()) {
		logInfo("Write file " + colorize(HIGHLITE_LEVEL, rootDirectory + "/" + projectFile) + colorize(INFO_LEVEL, "..."))
		def eclipseProjectTemplate = 'eclipse-project.template'	

		if (!createFileFromTemplate(rootDirectory + "/" + projectFile, getTemplateFile(eclipseProjectTemplate, 'eclipse'))) {
			printInfo("> Create " + colorize(HIGHLITE_LEVEL, projectFile) + " with default values.")
			new File(rootDirectory, projectFile).withWriter { w ->
				w << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" << NELINE \
					<< "<projectDescription>" << NELINE \
					<< "	<name>${rootProject.name}</name>" << NELINE \
					<< "	<comment>${projectDescription}</comment>" << NELINE \
					<< "	<projects>" << NELINE \
					<< "	</projects>" << NELINE \
					<< "	<buildSpec>" << NELINE \
					<< "		<buildCommand>" << NELINE \
					<< "			<name>org.eclipse.jdt.core.javabuilder</name>" << NELINE \
					<< "			<arguments>" << NELINE \
					<< "			</arguments>" << NELINE \
					<< "		</buildCommand>" << NELINE \
					<< "		<buildCommand>" << NELINE \
					<< "			<name>org.eclipse.buildship.core.gradleprojectbuilder</name>" << NELINE \
					<< "			<arguments>" << NELINE \
					<< "			</arguments>" << NELINE \
					<< "		</buildCommand>" << NELINE \
					<< "		<buildCommand>" << NELINE \
					<< "			<name>net.sf.eclipsecs.core.CheckstyleBuilder</name>" << NELINE \
					<< "			<arguments>" << NELINE \
					<< "			</arguments>" << NELINE \
					<< "		</buildCommand>" << NELINE \
					<< "	</buildSpec>" << NELINE \
					<< "	<natures>" << NELINE \
					<< "		<nature>org.eclipse.jdt.core.javanature</nature>" << NELINE \
					<< "		<nature>org.eclipse.buildship.core.gradleprojectnature</nature>" << NELINE \
					<< "		<nature>net.sf.eclipsecs.core.CheckstyleNature</nature>" << NELINE \
					<< "	</natures>" << NELINE \
					<< "</projectDescription>" << NELINE
			}			
		}
	}
	
	if (project.hasProperty('initCheckstyle') && project.getProperty('initCheckstyle')) {
		def checkstyleFile = ".checkstyle"
		def checkstyleEclipseConfigurationOverwrite = project.hasProperty('checkstyleEclipseConfigurationOverwrite') && project.getProperty('checkstyleEclipseConfigurationOverwrite')
		if (project.hasProperty('runtimeCheckstyleConfigurationPath') && (overwrite || checkstyleEclipseConfigurationOverwrite || !new File("${rootDirectory}", "${checkstyleFile}").exists())) {
			logInfo("Write file " + colorize(HIGHLITE_LEVEL, rootDirectory + "/" + checkstyleFile) + colorize(INFO_LEVEL, "..."))
			
			def runtimeCheckstyleConfigurationPath = project.getProperty('runtimeCheckstyleConfigurationPath').replace('\\', '/')
			def checkstyleConfigurationName = "${rootProject.name}"
			if (project.hasProperty('checkstyleConfigurationName')) {
				checkstyleConfigurationName = project.getProperty('checkstyleConfigurationName')
			}
			
			def eclipseCheckstyleTemplate = 'eclipse-checkstyle.template'	
			if (!createFileFromTemplate(rootDirectory + "/" + checkstyleFile, getTemplateFile(eclipseCheckstyleTemplate, 'eclipse'))) {
				printInfo("> Create " + colorize(HIGHLITE_LEVEL, checkstyleFile) + " with default values.")
				new File(rootDirectory, checkstyleFile).withWriter { w ->
					w << "<?xml version=\"1.0\" encoding=\"UTF-8\"?>" << NELINE \
						<< "" << NELINE \
						<< "<fileset-config file-format-version=\"1.2.0\" simple-config=\"true\" sync-formatter=\"false\">" << NELINE \
						<< "	<local-check-config name=\"${checkstyleConfigurationName}\" location=\"${runtimeCheckstyleConfigurationPath}/checkstyle.xml\" type=\"external\" description=\"\">" << NELINE \
						<< "	<additional-data name=\"protect-config-file\" value=\"true\"/>" << NELINE \
						<< "	</local-check-config>" << NELINE \
						<< "	<fileset name=\"all\" enabled=\"true\" check-config-name=\"${checkstyleConfigurationName}\" local=\"true\">" << NELINE \
						<< "		<file-match-pattern match-pattern=\".\" include-pattern=\"true\"/>" << NELINE \
						<< "	</fileset>" << NELINE \
						<< "</fileset-config>" << NELINE
				}
			}
		}
	}
	
	def eclipseBuildSettingsPath = "${rootDirectory}/.settings"
	def eclipseBuildSettingsFile = "org.eclipse.buildship.core.prefs"
	if (overwrite || !new File("${eclipseBuildSettingsPath}", "${eclipseBuildSettingsFile}").exists()) {
		if (new File(eclipseBuildSettingsPath).mkdirs()) {
			printInfo("> Created path " + colorize(HIGHLITE_LEVEL, eclipseBuildSettingsPath) + ".")
		}
	
		logInfo("Write file " + colorize(HIGHLITE_LEVEL, eclipseBuildSettingsPath + "/" + eclipseBuildSettingsFile) + colorize(INFO_LEVEL, "..."))
		def eclipseBuildSettingTemplate = 'eclipse-build-settings.template'	
		
		if (!createFileFromTemplate(eclipseBuildSettingsPath + "/" + eclipseBuildSettingsFile, getTemplateFile(eclipseBuildSettingTemplate, 'eclipse'))) {
			printInfo("> Create " + colorize(HIGHLITE_LEVEL, eclipseBuildSettingsFile) + " with default values.")
			new File(eclipseBuildSettingsPath, eclipseBuildSettingsFile).withWriter { w ->
				w << "connection.project.dir=" << NELINE \
				  << "eclipse.preferences.version=1" << NELINE
			}			
		}
	}
}
