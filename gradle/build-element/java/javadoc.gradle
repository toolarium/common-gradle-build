/*
 * javadoc.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */


 apply plugin: 'java'


/***************************************************************************************
 * Build javadoc jar file
 ***************************************************************************************/
task javadocJar(type: Jar) { jar ->
	group = 'Build'
	description = 'Assembles the javadoc into a jar file'
	onlyIf { return project.compileTimestamp != null }
	from javadoc
	archiveClassifier = 'javadoc'

	if (JavaVersion.current().isJava8Compatible()) {
		allprojects {
			tasks.withType(Javadoc) {
				options.addStringOption('Xdoclint:none', '-quiet')
			}
		}
	}

	if (JavaVersion.current().isJava9Compatible()) {
		allprojects {
			tasks.withType(Javadoc) {
				options.addBooleanOption('html5', true)
			}
		}
	}

	// include readme, license and version files
	into 'META-INF', {
		if (project.getProperty('includeReadmeFile')) {
			from "${readmeFile}"
		}

		if (project.getProperty('includeLicenseFile')) {
			from "${licenseFile}"
		}

		if (project.getProperty('includeVersionFile')) {
			from "${versionFile}"
		}

		if (project.getProperty('includeChangelogFile')) {
			from "${changelogFile}"
		}
	}

	// define proper manifest
	manifest {
		attributes 	'Specification-Title'   : rootProject.name,
					'Specification-Version' : project.version,
					'Implementation-Title'  : rootProject.name,
					'Implementation-Version': project.version + project.ext.scmVersionNumber,
					'Created-By'		   	: project.ext.buildToolVersionStackMessage,
					'Built-By'			   	: System.properties['user.name'],
					'Build-Timestamp'	   	: BUILD_TIMESTAMP,
					'Build-JDK'			   	: "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
					'Build-OS'			   	: "${System.properties['os.name']} (${System.properties['os.version']}), ${System.properties['os.arch']}",
					'Source-Compatibility'  : project.sourceCompatibility,
					'Target-Compatibility'  : project.targetCompatibility
	}

	doLast {
		if (project.hasProperty('showCreatedArtefacts') && project.getProperty('showCreatedArtefacts')) {
			// jar.archiveFileName
			def filename = prepareFilename(jar.archivePath.getPath())
			printInfo("> Created package " + colorize(HIGHLITE_LEVEL, filename) + ".")
		}
	}
}
