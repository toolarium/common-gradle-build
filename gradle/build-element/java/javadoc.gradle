/*
 * javadoc.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */


 apply plugin: 'java'


/***************************************************************************************
 * Build javadoc jar file
 ***************************************************************************************/
javadoc.dependsOn(jar)
task javadocJar(type: Jar) { jar ->
	group = 'Build'
    duplicatesStrategy = 'exclude' // work around, currendly don't work "$duplicatesStrategy"
	description = 'Assembles the javadoc into a jar file'
	onlyIf { return project.compileTimestamp != null }
	from javadoc
	archiveClassifier = 'javadoc'

	if (JavaVersion.current().isJava8Compatible()) {
		allprojects {
			tasks.withType(Javadoc) {
				options.addStringOption('Xdoclint:none', '-quiet')
			}
		}
	}

	if (JavaVersion.current().isJava9Compatible()) {
		allprojects {
			tasks.withType(Javadoc) {
				options.addBooleanOption('html5', true)
			}
		}
	}

	// include readme, license and version files
	into 'META-INF', {
		if (project.getProperty('includeReadmeFile')) {
			from "${readmeFile}"
		}

		if (project.getProperty('includeLicenseFile')) {
			from "${licenseFile}"
		}

		if (project.getProperty('includeVersionFile')) {
			from "${versionFile}"
		}

		if (project.getProperty('includeChangelogFile')) {
			from "${changelogFile}"
		}
	}

	// define proper manifest
	manifest {
		attributes 	'Specification-Title'   : rootProject.name,
					'Specification-Version' : project.version,
					'Implementation-Title'  : rootProject.name,
					'Implementation-Version': project.version + project.ext.scmVersionNumber,
					'Created-By'		   	: project.ext.buildToolVersionStackMessage,
					'Built-By'			   	: publishingUsername,
					'Build-Timestamp'	   	: BUILD_TIMESTAMP,
					'Build-JDK'			   	: "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
					'Build-OS'			   	: "${System.properties['os.name']} (${System.properties['os.version']}), ${System.properties['os.arch']}",
					'Source-Compatibility'  : project.sourceCompatibility,
					'Target-Compatibility'  : project.targetCompatibility
	}

	doLast {
		if (project.hasProperty('showCreatedArtefacts') && project.getProperty('showCreatedArtefacts')) {
			// jar.archiveFileName
			def filename = prepareFilename(jar.archivePath.getPath())
			printInfo("> Created package " + colorize(HIGHLITE_LEVEL, filename) + ".")
		}
	}
}

/*
tasks.withType(Javadoc) {
    // the title includes the version of the API
    //title = "jsr203-http $version API"

    // add the links to the Java8 API too
    //options.links("http://docs.oracle.com/javase/8/docs/api/")
	
    // add Java8 optional tags
    //options.tags = ["apiNote:a:API Note:",
    //                "implSpec:a:Implementation Requirements:",
    //                "implNote:a:Implementation Note:"]

    // capture the output for the javadoc task to check if there are warnings
    // from https://stackoverflow.com/questions/29519085/how-to-fail-gradle-build-on-javadoc-warnings
    def capturedOutput = []
    def listener = { capturedOutput << it } as StandardOutputListener
    doFirst {
        logging.addStandardErrorListener(listener)
        logging.addStandardOutputListener(listener)
    }	
    doLast {
        logging.removeStandardOutputListener(listener)
        logging.removeStandardErrorListener(listener)
        // if threre is any warning, fail with a gradle exception
        capturedOutput.each { e ->
            if(e.toString() =~ " warning: ") {
                throw new GradleException("There are javadoc warnings: javadoc failed");
            }
        }
    }
}
*/