/*
 * nuxtjs.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * MIT License: https://mit-license.org
 */


/***************************************************************************************
 * ResourceBundle.xls support
 ***************************************************************************************/
ext.initResourceBundle=true
ext.commonGradleResourcebundleJsonSupport=true
ext.commonGradleResourcebundleOutputPath='static/locales'


if (!project.hasProperty('commonGradleBuildUrl')) {
    ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}


/***************************************************************************************
 * Dependencies
 ***************************************************************************************/
apply from: "${commonGradleBuildElementPath}/nodejs.gradle"


/***************************************************************************************
 * common nuxt.js dirctories and files
 ***************************************************************************************/
addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/.nuxt")
addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/assets")
addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/components")
addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/layouts")
addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/middleware")
addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/pages")
addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/plugins")
addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/static")
addCommonGradlePropertyList("allowedMainDirectories", "$rootDirectory/store")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/nuxt.config.js")


/***************************************************************************************
 * project validation
 ***************************************************************************************/
projectValidation {
	if (project.getProperty('IS_NEW')) {
		bootStraplogLifecycle("  > Just create project structure, skip build.")
		gradle.startParameter.excludedTaskNames += "build"
	}

	doFirst {
		if (project.getProperty('IS_NEW')) {
			/*
			if (project.getProperty('createSrcMainJavaDirectory')) {
				printInfo("> Create directory " + colorize(HIGHLITE_LEVEL, srcMainJavaDirectory) + ".")
				
				
				new File("$rootDirectory/assets").mkdirs()
				assets-README.template
				new File("$rootDirectory/components").mkdirs()
				Logo.vue.template
			}
		
			generatePackageJson(rootDirectory, 
								"package.json", 
								false, 
								'package-json-nuxt.template',
								"{" + NELINE 
							  + "  \"name\": \"${rootProject.name}\"," + NELINE 
							  + "    \"scripts\": {" + NELINE 
							  + "    \"dev\": \"nuxt\"," + NELINE
							  + "    \"build\": \"nuxt build\"," + NELINE 
							  + "    \"generate\": \"nuxt generate\"," + NELINE 
							  + "    \"start\": \"nuxt start\"" + NELINE 
							  + "  }" + NELINE 
							  + "}" + NELINE)
			*/
			
			// use the defined files
			new File(licenseFile).delete()
			new File(readmeFile).delete()
			createFileFromTemplate(readmeFile, getTemplateFile('README.template'))			
			new File(editorConfigFile).delete()
			createFileFromTemplate(editorConfigFile, getTemplateFile('editorconfig.template'))
			
			// generate git files if necessary
			if (project.hasProperty('initScmForNewProjects') && project.getProperty('initScmForNewProjects')) {
				createGitFiles(true)
			}

			registerEndMessage("" << NELINE \
								<< "  To get started (equivalent to 'npm run dev'), got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable run") + "" << NELINE \
								<< "" << NELINE \
								<< "  To build (equivalent to 'npm run build'), got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable") + "" << NELINE \
								<< "" << NELINE \
								<< "  To test (equivalent to 'npm run test'), got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable test") + "" << NELINE \
								<< "" << NELINE \
								<< "  For TypeScript users, see: " + colorize(HIGHLITE_LEVEL, "https://typescript.nuxtjs.org/cookbook/components/") + "" << NELINE)
		} 
	}
}
