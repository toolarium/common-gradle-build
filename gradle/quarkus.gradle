/*
 * quarkus.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */


/***************************************************************************************
 * Set additional template path
 ***************************************************************************************/
ext.projectTypeTemplatePath='quarkus'


/***************************************************************************************
 * Work around: quarkus don't support multiple resources directories
 ***************************************************************************************/
ext.supportMultipleResourceFolder=false
ext.commonGradleResourcebundleOutputPath='build/resources/main'

if (!project.hasProperty('commonGradleBuildUrl')) {
    ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}

// set docker image standards
if (!project.hasProperty("dockerImage")) {
	project.ext.set("dockerImage", "adoptopenjdk/openjdk11:alpine-jre")
}
if (!project.hasProperty("dockerDefaultJavaOptions")) {
	project.ext.set("dockerDefaultJavaOptions", "-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Djava.security.egd=file:/dev/./urandom")
}
if (!project.hasProperty("dockerDeploymentSourcePath")) {
	project.ext.set("dockerDeploymentSourcePath", 'build/*-runner.jar')
}
if (!project.hasProperty("kubernetesSupport")) {
	project.ext.set("kubernetesSupport", true)
}


/***************************************************************************************
 * Set additional template path
 ***************************************************************************************/
project.ext.set("useJUnit", false)


/***************************************************************************************
 * Validate the quarkus version
 ***************************************************************************************/
ext.validateQuarkusVersion = { ->

	Properties versionInformation = new Properties();
	try {
		def quarkusVersionList = "$commonGradleBuildCache/quarkus-versions.properties";
		def loadVersionList = false
		if (!new File(quarkusVersionList).canRead()) {
			loadVersionList = true
		} else {
			def lastCheckTimeout = project.getProperty('commonGradleBuildCacheLastCheckTimeout')
			def lastCheck = new File(quarkusVersionList).lastModified()
			def timeout = new Date().getTime() - lastCheck
			if ((lastCheck == null) || (lastCheckTimeout==null) || (timeout > lastCheckTimeout)) {
				loadVersionList = true
			}
		}
		
		if (loadVersionList) {
			def releases = readGithubReleases("https://api.github.com/repos/quarkusio/quarkus/releases");
			releases.findAll{ "false".equalsIgnoreCase(it.prerelease.toString()) }.findAll{ 
					def versionStr = it.name.toString();
					if (versionStr!=null) {
						try {
							def releaseVersion = parseReleaseVersion(versionStr)
							def mainVersion = "" + releaseVersion.getMajorNumber() + "." + releaseVersion.getMinorNumber();
							def newestVersion = versionInformation.getProperty(mainVersion)
							if (newestVersion == null || newestVersion.isBlank()) {
								versionInformation.setProperty(mainVersion, versionStr)
							}
						} catch (Exception e) {
							printWarn("Could not parse version " + versionStr + ": " + e.getMessage())
						} 	
					}
				}

			OutputStream stream = new FileOutputStream(quarkusVersionList);
			versionInformation.store(stream, "quarkus version list")
			stream.close()
		} else {
			versionInformation = readPropertiesFile(quarkusVersionList)
		}

		def currentVersion = parseReleaseVersion(quarkusPluginVersion);		
		if (currentVersion!=null) {
			def verifyNewestVersion = false;
			if (project.hasProperty('defaultQuarkusPluginVersion')) {
				def minDefaultVersion = parseReleaseVersion(defaultQuarkusPluginVersion);
				if (currentVersion.compareTo(minDefaultVersion) < 0) {
					def quarkusWarningMessage = "Current quarkus version " + quarkusPluginVersion + " has to be updated to " + defaultQuarkusPluginVersion + ".";
					try {		
						copyFile(gradlePropertiesFile, gradlePropertiesFile + ".bak")
						File backFile = new File(gradlePropertiesFile + ".bak");
						new File(gradlePropertiesFile).withWriter { w ->
							backFile.eachLine { line ->
								w << line.replaceAll(quarkusPluginVersion, defaultQuarkusPluginVersion) + NELINE
							}
						}					
						quarkusWarningMessage += "The file " + gradlePropertiesFile + " is already modified, please verify!"
					} catch (Exception e) {
						printWarn("Could not update ${gradlePropertiesFile}:" + e.getMessage())
						copyFile(gradlePropertiesFile + ".bak", gradlePropertiesFile)
					}
					
					addError(quarkusWarningMessage)
					delete gradlePropertiesFile + ".bak"
				} else {
					verifyNewestVersion = true
					logInfo("Current quarkus version " + quarkusPluginVersion + " is compliant with " + defaultQuarkusPluginVersion + ".")
				}
			}
			
			if (verifyNewestVersion) {
				def newestVersion = versionInformation.getProperty("" + currentVersion.getMajorNumber() + "." + currentVersion.getMinorNumber());
				def newestQuarkusVersion = parseReleaseVersion(newestVersion);
				if (currentVersion.compareTo(newestQuarkusVersion) < 0) {
					printWarn("There is a newer quarkus version available " + colorize(HIGHLITE_LEVEL, newestVersion)  + colorize(WARN_LEVEL, ", current: $quarkusPluginVersion!"))
				} else {
					logInfo("Current quarkus version " + quarkusPluginVersion + " is up-to-date.")
				}
			}
		}
	} catch (Exception e) {
		printWarn("Could not check quarlus version: " + e.getMessage())
	}
	
	return versionInformation;
}


/***************************************************************************************
 * Depending on java-library
 ***************************************************************************************/
apply from: "${commonGradleBuildUrl}/java-library.gradle"
apply from: "${commonGradleBuildElementPath}/base/run.gradle"
apply from: "${commonGradleBuildElementPath}/base/docker.gradle"
setCommonGradleProperty("createLogbackConfig", false)


/***************************************************************************************
 * Don't do project validation in case of quarkus dev
 ***************************************************************************************/
if (!project.getProperty('IS_NEW')) {
	quarkusDev {
		projectValidation.enabled = false
		setCommonGradleProperty('hasProjectValidationExecuted', true)
	}
	run.dependsOn quarkusDev
}


/***************************************************************************************
 * Add quarkus repository
 ***************************************************************************************/
if (project.hasProperty("quarkusRepository") && !project.getProperty("quarkusRepository").toString().trim().isEmpty()) {
	repositories {
		maven {
			url "$quarkusRepository"
		}
	}
}


/***************************************************************************************
 * Defines the dependencies
 ***************************************************************************************/
dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
	
	if (project.hasProperty("hasToolariumEnumConfiguration") && project.getProperty("hasToolariumEnumConfiguration")) {
		implementation "com.github.toolarium:toolarium-enum-configuration:${toolariumEnumConfigurationVersion}"
	}
}

/*
task collectEnumConfiguration(type: Copy) {
	group = 'Verification'
	description = 'Create enum configuration.'

    from { // use of closure defers evaluation until execution time
        configurations.runtime.collect { zipTree(it).matching {include "toolarium-enum-configuration\\.json"} }
    }
  
	rename { String fileName ->
		fileName.replace("toolarium-enum-configuration.json", it + ".json")
	}
    into "$kubernetesEnumConfigurationPath"
}
prepareToolariumEnumConfiguration.dependsOn(collectEnumConfiguration)
*/


/***************************************************************************************
 * Propagate production configuration of the application.properties file
 ***************************************************************************************/
prepareApplicationConfiguration {
	doLast {
		new File("$kubernetesApplicationInformationPath").mkdirs()
		new File("$kubernetesApplicationServicePath").mkdirs()
		Properties prop = readApplicationPropertiesFile();
		OutputStream stream = new FileOutputStream("$kubernetesApplicationServicePath/${rootProject.name}.properties");
		prop.store(stream, "quarkus production application.properties")
		stream.close()
	}
}


/***************************************************************************************
 * Define default log manager
 ***************************************************************************************/
test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}


/***************************************************************************************
 * project java validation
 ***************************************************************************************/
projectValidation {
	if (project.getProperty('IS_NEW')) {
		gradle.startParameter.excludedTaskNames += "build"
	}

	// validate the quarkus version
	validateQuarkusVersion()

	doLast {
		if (project.getProperty('IS_NEW')) {
			new File(srcMainResourcesDirectory).mkdirs()
			
			setCommonGradleProperty("fileName", "application.properties")
			createFileFromTemplate("${srcMainResourcesDirectory}/${fileName}", getTemplateFile("application.properties.template")) 
			
			def quarkusResourcePath = srcMainResourcesDirectory + "/META-INF/resources"
			new File(quarkusResourcePath).mkdirs()
			createFileFromTemplate("${quarkusResourcePath}/index.html", getTemplateFile("index.html.template")) 

			registerEndMessage("" << NELINE \
								<< "  To get started, got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable run") + "" << NELINE \
								<< "" << NELINE \
								<< "  To build (build & package jars, run tests), got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable") + "" << NELINE \
								<< "" << NELINE \
								<< "  To test, got to  " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable test") + "" << NELINE)
		}
	}
}


/***************************************************************************************
 * packaging
 ***************************************************************************************/
build { ->
	doLast {
		// support of quarkus < v1.12
		def minDefaultVersion = parseReleaseVersion("1.12.0");
		def currentVersion = parseReleaseVersion(quarkusPluginVersion);		
		def file = new File("${quarkusAppDirectory}");
		if (currentVersion!=null && (currentVersion.compareTo(minDefaultVersion) < 0) && file.isDirectory() && (file.list().length == 0)) {
			def quarkusAppLib = new File("${quarkusAppDirectory}/lib");				
			logInfo("Copy lib folder " + colorize(HIGHLITE_LEVEL, "${gradleBuildDirectory}/lib") + colorize(INFO_LEVEL, " to ") + colorize(HIGHLITE_LEVEL, "${quarkusAppLib}") + colorize(INFO_LEVEL, ".") )
			copy { from "${gradleBuildDirectory}/lib" into "${quarkusAppLib}" } 

			def runnerJarName = "${project.name}-${project.version}-runner.jar"
			logInfo("Copy quarkus runner " + colorize(HIGHLITE_LEVEL, "${runnerJarName}") + colorize(INFO_LEVEL, " to ") + colorize(HIGHLITE_LEVEL, "${quarkusAppDirectory}/${quarkusAppJar}") + colorize(INFO_LEVEL, ".") )
			copyFile("${gradleBuildDirectory}/${runnerJarName}", "${quarkusAppDirectory}/${quarkusAppJar}")
		}

		if (project.hasProperty('createFatJar') && project.getProperty('createFatJar')) {
			buildFatJar("${quarkusAppDirectory}")
		}
	}
}
