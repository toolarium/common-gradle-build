/*
 * quarkus.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */


/***************************************************************************************
 * Compliance for v2.6.1.Final
 ***************************************************************************************/
apply plugin: 'java'
import org.gradle.api.JavaVersion;
if (!project.hasProperty("sourceCompatibility")) {
	project.ext.set("sourceCompatibility", JavaVersion.toVersion("${System.properties['java.version']}"))
}
if (!project.hasProperty("targetCompatibility")) {
	project.ext.set("targetCompatibility", JavaVersion.toVersion("${System.properties['java.version']}"))
}


/***************************************************************************************
 * Set additional template path
 ***************************************************************************************/
ext.projectTypeTemplatePath='quarkus'


/***************************************************************************************
 * Work around: quarkus don't support multiple resources directories
 ***************************************************************************************/
ext.supportMultipleResourceFolder=false
ext.commonGradleResourcebundleOutputPath='build/resources/main'

if (!project.hasProperty('commonGradleBuildUrl')) {
    ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}

// set docker image standards
if (!project.hasProperty("dockerImage")) {
	project.ext.set("dockerImage", "adoptopenjdk/openjdk11:alpine-jre")
}
if (!project.hasProperty("dockerJavaOptions")) {
	//project.ext.set("dockerJavaOptions", "-Djava.security.egd=file:/dev/./urandom")
	project.ext.set("dockerJavaOptions", "-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Djava.security.egd=file:/dev/./urandom")
	project.ext.set("dockerDefaultJavaOptions", "${dockerJavaOptions}")
}
if (!project.hasProperty("dockerDeploymentSourcePath")) {
	project.ext.set("dockerDeploymentSourcePath", 'build/*-runner.jar')
}
if (!project.hasProperty("kubernetesSupport")) {
	project.ext.set("kubernetesSupport", true)
}


/***************************************************************************************
 * Set additional template path
 ***************************************************************************************/
project.ext.set("useJUnit", false)


/***************************************************************************************
 * Validate the quarkus version
 ***************************************************************************************/
ext.validateQuarkusVersion = { ->

	Properties versionInformation = new Properties();
	try {
		def quarkusVersionList = "$commonGradleBuildCache/quarkus-versions.properties";
		def loadVersionList = false
		if (!new File(quarkusVersionList).canRead()) {
			loadVersionList = true
		} else {
			def lastCheckTimeout = project.getProperty('commonGradleBuildCacheLastCheckTimeout')
			def lastCheck = new File(quarkusVersionList).lastModified()
			def timeout = new Date().getTime() - lastCheck
			if ((lastCheck == null) || (lastCheckTimeout==null) || (timeout > lastCheckTimeout)) {
				loadVersionList = true
			}
		}
		
		if (loadVersionList) {
			def releases = readGithubReleases("https://api.github.com/repos/quarkusio/quarkus/releases");
			releases.findAll{ "false".equalsIgnoreCase(it.prerelease.toString()) }.findAll{ 
					def versionStr = it.name.toString();
					if (versionStr!=null) {
						try {
							def releaseVersion = parseReleaseVersion(versionStr)
							def mainVersion = "" + releaseVersion.getMajorNumber() + "." + releaseVersion.getMinorNumber();
							def newestVersion = versionInformation.getProperty(mainVersion)
							if (newestVersion == null || newestVersion.isBlank()) {
								versionInformation.setProperty(mainVersion, versionStr)
							}
						} catch (Exception e) {
							printWarn("Could not parse version " + versionStr + ": " + e.getMessage())
						} 	
					}
				}

			OutputStream stream = new FileOutputStream(quarkusVersionList);
			versionInformation.store(stream, "quarkus version list")
			stream.close()
		} else {
			versionInformation = readPropertiesFile(quarkusVersionList)
		}

		def doQuarkusUpdate = true;
		if (project.hasProperty('isReleaseUpdateVersion') && "true".equalsIgnoreCase("" + project.getProperty('isReleaseUpdateVersion'))) {
			doQuarkusUpdate = (project.hasProperty('quarkusReleaseUpdateVersion') && "true".equalsIgnoreCase("" + project.getProperty('quarkusReleaseUpdateVersion')));
		}

		def currentVersion = parseReleaseVersion(quarkusPluginVersion);		
		if (currentVersion!=null && doQuarkusUpdate) {
			def verifyNewestVersion = false;
			if (project.hasProperty('defaultQuarkusPluginVersion')) {
				def minDefaultVersion = parseReleaseVersion(defaultQuarkusPluginVersion);
				if (currentVersion.compareTo(minDefaultVersion) < 0) {
					def quarkusWarningMessage = "" + colorize(WARN_LEVEL, "Quarkus") + " version " + colorize(HIGHLITE_LEVEL, quarkusPluginVersion) + " has to be updated to " + colorize(HIGHLITE_LEVEL, defaultQuarkusPluginVersion) + ".";
					try {		
						copyFile(gradlePropertiesFile, gradlePropertiesFile + ".bak")
						File backFile = new File(gradlePropertiesFile + ".bak");
						new File(gradlePropertiesFile).withWriter { w ->
							backFile.eachLine { line ->
							    if (!line.trim().startsWith("quarkusPluginVersion")) {
									w << line + NELINE
								} else {
								    w << line.replaceAll(quarkusPluginVersion, defaultQuarkusPluginVersion) + NELINE
								}
							}
						}					
						
					    quarkusWarningMessage = "" + colorize(WARN_LEVEL, "Quarkus") + " version " + colorize(HIGHLITE_LEVEL, quarkusPluginVersion) + " is automated updated to " + colorize(HIGHLITE_LEVEL, defaultQuarkusPluginVersion) + ", in gradle.properties.";
						if (currentVersion.getMajorNumber() <= 2 && minDefaultVersion.getMajorNumber() >= 3) {    // adapt automated import for migration 2.x-> 3.x the (see https://quarkus.io/blog/road-to-quarkus-3/)
							sourceSets.main.allJava.each { file ->
								if (file.toString().endsWith(".java") && file.text.contains("javax")) {
									logInfo("Update file " + file + ".")
									file.text = file.text.replaceAll("javax.", "jakarta.")
									/*
									file.text = file.text.replaceAll("javax.annotation", "jakarta.annotation")    // jakarta.annotation, jakarta.annotation.security, jakarta.annotation.sql
									file.text = file.text.replaceAll("javax.decorator", "jakarta.decorator")      // jakarta.decorator
									file.text = file.text.replaceAll("javax.enterprise", "jakarta.enterprise")    // jakarta.enterprise.context, jakarta.enterprise.context.control, jakarta.enterprise.context.spi, jakarta.enterprise.event, jakarta.enterprise.inject, jakarta.enterprise.inject.build.compatible.spi, jakarta.enterprise.inject.literal, jakarta.enterprise.inject.se, jakarta.enterprise.inject.spi, jakarta.enterprise.inject.spi.configurator, jakarta.enterprise.lang.model, jakarta.enterprise.lang.model.declarations, jakarta.enterprise.lang.model.types, jakarta.enterprise.util	
									file.text = file.text.replaceAll("javax.inject", "jakarta.inject")            // jakarta.inject
									file.text = file.text.replaceAll("javax.interceptor", "jakarta.interceptor")  // jakarta.interceptor
									file.text = file.text.replaceAll("javax.json", "jakarta.json")                // jakarta.json
									file.text = file.text.replaceAll("javax.ws.rs", "jakarta.ws.rs")
									file.text = file.text.replaceAll("javax.persistence", "jakarta.persistence")
									file.text = file.text.replaceAll("javax.transaction", "jakarta.transaction")
									*/
									addCommonGradlePropertyList("changedFileSet", file)
								}
							}
							sourceSets.test.allJava.each { file ->
								if (file.toString().endsWith(".java") && file.text.contains("javax")) {
									logInfo("Update file " + file + ".")
									file.text = file.text.replaceAll("javax.", "jakarta.")
									addCommonGradlePropertyList("changedFileSet", file)
								}
							}

							compileJava.enabled = false
							compileTestJava.enabled = false
							javadoc.enabled = false
							ext.validBuild=false
							ext.validBuildMessage="Please restart build to use the updated quarkus version!"
						}
					} catch (Exception e) {
						printWarn("Could not update ${gradlePropertiesFile}:" + e.getMessage())
						copyFile(gradlePropertiesFile + ".bak", gradlePropertiesFile)
					}

					// mark changed file
					addCommonGradlePropertyList("changedFileSet", gradlePropertiesFile)

					if (project.hasProperty('isReleaseUpdateVersion') && "true".equalsIgnoreCase("" + project.getProperty('isReleaseUpdateVersion'))) {
						printInfo("> ${quarkusWarningMessage}")
					} else {
						printInfo("> ${quarkusWarningMessage}")
						ext.validBuild=false
						ext.validBuildMessage="Please restart build to use the updated quarkus version!"
						//addWarn(quarkusWarningMessage)
					}
					
					delete gradlePropertiesFile + ".bak"
				} else {
					verifyNewestVersion = true
					logInfo("Current quarkus version " + quarkusPluginVersion + " is compliant with " + defaultQuarkusPluginVersion + ".")
				}
			}
			
			if (verifyNewestVersion) {
				def newestVersion = versionInformation.getProperty("" + currentVersion.getMajorNumber() + "." + currentVersion.getMinorNumber());
				def newestQuarkusVersion = parseReleaseVersion(newestVersion);
				if (currentVersion.compareTo(newestQuarkusVersion) < 0) {
					printWarn("There is a newer quarkus version available " + colorize(HIGHLITE_LEVEL, newestVersion)  + colorize(WARN_LEVEL, ", current: $quarkusPluginVersion!"))
				} else {
					logInfo("Current quarkus version " + quarkusPluginVersion + " is up-to-date.")
				}
			}
		}
	} catch (Exception e) {
		printWarn("Could not check quarlus version: " + e.getMessage())
	}
	
	return versionInformation;
}


/***************************************************************************************
 * Update application properties file
 ***************************************************************************************/
ext.updateApplicationProperties = { inputFile = "${srcMainResourcesDirectory}/application.properties", 
									outputFile = "${gradleBuildDirectory}/application.properties" ->
	new File(new File("$outputFile").getParent()).mkdirs()
	def fileContent = new File(outputFile)
	fileContent.createNewFile()
	
	new File(inputFile).withReader {
		def header = true
		def line
		while ((line = it.readLine()) != null) {
			def isComment = line.startsWith("#")
			def isEmptyLine = line.toString().trim().isEmpty()
			if (header) {
				if (isComment || isEmptyLine) {
					fileContent.append(line + NELINE)
				} else {
					header = false
				}
				
				if (isEmptyLine) {
					header = false
				}
			} else {
				if (!isComment && !isEmptyLine && !line.toString().trim().startsWith("%test") && !line.toString().trim().startsWith("%dev")) {
					fileContent.append(line.replace("%prod.", "") + NELINE)
				}
			}
		}
	}
}


/***************************************************************************************
 * Depending on java-library
 ***************************************************************************************/
apply from: "${commonGradleBuildUrl}/java-library.gradle"
apply from: "${commonGradleBuildElementPath}/base/run.gradle"
apply from: "${commonGradleBuildElementPath}/base/docker.gradle"
setCommonGradleProperty("createLogbackConfig", false)


/***************************************************************************************
 * Don't do project validation in case of quarkus dev
 ***************************************************************************************/
if (!project.getProperty('IS_NEW')) {
	if (quarkusDev.enabled) {
		quarkusDev {
		    dependsOn htmlDependencyReport
		    dependsOn dependencyReport
			
			//htmlDependencyReport.enabled = false
			//dependencyReport.enabled = false
			//projectValidation.enabled = false
			//setCommonGradleProperty('hasProjectValidationExecuted', true)
		}
		run.dependsOn quarkusDev		
	}
}


/***************************************************************************************
 * Add quarkus repository
 ***************************************************************************************/
if (project.hasProperty("quarkusRepository") && !project.getProperty("quarkusRepository").toString().trim().isEmpty()) {
	repositories {
		maven {
			url "$quarkusRepository"
		}
	}
}


/***************************************************************************************
 * Defines the dependencies
 ***************************************************************************************/
dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
	
	if (project.hasProperty("hasToolariumEnumConfiguration") && project.getProperty("hasToolariumEnumConfiguration")) {
		implementation "com.github.toolarium:toolarium-enum-configuration:${toolariumEnumConfigurationVersion}"
	}
}


/***************************************************************************************
 * Extract enum configurations from dependencies
 ***************************************************************************************/
task extractEnumConfiguration() {
	group = 'Build'
	description = 'Extract kubernetes jar file dependencies'

	doLast {
		Set<File> files = project.configurations.runtimeClasspath.files
		for (File file : files) {
			if (unzip(file, "$kubernetesEnumConfigurationPath", null, "META-INF", "toolarium-enum-configuration.json").size()>0) {
			    logInfo("Unpack " + file + "...")		
				copyFile("$kubernetesEnumConfigurationPath/META-INF/toolarium-enum-configuration.json", "$kubernetesEnumConfigurationPath/" + file.name.replace(".jar", ".json"))
				new File("$kubernetesEnumConfigurationPath/META-INF/toolarium-enum-configuration.json").delete()
				new File("$kubernetesEnumConfigurationPath/META-INF").delete()
			}
		}
	}
}
prepareToolariumEnumConfiguration.dependsOn(extractEnumConfiguration)


/***************************************************************************************
 * Create and patch quarkus classes
 ***************************************************************************************/
def runTimeDefaultsConfigSourceName="RunTimeDefaultsConfigSource"
tasks.withType(JavaCompile) {
	doFirst {
		// create common gradle build java source path
		createGenerateCommonGradleBuildJavaSourcePath()
	
		def packageName = "io.quarkus.runtime.generated"
		def generatedCommonGradleBuildJavaSources = project.getProperty('generatedCommonGradleBuildJavaSources');
		def generatedCommonGradleBuildJavaTestSources = project.getProperty('generatedCommonGradleBuildJavaTestSources');
		def packagePath
		if (generatedCommonGradleBuildJavaSources.endsWith(destinationDir.getName())) {
			packagePath = createPackagePath(generatedCommonGradleBuildJavaSources, packageName.replace('.', '/'))
		} else if (generatedCommonGradleBuildJavaTestSources.endsWith(destinationDir.getName())) {
			packagePath = createPackagePath(generatedCommonGradleBuildJavaTestSources, packageName.replace('.', '/'))
		}
		
		def javaSourceFile = "${packagePath}/${runTimeDefaultsConfigSourceName}.java"
		if (!new File(javaSourceFile).exists()) {
			if (!createFileFromTemplate(javaSourceFile, getTemplateFile("${runTimeDefaultsConfigSourceName}.template"), true, false)) {
				printInfo("Create " + colorize(HIGHLITE_LEVEL, "${packageName}.${runTimeDefaultsConfigSourceName}") + colorize(INFO_LEVEL, " with default values."))
				new File(javaSourceFile).withWriter { w ->
					w << "package ${packageName};" << NELINE \
						<< "" << NELINE \
						<< "import java.util.HashMap;" << NELINE \
						<< "import java.util.Map;" << NELINE \
						<< "import io.quarkus.runtime.configuration.DefaultsConfigSource;" << NELINE \
						<< "" << NELINE \
						<< "public final class ${runTimeDefaultsConfigSourceName} extends DefaultsConfigSource {" << NELINE \
						<< "    static final Map<String, String> properties;" << NELINE \
						<< "    static {" << NELINE \
						<< "        properties = new HashMap<String, String>();" << NELINE \
						<< "        properties.put(\"platform.quarkus.native.builder-image\", \"mandrel\");" << NELINE \
						<< "        properties.put(\"quarkus.log.filter.\\\"io.netty.resolver.HostsFileParser\\\".if-starts-with\", \"Failed to load and parse hosts file\");" << NELINE \
						<< "        properties.put(\"quarkus.log.filter.\\\"io.vertx.core.impl.ContextImpl\\\".if-starts-with\", \"You have disabled TCCL checks\");" << NELINE \
						<< "        properties.put(\"quarkus.log.category.\\\"io.vertx.core.http.impl.Http1xServerRequest\\\".level\", \"OFF\");" << NELINE \
						<< "        properties.put(\"quarkus.log.filter.\\\"io.netty.resolver.dns.DnsServerAddressStreamProviders\\\".if-starts-with\", \"Can not find io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider in the classpath\");" << NELINE \
						<< "        properties.put(\"quarkus.log.console.darken\", \"0\");" << NELINE \
						<< "        properties.put(\"quarkus.log.filter.\\\"io.netty.util.internal.PlatformDependent0\\\".if-starts-with\", \"direct buffer constructor,jdk.internal.misc.Unsafe,sun.misc.Unsafe\");" << NELINE \
						<< "        properties.put(\"quarkus.log.filter.\\\"org.jboss.threads\\\".if-starts-with\", \"JBoss Threads version\");" << NELINE \
						<< "        properties.put(\"quarkus.log.filter.\\\"org.jboss.resteasy.resteasy_jaxrs.i18n\\\".if-starts-with\", \"RESTEASY002225\");" << NELINE \
						<< "        properties.put(\"quarkus.log.category.\\\"io.vertx.core.impl.ContextImpl\\\".level\", \"ERROR\");" << NELINE \
						<< "        properties.put(\"quarkus.log.filter.\\\"io.netty.resolver.dns.DnsServerAddressStreamProviders\\\".target-level\", \"WARN\");" << NELINE \
						<< "        properties.put(\"quarkus.log.filter.\\\"io.netty.util.internal.PlatformDependent0\\\".target-level\", \"TRACE\");" << NELINE \
						//<< "        properties.put("quarkus.rest-client.\\\"org.acme.rest.client.ExtensionsService\\\".url\", \"https://stage.code.quarkus.io/api\");" << NELINE \
						//<< "        properties.put(\"quarkus.profile\", \"prod\");" << NELINE \
						<< "        properties.put(\"term\", \"xterm-256color\");" << NELINE \
						<< "        properties.put(\"colorterm\", \"truecolor\");" << NELINE \
						<< "        properties.put(\"xmodifiers\", \"@im=ibus\");" << NELINE \
						<< "        properties.put(\"gdm.lang\", \"en_US\");" << NELINE \
						<< "        properties.put(\"windowid\", \"92289429\");" << NELINE \
						<< "    }" << NELINE \
						<< "" << NELINE \
						<< "    public ${runTimeDefaultsConfigSourceName}() {" << NELINE \
						<< "        super(${runTimeDefaultsConfigSourceName}.properties, \"RunTime Defaults\", -2147483548);" << NELINE \
						<< "    }" << NELINE \
						<< "}" << NELINE \
						<< "" << NELINE
				}			
			}
		}
	}
}


/***************************************************************************************
 * Propagate production configuration of the application.properties file
 ***************************************************************************************/
prepareApplicationConfiguration {
	doLast {
		new File("$kubernetesApplicationInformationPath").mkdirs()
		new File("$kubernetesApplicationServicePath").mkdirs()		
		updateApplicationProperties("${srcMainResourcesDirectory}/application.properties", "$kubernetesApplicationServicePath/${rootProject.name}.properties")
	}
}


/***************************************************************************************
 * Define default log manager
 ***************************************************************************************/
test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}


/***************************************************************************************
 * project java validation
 ***************************************************************************************/
projectValidation {
	def quarkusResourcePath = srcMainResourcesDirectory + "/META-INF/resources"
	if (project.getProperty('IS_NEW')) {
		gradle.startParameter.excludedTaskNames += "build"
	} else { // in older versions
		File f = new File (srcMainResourcesDirectory + "/META-INF/resources/index.html")
		if (!f.exists()) {
		    createFileFromTemplate("${quarkusResourcePath}/index.html", getTemplateFile("index.html.template")) 
		}
	}	

	// validate the quarkus version
	validateQuarkusVersion()

	doLast {
		if (project.getProperty('IS_NEW')) {
			new File(srcMainResourcesDirectory).mkdirs()
			
			setCommonGradleProperty("fileName", "application.properties")
			createFileFromTemplate("${srcMainResourcesDirectory}/${fileName}", getTemplateFile("application.properties.template")) 
			
			new File(quarkusResourcePath).mkdirs()
			createFileFromTemplate("${quarkusResourcePath}/index.html", getTemplateFile("index.html.template")) 

			registerEndMessage("" << NELINE \
								<< "  To get started, got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable run") + "" << NELINE \
								<< "" << NELINE \
								<< "  To build (build & package jars, run tests), got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable") + "" << NELINE \
								<< "" << NELINE \
								<< "  To test, got to  " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable test") + "" << NELINE)
		}
	}
}


/***************************************************************************************
 * suppress error
 ***************************************************************************************/
tasks.withType(GenerateModuleMetadata).configureEach {
    // gradle v7.3.1: The value 'enforced-platform' is provided in the validation error message you got
	//if (project.hasProperty('suppressedValidationErrors')) {
		suppressedValidationErrors.add('enforced-platform')
	//}
}


/***************************************************************************************
 * packaging
 ***************************************************************************************/
build { ->
	doLast {
		// support of quarkus < v1.12
		def minDefaultVersion = parseReleaseVersion("1.12.0");
		def currentVersion = parseReleaseVersion(quarkusPluginVersion);		
		def file = new File("${quarkusAppDirectory}");
		if (currentVersion!=null && (currentVersion.compareTo(minDefaultVersion) < 0) && file.isDirectory() && (file.list().length == 0)) {
			def quarkusAppLib = new File("${quarkusAppDirectory}/lib");				
			logInfo("Copy lib folder " + colorize(HIGHLITE_LEVEL, "${gradleBuildDirectory}/lib") + colorize(INFO_LEVEL, " to ") + colorize(HIGHLITE_LEVEL, "${quarkusAppLib}") + colorize(INFO_LEVEL, ".") )
			copy { from "${gradleBuildDirectory}/lib" into "${quarkusAppLib}" } 

			def runnerJarName = "${project.name}-${project.version}-runner.jar"
			logInfo("Copy quarkus runner " + colorize(HIGHLITE_LEVEL, "${runnerJarName}") + colorize(INFO_LEVEL, " to ") + colorize(HIGHLITE_LEVEL, "${quarkusAppDirectory}/${quarkusAppJar}") + colorize(INFO_LEVEL, ".") )
			copyFile("${gradleBuildDirectory}/${runnerJarName}", "${quarkusAppDirectory}/${quarkusAppJar}")
		}

		if (project.hasProperty('createServiceProperties') && project.getProperty('createServiceProperties')) {
			def applicationProperties = readPropertiesFile("${srcMainResourcesDirectory}/application.properties")
			buildServiceProperties("${quarkusAppDirectory}", "${servicePropertiesName}", applicationProperties.getProperty("quarkus.http.root-path", "/api"), "${srcMainResourcesDirectory}/application.properties", "quarkus.http.root-path");
		}

		/* TODO:
		if (project.hasProperty('createServiceJavaRunner') && project.getProperty('createServiceJavaRunner')) {
		//copyFile()
		  //  createFileFromTemplate()
		  //	createFileFromTemplate("${dockerJavaRunner}", "${dockerJavaRunner}") = { inputFilename, inputTemplateFilename, 

	      //	def servicePathProperties = new File("${quarkusAppDirectory}/${dockerJavaRunner}")
		}

		if (project.hasProperty('createServiceJavaAgent') && project.getProperty('createServiceJavaAgent')) {
			def servicePathProperties = new File("${quarkusAppDirectory}/${dockerJavaAgent}")
		}
		*/
		
		if (project.hasProperty('updateApplicationProperties') && project.getProperty('updateApplicationProperties')) {
			def jarFilename = "${quarkusAppDirectory}/${quarkusAppSubPathName}/${project.name}-${project.version}.jar"
			def tempFile = "${quarkusAppDirectory}/${quarkusAppSubPathName}/${project.name}-${project.version}_old.jar"
			def manifestReferenceFile = "${gradleBuildDirectory}/tmp/jar/MANIFEST.MF"
				
			if (new File(jarFilename).exists() && new File(manifestReferenceFile).exists()) {
				def applicationPropertiesFile = "${quarkusAppDirectory}/${quarkusAppSubPathName}/application.properties"
				updateApplicationProperties("${srcMainResourcesDirectory}/application.properties", applicationPropertiesFile)
				copyFile("$jarFilename", "$tempFile", true)
				
				ant.jar(destfile: jarFilename, manifest: manifestReferenceFile) {	
					zipfileset(src: tempFile) {
						exclude(name: 'application.properties')
					}
					
					fileset(dir: "${quarkusAppDirectory}/${quarkusAppSubPathName}") { 
						include(name: 'application.properties')
					}

					if (project.getProperty('includeLicenseFile')) {
						fileset(file: "${licenseFile}") {}
					}

					if (project.getProperty('includeReadmeFile')) {
						fileset(file: "${readmeFile}") {}
					}

					if (project.getProperty('includeVersionFile')) {
						fileset(file: "${versionFile}") {}
					}

					if (project.getProperty('includeChangelogFile')) {
						fileset(file: "${changelogFile}") {}
					}
				}
				
				if (project.hasProperty('showCreatedArtefacts') && project.getProperty('showCreatedArtefacts')) {
					printInfo("> Update package " + colorize(HIGHLITE_LEVEL, jarFilename.replace("./", "")) + ".")
				}
				
				delete "$applicationPropertiesFile"
				delete "$tempFile"
			}

			// pacth generated-bytecode.jar
			jarFilename = "${quarkusAppDirectory}/quarkus/generated-bytecode.jar"
			tempFile = "${quarkusAppDirectory}/quarkus/generated-bytecode_old.jar"
			if (new File(jarFilename).exists() /*&& new File(manifestReferenceFile).exists()*/) {
				def result = copyFile("$jarFilename", "$tempFile", true)
				ant.jar(destfile: jarFilename) {	
					zipfileset(src: tempFile, excludes: "**/*/${runTimeDefaultsConfigSourceName}.class") {}
					// not necessary because it's in the path already
					//fileset(dir: "build/classes/java/main") { include(name: 'RunTimeDefaultsConfigSource.class') }
				}
				if (project.hasProperty('showCreatedArtefacts') && project.getProperty('showCreatedArtefacts')) {
					printInfo("> Update package " + colorize(HIGHLITE_LEVEL, jarFilename.replace("./", "")) + ".")
				}
				delete "$tempFile"
			}
		}

		if (project.hasProperty('createFatJar') && project.getProperty('createFatJar').toString().trim().equalsIgnoreCase("true")) {
			//buildFatJar("${quarkusAppDirectory}", "${quarkusAppDirectory}/${quarkusAppJar}", /* gradleDistributionDirectory */ "${dockerDeploymentSourcePath}/${project.name}-${project.version}.jar", true)
			buildFatJar("${quarkusAppDirectory}")
		}
	}
}
