/*
 * quarkus.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */


/***************************************************************************************
 * Set additional template path
 ***************************************************************************************/
ext.projectTypeTemplatePath='quarkus'


/***************************************************************************************
 * Work around: quarkus don't support multiple resources directories
 ***************************************************************************************/
ext.supportMultipleResourceFolder=false
ext.commonGradleResourcebundleOutputPath='build/resources/main'

if (!project.hasProperty('commonGradleBuildUrl')) {
    ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}

// set docker image standards
if (!project.hasProperty("dockerImage")) {
	project.ext.set("dockerImage", "adoptopenjdk/openjdk11:alpine-jre")
}
if (!project.hasProperty("dockerDefaultJavaOptions")) {
	project.ext.set("dockerDefaultJavaOptions", "-Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss.logmanager.LogManager -Djava.security.egd=file:/dev/./urandom")
}
if (!project.hasProperty("dockerDeploymentSourcePath")) {
	project.ext.set("dockerDeploymentSourcePath", 'build/*-runner.jar')
}
if (!project.hasProperty("kubernetesSupport")) {
	project.ext.set("kubernetesSupport", true)
}


/***************************************************************************************
 * Set additional template path
 ***************************************************************************************/
project.ext.set("useJUnit", false)


/***************************************************************************************
 * Depending on java-library
 ***************************************************************************************/
apply from: "${commonGradleBuildUrl}/java-library.gradle"
apply from: "${commonGradleBuildElementPath}/base/run.gradle"
apply from: "${commonGradleBuildElementPath}/base/docker.gradle"
setCommonGradleProperty("createLogbackConfig", false)


/***************************************************************************************
 * Don't do project validation in case of quarkus dev
 ***************************************************************************************/
if (!project.getProperty('IS_NEW')) {
	quarkusDev {
		projectValidation.enabled = false
		setCommonGradleProperty('hasProjectValidationExecuted', true)
	}
	run.dependsOn quarkusDev
}


/***************************************************************************************
 * Add quarkus repository
 ***************************************************************************************/
if (project.hasProperty("quarkusRepository") && !project.getProperty("quarkusRepository").toString().trim().isEmpty()) {
	repositories {
		maven {
			url "$quarkusRepository"
		}
	}
}


/***************************************************************************************
 * Defines the dependencies
 ***************************************************************************************/
dependencies {
    implementation enforcedPlatform("${quarkusPlatformGroupId}:${quarkusPlatformArtifactId}:${quarkusPlatformVersion}")
}


/***************************************************************************************
 * Define default log manager
 ***************************************************************************************/
test {
    systemProperty "java.util.logging.manager", "org.jboss.logmanager.LogManager"
}


/***************************************************************************************
 * project java validation
 ***************************************************************************************/
projectValidation {
	if (project.getProperty('IS_NEW')) {
		gradle.startParameter.excludedTaskNames += "build"
	}

	doLast {
		if (project.getProperty('IS_NEW')) {
			new File(srcMainResourcesDirectory).mkdirs()
			
			setCommonGradleProperty("fileName", "application.properties")
			createFileFromTemplate("${srcMainResourcesDirectory}/${fileName}", getTemplateFile("application.properties.template")) 
			
			def quarkusResourcePath = srcMainResourcesDirectory + "/META-INF/resources"
			new File(quarkusResourcePath).mkdirs()
			createFileFromTemplate("${quarkusResourcePath}/index.html", getTemplateFile("index.html.template")) 

			registerEndMessage("" << NELINE \
								<< "  To get started, got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable run") + "" << NELINE \
								<< "" << NELINE \
								<< "  To build (build & package jars, run tests), got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable") + "" << NELINE \
								<< "" << NELINE \
								<< "  To test, got to  " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable test") + "" << NELINE)
		}
	}
}
