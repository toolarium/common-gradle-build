/*
 * vuejs.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */


/***************************************************************************************
 * ResourceBundle.xls support
 ***************************************************************************************/
ext.initResourceBundle=true
ext.commonGradleResourcebundleJsonSupport=true
ext.commonGradleResourcebundleOutputPath='public/locales'

if (!project.hasProperty("dockerDeploymentSourcePath")) {
	project.ext.set("dockerDeploymentSourcePath", 'dist')
}
 
if (!project.hasProperty('commonGradleBuildUrl')) {
    ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}


/***************************************************************************************
 * Dependencies
 ***************************************************************************************/
apply from: "${commonGradleBuildElementPath}/nodejs.gradle"

addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/babel.config.js")
addCommonGradlePropertyList("allowedMainFiles", "$rootDirectory/vue.config.js")

/***************************************************************************************
 * project validation
 ***************************************************************************************/
projectValidation {
	doFirst {
		if (project.getProperty('IS_NEW')) {
			
			/*
			if (project.getProperty('createSrcMainJavaDirectory')) {
				printInfo("> Create directory " + colorize(HIGHLITE_LEVEL, srcMainJavaDirectory) + ".")
				
				
				new File("$rootDirectory/assets").mkdirs()
				assets-README.template
				new File("$rootDirectory/components").mkdirs()
				Logo.vue.template
			}
			*/

			/*
			generatePackageJson(rootDirectory, 
								"package.json", 
								false, 
								'package-json-nuxt.template',
								"{" + NELINE 
							  + "  \"name\": \"${rootProject.name}\"," + NELINE 
							  + "    \"scripts\": {" + NELINE 
							  + "    \"dev\": \"nuxt\"," + NELINE
							  + "    \"build\": \"nuxt build\"," + NELINE 
							  + "    \"generate\": \"nuxt generate\"," + NELINE 
							  + "    \"start\": \"nuxt start\"" + NELINE 
							  + "  }" + NELINE 
							  + "}" + NELINE)
			*/
			
			// use the defined files
			new File("$rootDirectory/$licenseFilename").delete()
			if (!"$rootDirectory/$licenseFilename".toString().equalsIgnoreCase(licenseFile.toString())) {
				// in case the license file not corresponds to a local file, just ignore
			} else {
				createFileFromTemplate(licenseFile, getTemplateFile('LICENSE.template'))
			}
			new File(readmeFile).delete()
			createFileFromTemplate(readmeFile, getTemplateFile('README.template'))			
			new File(editorConfigFile).delete()
			createFileFromTemplate(editorConfigFile, getTemplateFile('editorconfig.template'))
			
			// generate git files if necessary
			if (project.hasProperty('initScmForNewProjects') && project.getProperty('initScmForNewProjects')) {
				createGitFiles(true)
			}
			
			registerEndMessage("" << NELINE \
								<< "  To get started (equivalent to 'npm run dev'), got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable run") + "" << NELINE \
								<< "" << NELINE \
								<< "  To build (equivalent to 'npm run build'), got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable") + "" << NELINE)
		} 
	}
}
