/*
 * docker.gradle
 *
 * Copyright by toolarium, all rights reserved.
 * 
 * This file is part of the toolarium common-gradle-build.
 * 
 * The common-gradle-build is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * The common-gradle-build is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with Foobar. If not, see <http://www.gnu.org/licenses/>.
 */


ext.projectTypeTemplatePath='docker'
ext.createCustomJar = false
if (project.hasProperty('createFatJar') && project.getProperty('createFatJar').toString().trim().equalsIgnoreCase("true")) {
	ext.createCustomJar = project.getProperty('createFatJar').toString().trim().equalsIgnoreCase("true");
}

if (!project.hasProperty('commonGradleBuildUrl')) {
    ext.commonGradleBuildUrl='https://raw.githubusercontent.com/toolarium/common-gradle-build/master/gradle'
}

if (!project.hasProperty('commonGradleBuildElementPath')) {
	ext.commonGradleBuildElementPath="${commonGradleBuildUrl}/build-element"
}

// in case we have no group id but have a component id, we just take over the component id
if (!project.hasProperty("projectGroupId") || "$projectGroupId".toString().trim().isEmpty() ) {
	if (project.hasProperty("projectComponentId") && !"$projectComponentId".toString().trim().isEmpty() ) {
		project.ext.set("projectGroupId", project.ext.get("projectComponentId"))
	}
}
/*
if (!project.hasProperty("kubernetesSupport")) {
	project.ext.set("kubernetesSupport", true)
}*/
if (!project.hasProperty("createJar")) {
	project.ext.set("createJar", false)
}
if (!project.hasProperty("createSourceJar")) {
	project.ext.set("createSourceJar", false)
}
if (!project.hasProperty("createJavadocJar")) {
	project.ext.set("createJavadocJar", false)
}
if (!project.hasProperty("createApplicationConfigFile")) {
	project.ext.set("createApplicationConfigFile", false)
}
if (!project.hasProperty("kubernetesProjectConfiguration")) {
	project.ext.set("kubernetesProjectConfiguration", false)
}
if (!project.hasProperty("projectIndividualDockerfie")) {
	project.ext.set("projectIndividualDockerfie", true)
}
if (!project.hasProperty("createProjectIndividualDockerfie")) {
	project.ext.set("createProjectIndividualDockerfie", true)
}
if (!project.hasProperty("dockerDeploymentSourcePath")) {
	project.ext.set("dockerDeploymentSourcePath", ".")
}
if (!project.hasProperty("dockerEntrypoint")) {
	project.ext.set("dockerEntrypoint", "\"/bin/ash\"")
}
if (!project.hasProperty("dockerImage")) {
	project.ext.set("dockerImage", "nginx:alpine")
}

project.ext.set("buildAlwaysDockerImage", true)


/***************************************************************************************
 * Dependencies
 ***************************************************************************************/
apply from: "${commonGradleBuildElementPath}/base.gradle"
apply from: "${commonGradleBuildElementPath}/base/gradle.gradle"
apply from: "${commonGradleBuildElementPath}/base/run.gradle"
apply from: "${commonGradleBuildElementPath}/base/kubernetes.gradle"


/***************************************************************************************
 * Build custom jar file
 ***************************************************************************************/
task customJar(type: Jar) { jar ->
	group = 'Build'
	duplicatesStrategy = 'exclude' // work around, currendly don't work "$duplicatesStrategy"
	description = 'Assembles the kubernetes configuration into a jar file'
	onlyIf { return (project.hasProperty('createCustomJar') && project.getProperty('createCustomJar').toString().equalsIgnoreCase("true")) }
	
	// define proper manifest
	manifest {
		attributes 	'Specification-Title'   : rootProject.name,
					'Specification-Version' : project.version,
					'Implementation-Title'  : rootProject.name,
					'Implementation-Version': project.version + project.ext.scmVersionNumber,
					'Created-By'		   	: project.ext.buildToolVersionStackMessage,
					'Built-By'			   	: publishingUsername,
					'Build-Timestamp'	   	: BUILD_TIMESTAMP,
					'Build-OS'			   	: "${System.properties['os.name']} (${System.properties['os.version']}), ${System.properties['os.arch']}"
	}
	
	doLast {
		def filename = prepareFilename(jar.archivePath.getPath())
		printInfo("> Create custom jar " + colorize(HIGHLITE_LEVEL, filename) + ".")
	}
}


if (new File("${srcKubernetesDirectory}").exists()) {
	project.ext.set("kubernetesSupport", true)

	// add docker prefix tag
	def dockerTagPrefix = ""
	if (project.ext.isSnapshotVersion) {
		dockerTagPrefix = project.getProperty('dockerSnapshotTagPrefix')
	} else {
		dockerTagPrefix = project.getProperty('dockerTagPrefix')
	}
	dockerTagPrefix = "$dockerTagPrefix".toString().trim()
	if (!dockerTagPrefix.toString().isEmpty()) {
		dockerTagPrefix = "${dockerTagPrefix}/"
	}
	setCommonGradleProperty("kubernetesDockerImage", "${dockerTagPrefix}${rootProject.name}:${project.version}")

	apply from: "${commonGradleBuildElementPath}/java/repository.gradle"
	apply from: "${commonGradleBuildElementPath}/java/signing.gradle"
	apply from: "${commonGradleBuildElementPath}/java/publication.gradle"

	/***************************************************************************************
	 * artefacts
	 ***************************************************************************************/
	artifacts {
		archives kubernetesJar
	}
	
	if (project.hasProperty('createCustomJar') && project.getProperty('createCustomJar').toString().equalsIgnoreCase("true")) {
		artifacts {
			archives customJar
		}
	}
	
} else if (project.hasProperty('createCustomJar') && project.getProperty('createCustomJar').toString().equalsIgnoreCase("true")) {

	apply from: "${commonGradleBuildElementPath}/java/repository.gradle"
	apply from: "${commonGradleBuildElementPath}/java/signing.gradle"
	apply from: "${commonGradleBuildElementPath}/java/publication.gradle"

	/***************************************************************************************
	 * artefacts
	 ***************************************************************************************/
	artifacts {
		archives customJar
	}
	
} else {
	apply from: "${commonGradleBuildElementPath}/java/supported-repositories.gradle"


	/***************************************************************************************
	 * clean
	 ***************************************************************************************/
	task clean() {
		doFirst {
			delete "${rootDirectory}/build/"
		}
	}	


	/***************************************************************************************
	 * publish
	 ***************************************************************************************/
	task publish() {
	}	


	/***************************************************************************************
	 * build
	 ***************************************************************************************/
	task build() {
    }
}


/****************************************************************************************
 * Defines a implementation artefact
 ****************************************************************************************/
configurations {
	implementation
}
configurations.named('implementation') {
	attributes {
		attribute(Usage.USAGE_ATTRIBUTE, objects.named(Usage, Usage.JAVA_RUNTIME))
	}
}


apply from: "${commonGradleBuildElementPath}/base/docker.gradle"

if (new File("${srcKubernetesDirectory}").exists()) {
	defaultTasks 'clean', 'projectValidation', 'build'
	build.finalizedBy(dockerBuild)
	publish.finalizedBy(dockerPush)
} else {
	defaultTasks 'clean', 'projectValidation', 'dockerBuild'
}


/****************************************************************************************
 * Copy artefacts
 ****************************************************************************************/
task copyLibs(type: Copy) {
	group = 'Build'
	description = 'Copy livs dependencies'

    from { // use of closure defers evaluation until execution time
        configurations.implementation
    }

    into "$gradleBuildDirectory/libs"
}
dockerBuild.dependsOn copyLibs


/***************************************************************************************
 * project validation
 ***************************************************************************************/
projectValidation {
	doFirst {
		if (project.getProperty('IS_NEW')) {
			new File(srcDockerDirectory).mkdirs()
			new File(srcKubernetesDirectory).mkdirs()
			
			createFileFromTemplate("$dockerFileTemplate", getTemplateFile("$dockerFileTemplateName"), true, true, false /* keep template*/)
			createFileFromTemplate("$dockerIgnoreFile", getTemplateFile('dockerignore.template'))
		
			// generate git files if necessary
			if (project.hasProperty('initScmForNewProjects') && project.getProperty('initScmForNewProjects')) {
				createGitFiles(true)
			}

			registerEndMessage("" << NELINE \
								<< "  To get started, got to " + colorize(HIGHLITE_LEVEL, project.projectDir) + ":" << NELINE \
								<< "      " + colorize(HIGHLITE_LEVEL, "$startExecutable") + "" << NELINE )
		}
	}
	
	/* create service.properties
	doLast {
		if (project.hasProperty('createServiceProperties') && project.getProperty('createServiceProperties')) {
			def gradleProperties = readPropertiesFile("${gradlePropertiesFile}")
			def serviceKubernetesUrlPath = gradleProperties.getProperty("kubernetesUrlPath", "") // in case it is not defined, its empty and not available from outside the kubernetes
			
			new File("$gradleBuildDirectory").mkdirs()
			def servicePathProperties = new File("${gradleBuildDirectory}/service.properties")
			servicePathProperties.append("# service.properties" + NELINE)
		    servicePathProperties.append("service.name = ${rootProject.name}" + NELINE)
		    servicePathProperties.append("service.version = ${project.version}" + NELINE)		
			servicePathProperties.append("service.root-path = " + dockerSubPathAccess + NELINE) // kubernetes internal root-path
			servicePathProperties.append("service.resources = " + serviceKubernetesUrlPath + NELINE) // public url path 
		}
	}
	*/
}
